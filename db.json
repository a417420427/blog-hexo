{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"source/avatar.jpeg","path":"avatar.jpeg","modified":0,"renderable":0},{"_id":"themes/autumn/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/button-bg.png","path":"img/button-bg.png","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/button.svg","path":"img/button.svg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/cover.png","path":"img/cover.png","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/menu.svg","path":"img/menu.svg","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lato-Bold.eot","path":"font/Lato-Bold.eot","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lato-Bold.ttf","path":"font/Lato-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lato-Regular.eot","path":"font/Lato-Regular.eot","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lato-Regular.ttf","path":"font/Lato-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lora-Bold.eot","path":"font/Lora-Bold.eot","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lora-Bold.ttf","path":"font/Lora-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lora-Regular.eot","path":"font/Lora-Regular.eot","modified":0,"renderable":1},{"_id":"themes/autumn/source/font/Lora-Regular.ttf","path":"font/Lora-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/下载.png","path":"img/下载.png","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/c17345a23b00d07044d835c193d10a49.jpg","path":"img/c17345a23b00d07044d835c193d10a49.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images01.jpg","path":"img/images01.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images03.jpg","path":"img/images03.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images02.jpg","path":"img/images02.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images04.jpg","path":"img/images04.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images07.jpg","path":"img/images07.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images09.jpg","path":"img/images09.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images06.jpg","path":"img/images06.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images08.jpg","path":"img/images08.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images10.jpg","path":"img/images10.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/mages12.jpg","path":"img/mages12.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/mages11.jpg","path":"img/mages11.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/images05.jpg","path":"img/images05.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/mages13.jpg","path":"img/mages13.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/newyearseve-2011-hp.jpg","path":"img/newyearseve-2011-hp.jpg","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/new-years-eve-2013-5666313846390784-hp (1).gif","path":"img/new-years-eve-2013-5666313846390784-hp (1).gif","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/new-years-eve-2015-5985438795825152-hp.gif","path":"img/new-years-eve-2015-5985438795825152-hp.gif","modified":0,"renderable":1},{"_id":"themes/autumn/source/img/new-years-eve-2014-5699412953137152.2-hp.gif","path":"img/new-years-eve-2014-5699412953137152.2-hp.gif","modified":0,"renderable":1},{"_id":"themes/mintin/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/index.css","path":"css/index.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/index.css.map","path":"css/index.css.map","modified":0,"renderable":1},{"_id":"themes/mintin/source/js/backtop.js","path":"js/backtop.js","modified":0,"renderable":1},{"_id":"themes/mintin/source/js/highlight.pack.js","path":"js/highlight.pack.js","modified":0,"renderable":1},{"_id":"themes/mintin/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/mintin/source/img/Step1.1.png","path":"img/Step1.1.png","modified":0,"renderable":1},{"_id":"themes/mintin/source/img/Step1.2.png","path":"img/Step1.2.png","modified":0,"renderable":1},{"_id":"themes/mintin/source/img/Step1.3.png","path":"img/Step1.3.png","modified":0,"renderable":1},{"_id":"themes/mintin/source/img/Step1.4.png","path":"img/Step1.4.png","modified":0,"renderable":1},{"_id":"themes/mintin/source/img/tag.png","path":"img/tag.png","modified":0,"renderable":1},{"_id":"themes/mintin/source/img/top.svg","path":"img/top.svg","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/device/index.scss","path":"css/plugins/device/index.scss","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/demo.css","path":"css/plugins/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/demo_index.html","path":"css/plugins/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.css","path":"css/plugins/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.eot","path":"css/plugins/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.js","path":"css/plugins/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.json","path":"css/plugins/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.svg","path":"css/plugins/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.ttf","path":"css/plugins/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.woff","path":"css/plugins/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.woff2","path":"css/plugins/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/a11y-dark.css","path":"css/plugins/highlight/a11y-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/a11y-light.css","path":"css/plugins/highlight/a11y-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/agate.css","path":"css/plugins/highlight/agate.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/an-old-hope.css","path":"css/plugins/highlight/an-old-hope.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/androidstudio.css","path":"css/plugins/highlight/androidstudio.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/arta.css","path":"css/plugins/highlight/arta.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/ascetic.css","path":"css/plugins/highlight/ascetic.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-cave-light.css","path":"css/plugins/highlight/atelier-cave-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-cave-dark.css","path":"css/plugins/highlight/atelier-cave-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/arduino-light.css","path":"css/plugins/highlight/arduino-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-dune-light.css","path":"css/plugins/highlight/atelier-dune-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-estuary-dark.css","path":"css/plugins/highlight/atelier-estuary-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-estuary-light.css","path":"css/plugins/highlight/atelier-estuary-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-forest-dark.css","path":"css/plugins/highlight/atelier-forest-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-forest-light.css","path":"css/plugins/highlight/atelier-forest-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-dune-dark.css","path":"css/plugins/highlight/atelier-dune-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-heath-dark.css","path":"css/plugins/highlight/atelier-heath-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-heath-light.css","path":"css/plugins/highlight/atelier-heath-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-lakeside-light.css","path":"css/plugins/highlight/atelier-lakeside-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-lakeside-dark.css","path":"css/plugins/highlight/atelier-lakeside-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-plateau-light.css","path":"css/plugins/highlight/atelier-plateau-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-plateau-dark.css","path":"css/plugins/highlight/atelier-plateau-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-seaside-dark.css","path":"css/plugins/highlight/atelier-seaside-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-savanna-light.css","path":"css/plugins/highlight/atelier-savanna-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-sulphurpool-light.css","path":"css/plugins/highlight/atelier-sulphurpool-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-sulphurpool-dark.css","path":"css/plugins/highlight/atelier-sulphurpool-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-seaside-light.css","path":"css/plugins/highlight/atelier-seaside-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atom-one-dark-reasonable.css","path":"css/plugins/highlight/atom-one-dark-reasonable.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atom-one-light.css","path":"css/plugins/highlight/atom-one-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atom-one-dark.css","path":"css/plugins/highlight/atom-one-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/brown-paper.css","path":"css/plugins/highlight/brown-paper.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-savanna-dark.css","path":"css/plugins/highlight/atelier-savanna-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/brown-papersq.png","path":"css/plugins/highlight/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/codepen-embed.css","path":"css/plugins/highlight/codepen-embed.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/color-brewer.css","path":"css/plugins/highlight/color-brewer.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/dark.css","path":"css/plugins/highlight/dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/darkula.css","path":"css/plugins/highlight/darkula.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/default.css","path":"css/plugins/highlight/default.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/docco.css","path":"css/plugins/highlight/docco.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/dracula.css","path":"css/plugins/highlight/dracula.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/far.css","path":"css/plugins/highlight/far.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/foundation.css","path":"css/plugins/highlight/foundation.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/github-gist.css","path":"css/plugins/highlight/github-gist.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/github.css","path":"css/plugins/highlight/github.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/gml.css","path":"css/plugins/highlight/gml.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/googlecode.css","path":"css/plugins/highlight/googlecode.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/gradient-dark.css","path":"css/plugins/highlight/gradient-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/darcula.css","path":"css/plugins/highlight/darcula.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/gruvbox-dark.css","path":"css/plugins/highlight/gruvbox-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/gruvbox-light.css","path":"css/plugins/highlight/gruvbox-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/grayscale.css","path":"css/plugins/highlight/grayscale.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/highlight.css","path":"css/plugins/highlight/highlight.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/hopscotch.css","path":"css/plugins/highlight/hopscotch.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/hybrid.css","path":"css/plugins/highlight/hybrid.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/idea.css","path":"css/plugins/highlight/idea.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/ir-black.css","path":"css/plugins/highlight/ir-black.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/isbl-editor-dark.css","path":"css/plugins/highlight/isbl-editor-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/kimbie.dark.css","path":"css/plugins/highlight/kimbie.dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/kimbie.light.css","path":"css/plugins/highlight/kimbie.light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/isbl-editor-light.css","path":"css/plugins/highlight/isbl-editor-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/lightfair.css","path":"css/plugins/highlight/lightfair.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/magula.css","path":"css/plugins/highlight/magula.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/mono-blue.css","path":"css/plugins/highlight/mono-blue.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/monokai.css","path":"css/plugins/highlight/monokai.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/monokai-sublime.css","path":"css/plugins/highlight/monokai-sublime.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/night-owl.css","path":"css/plugins/highlight/night-owl.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/ocean.css","path":"css/plugins/highlight/ocean.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/nord.css","path":"css/plugins/highlight/nord.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/obsidian.css","path":"css/plugins/highlight/obsidian.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/paraiso-dark.css","path":"css/plugins/highlight/paraiso-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/paraiso-light.css","path":"css/plugins/highlight/paraiso-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/pojoaque.jpg","path":"css/plugins/highlight/pojoaque.jpg","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/purebasic.css","path":"css/plugins/highlight/purebasic.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/pojoaque.css","path":"css/plugins/highlight/pojoaque.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/qtcreator_dark.css","path":"css/plugins/highlight/qtcreator_dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/rainbow.css","path":"css/plugins/highlight/rainbow.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/qtcreator_light.css","path":"css/plugins/highlight/qtcreator_light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/railscasts.css","path":"css/plugins/highlight/railscasts.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/routeros.css","path":"css/plugins/highlight/routeros.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/school-book.css","path":"css/plugins/highlight/school-book.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/school-book.png","path":"css/plugins/highlight/school-book.png","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/shades-of-purple.css","path":"css/plugins/highlight/shades-of-purple.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/solarized-light.css","path":"css/plugins/highlight/solarized-light.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/solarized-dark.css","path":"css/plugins/highlight/solarized-dark.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/sunburst.css","path":"css/plugins/highlight/sunburst.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night-blue.css","path":"css/plugins/highlight/tomorrow-night-blue.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night-bright.css","path":"css/plugins/highlight/tomorrow-night-bright.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night-eighties.css","path":"css/plugins/highlight/tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night.css","path":"css/plugins/highlight/tomorrow-night.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow.css","path":"css/plugins/highlight/tomorrow.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/vs.css","path":"css/plugins/highlight/vs.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/vs2015.css","path":"css/plugins/highlight/vs2015.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/xcode.css","path":"css/plugins/highlight/xcode.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/xt256.css","path":"css/plugins/highlight/xt256.css","modified":0,"renderable":1},{"_id":"themes/mintin/source/css/plugins/highlight/zenburn.css","path":"css/plugins/highlight/zenburn.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1629518006803},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"9a94875cbf4c27fbe2e63da0496242addc6d2876","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1624351106672},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1624351106672},{"_id":"themes/cold-stone/LICENSE","hash":"20accc92eb68d996d4192c2a127c7a8a0c3200c1","modified":1629518398887},{"_id":"themes/cold-stone/README-ja.md","hash":"048d9822af3710b40a1a0050a4c856e2a357e838","modified":1629518398887},{"_id":"themes/cold-stone/_config.yml","hash":"e4bcb73053bc2d02f7dbf8528087811ee46630d9","modified":1629518398889},{"_id":"themes/cold-stone/README.md","hash":"5b609af9a705f482990d13638daed827ae4da10e","modified":1629518398888},{"_id":"themes/cold-stone/README-zh.md","hash":"d9119edc45526800ec39107cc3de94fe24c96119","modified":1629518398888},{"_id":"themes/cold-stone/layout/about.ejs","hash":"22f17c0ff194c3c51576e74f76faa696810e245f","modified":1629518398922},{"_id":"themes/cold-stone/layout/archive.ejs","hash":"f841e95fffda11c3321115b5a50ab5621da6b139","modified":1629518398922},{"_id":"themes/cold-stone/layout/categories.ejs","hash":"70f7f6d8e399c05a6b49d447afd42a36dfdeea6f","modified":1629518398922},{"_id":"themes/cold-stone/layout/post.ejs","hash":"73f742965b1f00073353eb841268e28dcc900ea2","modified":1629518398923},{"_id":"themes/cold-stone/layout/friends.ejs","hash":"f0cfad645484c9fd4cd60f1ba4373245fe6c222d","modified":1629518398922},{"_id":"themes/cold-stone/layout/index.ejs","hash":"43ed35ca97700a4e4122b49b475cb8995c786b71","modified":1629518398923},{"_id":"themes/cold-stone/layout/projects.ejs","hash":"c85de6c809b5af35fe7dd7128b0b5e3f8cbd1354","modified":1629518398924},{"_id":"themes/cold-stone/layout/layout.ejs","hash":"74bbfa87d88039be25f9b7dd47b19e56345db1ae","modified":1629518398923},{"_id":"themes/cold-stone/icons/icon-144x144.png","hash":"a76f9d67dc3c60731fcdbda4f867a7fed534e4ea","modified":1629518398890},{"_id":"themes/cold-stone/layout/tags.ejs","hash":"7898a79360580e038c296641f97e9e507fccce8a","modified":1629518398924},{"_id":"themes/cold-stone/icons/icon-128x128.png","hash":"7504abb2c8d4854aa7b1b6549fc778f593f56711","modified":1629518398889},{"_id":"themes/cold-stone/icons/icon-152x152.png","hash":"156aaa3ece041a2e7b3e1f6b9a01cba94fa34386","modified":1629518398890},{"_id":"themes/cold-stone/icons/icon-192x192.png","hash":"9ae86339d4839844c6416e3a1df67d068085f2a1","modified":1629518398891},{"_id":"themes/cold-stone/icons/icon-384x384.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1629518398892},{"_id":"themes/cold-stone/icons/icon-72x72.png","hash":"ef4946788f89225b863a783c2290d31c98d2a6a8","modified":1629518398893},{"_id":"themes/cold-stone/icons/icon-512x512.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1629518398892},{"_id":"themes/cold-stone/icons/icon-96x96.png","hash":"c4564a49cd455744dcdd59aedd5745f1972c42f0","modified":1629518398893},{"_id":"themes/cold-stone/languages/zh.yml","hash":"f4436ff8ebfe4bb323f87448fd988589355e638d","modified":1629518398919},{"_id":"themes/cold-stone/languages/en.yml","hash":"af2b32388e9be22bd3d2983521dd6749bbbe693b","modified":1629518398918},{"_id":"themes/cold-stone/languages/ja.yml","hash":"682e9e40017bbce99d8d37218e9e2d285f920102","modified":1629518398919},{"_id":"themes/cold-stone/source/manifest.json","hash":"479c4a21d449891ade3f5aed920aa66784658777","modified":1629518398924},{"_id":"themes/cold-stone/layout/_partial/footer.ejs","hash":"ff30b1507fb793aa79c729807d73907140b4ea0f","modified":1629518398919},{"_id":"themes/cold-stone/layout/_partial/bio.ejs","hash":"57af132cdbdeaa3fc54baba5e35fe1e19dc645b4","modified":1629518398919},{"_id":"themes/cold-stone/layout/_partial/head.ejs","hash":"9aed0d9294dd3ce1250af9be7f40c68d150048c5","modified":1629518398920},{"_id":"themes/cold-stone/layout/_partial/header.ejs","hash":"7cfc02e7f5e95ca8000f26b7a40018282adc1d89","modified":1629518398920},{"_id":"themes/cold-stone/layout/_partial/prev_next.ejs","hash":"078c176d8d7e8b5a84e5778edc83e7e5b00765a9","modified":1629518398921},{"_id":"themes/cold-stone/layout/_partial/prelude.ejs","hash":"a848dd387eebdcda9d9e31323dc336e97d9cf6d4","modified":1629518398921},{"_id":"themes/cold-stone/source/sw.js","hash":"e72a99e89eed65be631d92684323fac1a5c4b735","modified":1629518398926},{"_id":"themes/cold-stone/layout/_partial/search.ejs","hash":"7e001df8bcd573c4efb8b66658243a22b0958d35","modified":1629518398921},{"_id":"themes/cold-stone/source/scripts/busuanzi.js","hash":"fec770fdb60c6ef0587a5ebc0497f10207bfe83c","modified":1629518398925},{"_id":"themes/cold-stone/layout/_partial/script.ejs","hash":"bafb21b56063892e30187a125a904a6be07e2a89","modified":1629518398921},{"_id":"themes/cold-stone/source/scripts/cold-stone.js","hash":"7c38491abce5b763679592fc6ae098dac11748cc","modified":1629518398925},{"_id":"themes/cold-stone/source/styles/cold-stone.css","hash":"5325b0e4f272852dbb3d3d4aea96a2714f911701","modified":1629518398926},{"_id":"themes/cold-stone/source/scripts/leon.js","hash":"a881fcc1ad41e53e27fef7ec014b234c57c06273","modified":1629518398926},{"_id":"themes/cold-stone/images/audits.gif","hash":"d232cc85b4480d7f89a1074a8412a7286788d055","modified":1629518398897},{"_id":"themes/cold-stone/images/demo.gif","hash":"efa9d466b49de652127b6abfdd40f36090ea5bfb","modified":1629518398901},{"_id":"themes/cold-stone/images/home.jpg","hash":"bc59119251a58dfe720beafd4131b37c99f73583","modified":1629518398906},{"_id":"themes/cold-stone/images/home_night.jpg","hash":"c6027ef2d6032e1addaa1a71bc5c6e79b74bae66","modified":1629518398911},{"_id":"themes/cold-stone/images/index.png","hash":"c22e024d7bcb6ed958e44d89fb1d240befb5c10f","modified":1629518398917},{"_id":"source/avatar.jpeg","hash":"b7787799ea71b24b4da1cf6922cd5a046e4ce609","modified":1629518855436},{"_id":"source/categories/index.md","hash":"b1266f08c2330b87102c1cd23c695c02dee05071","modified":1629519078036},{"_id":"source/about/index.md","hash":"2d7334fd3c795812ccb8d812d14ed09b3b289c68","modified":1629519083777},{"_id":"source/icons/icon-128x128.png","hash":"7504abb2c8d4854aa7b1b6549fc778f593f56711","modified":1629518652426},{"_id":"source/icons/icon-192x192.png","hash":"9ae86339d4839844c6416e3a1df67d068085f2a1","modified":1629518652429},{"_id":"source/icons/icon-152x152.png","hash":"156aaa3ece041a2e7b3e1f6b9a01cba94fa34386","modified":1629518652428},{"_id":"source/icons/icon-144x144.png","hash":"a76f9d67dc3c60731fcdbda4f867a7fed534e4ea","modified":1629518652427},{"_id":"source/icons/icon-384x384.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1629518652430},{"_id":"source/icons/icon-72x72.png","hash":"ef4946788f89225b863a783c2290d31c98d2a6a8","modified":1629518652431},{"_id":"source/icons/icon-96x96.png","hash":"c4564a49cd455744dcdd59aedd5745f1972c42f0","modified":1629518652432},{"_id":"source/icons/icon-512x512.png","hash":"9e12a20544379a73660e659c381f99a669e5276e","modified":1629518652430},{"_id":"source/projects/index.md","hash":"0696c0b96f2b66e7171ccc88934b6adabce5f553","modified":1629519073726},{"_id":"source/tags/index.md","hash":"0199e69b957efa10f28d050c73f46e89e3e45e97","modified":1629519062621},{"_id":"source/_posts/eventLoop.md","hash":"09fd955688afee94c503da09d16821475b449563","modified":1629520002573},{"_id":"themes/phase/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1629519522997},{"_id":"themes/phase/.gitignore","hash":"eaa3d84cb77d92a21b111fd1e37f53edc1ff9de0","modified":1629519522989},{"_id":"themes/phase/LICENSE","hash":"c6f301bc722f0af3a55267a36c1c147aeddc6e46","modified":1629519522990},{"_id":"themes/phase/README.md","hash":"c6958aae29e9fd4b56eb1847ae377380af9393a2","modified":1629519522990},{"_id":"themes/phase/_config.yml","hash":"a16dc492b106b83ca2e056ab107d997e32cddb34","modified":1629519522990},{"_id":"themes/phase/languages/default.yml","hash":"431cbbad03ffe2f6e4589b334277c500699e3e93","modified":1629519522991},{"_id":"themes/phase/languages/en-GB.yml","hash":"431cbbad03ffe2f6e4589b334277c500699e3e93","modified":1629519522991},{"_id":"themes/phase/languages/en-US.yml","hash":"431cbbad03ffe2f6e4589b334277c500699e3e93","modified":1629519522991},{"_id":"themes/phase/languages/en.yml","hash":"431cbbad03ffe2f6e4589b334277c500699e3e93","modified":1629519522991},{"_id":"themes/phase/languages/zh-TW.yml","hash":"2fb11fe7d8b9fe41599433b5dbaa01d140f35454","modified":1629519522991},{"_id":"themes/phase/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1629519522995},{"_id":"themes/phase/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1629519522996},{"_id":"themes/phase/layout/index.ejs","hash":"e569d8fe0741a24efb89e44781f9e616da17e036","modified":1629519522996},{"_id":"themes/phase/layout/page.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1629519522996},{"_id":"themes/phase/layout/layout.ejs","hash":"18fe617b5f785ed6a8c0556977d2451a07c0f2f4","modified":1629519522996},{"_id":"themes/phase/layout/post.ejs","hash":"70cbc9854655773cc6ba84eecaaf330fed430465","modified":1629519522996},{"_id":"themes/phase/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1629519522997},{"_id":"themes/phase/layout/_partial/after_footer.ejs","hash":"9d396160dc8e2314a2480763277884c78cd1811e","modified":1629519522991},{"_id":"themes/phase/layout/_partial/archive.ejs","hash":"bcb74cafad2aa158ee621625d0b0db58a4ea42e1","modified":1629519522991},{"_id":"themes/phase/layout/_partial/article.ejs","hash":"26859d8aea4472857d4d7292581990e70f6cc9b7","modified":1629519522992},{"_id":"themes/phase/layout/_partial/footer.ejs","hash":"3f648ef1abf405ebeb3ea781b610768c25d30cd9","modified":1629519522992},{"_id":"themes/phase/layout/_partial/comment.ejs","hash":"bfe7055b9eb5b450a04d0102f6b31ca2a4a25faf","modified":1629519522992},{"_id":"themes/phase/layout/_partial/google_analytics.ejs","hash":"ed65d902699bb3e9ce7b92131ececf63eec8fe72","modified":1629519522992},{"_id":"themes/phase/layout/_partial/head.ejs","hash":"7d920b68b5ab0e32c7af34ba0e46d8cd67ba11b2","modified":1629519522993},{"_id":"themes/phase/layout/_partial/header.ejs","hash":"1ac518a1c8c99b8018d10734fcd8adb94bf27cab","modified":1629519522993},{"_id":"themes/phase/layout/_partial/pagination.ejs","hash":"911727604058b37d3bdffa7ad8a14e69d9afd84b","modified":1629519522993},{"_id":"themes/phase/layout/_partial/phasebeam.ejs","hash":"28e27e684e1617f507cbd2ed54fb1e23e237ed33","modified":1629519522993},{"_id":"themes/phase/source/css/style.styl","hash":"a63c18d96a0bbb43a0a8284471c7d235bb3048d2","modified":1629519523008},{"_id":"themes/phase/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1629519523008},{"_id":"themes/phase/source/js/gallery.js","hash":"6b1f7de930d21f600951700060348336136f462f","modified":1629519523009},{"_id":"themes/phase/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1629519523011},{"_id":"themes/phase/source/js/phasebeam.js","hash":"2b2f4b73a5bda2fd98aaa7f44364daaca3a996ee","modified":1629519523012},{"_id":"themes/phase/layout/_partial/post/category.ejs","hash":"ccaf653ab66cd0a9c5c2919aa635e223cb756264","modified":1629519522994},{"_id":"themes/phase/layout/_partial/post/date.ejs","hash":"48293faa3fa4de77f5e219a749257fcf1ddb372c","modified":1629519522994},{"_id":"themes/phase/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1629519522994},{"_id":"themes/phase/layout/_partial/post/share.ejs","hash":"a33753b26a6119203ca8fe8e9c81b120839e37e2","modified":1629519522994},{"_id":"themes/phase/layout/_partial/post/tag.ejs","hash":"23f5634c69ea43c70b5e8fa52c629be1ee642caa","modified":1629519522995},{"_id":"themes/phase/layout/_partial/post/title.ejs","hash":"8ee96a8ed031096698bd9e93cb164cff7fe57db3","modified":1629519522995},{"_id":"themes/phase/layout/_partial/post/taxonomy.ejs","hash":"f0bb316e0b59f693dfe4658fe8c78dc007c2cbca","modified":1629519522995},{"_id":"themes/phase/source/css/_base/layout.styl","hash":"72be1267491a85ac7ae500a62fe61c51f2904cf7","modified":1629519522997},{"_id":"themes/phase/source/css/_base/variable.styl","hash":"74f18cdc48ba8a30b5dab92255e977ae6b8a1727","modified":1629519522998},{"_id":"themes/phase/source/css/_partial/archive.styl","hash":"f9b692ec42d5798b3e7e52626ec7693f4a323229","modified":1629519522998},{"_id":"themes/phase/source/css/_partial/article.styl","hash":"4fb698cb2d61d8d31db8f731373257cf7824dbdd","modified":1629519522998},{"_id":"themes/phase/source/css/_partial/comment.styl","hash":"039cb426e6b15b72e6e1f329c6946d98e869ad67","modified":1629519522998},{"_id":"themes/phase/source/css/_partial/footer.styl","hash":"f6ca556f609e1fa48a765d5fe4033a3f8d3a9f21","modified":1629519522999},{"_id":"themes/phase/source/css/_partial/header.styl","hash":"80307d93e689ada08c7ed336a58a5debd4d9b793","modified":1629519522999},{"_id":"themes/phase/source/css/_partial/pagination.styl","hash":"ce53796d5aa24d43774c56f0769267191dc4553e","modified":1629519522999},{"_id":"themes/phase/source/css/_partial/phasebeam.styl","hash":"888951bb5b7e12a34ea02fc30b612f81aaea5ed3","modified":1629519523000},{"_id":"themes/phase/source/css/_partial/syntax.styl","hash":"84790e996e6f518bfc9413ffb8c6a74d14c2b9c6","modified":1629519523000},{"_id":"themes/phase/source/css/images/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1629519523006},{"_id":"themes/phase/source/css/images/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1629519523006},{"_id":"themes/phase/source/css/images/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1629519523007},{"_id":"themes/phase/source/css/images/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1629519523007},{"_id":"themes/phase/source/css/images/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1629519523007},{"_id":"themes/phase/source/css/font/fontawesome-webfont.eot","hash":"d775f599ff3f23be082e6a9604b4898718923a37","modified":1629519523001},{"_id":"themes/phase/source/css/font/fontawesome-webfont.woff","hash":"0612cddf2f835cceffccc88fd194f97367d0b024","modified":1629519523005},{"_id":"themes/phase/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1629519523009},{"_id":"themes/phase/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1629519523010},{"_id":"themes/phase/source/css/font/fontawesome-webfont.svg","hash":"d162419c91b8bab3a4fd327c933a0fcf3799c251","modified":1629519523002},{"_id":"themes/phase/source/css/font/fontawesome-webfont.ttf","hash":"a9468f6a1fe965fbcaf5a1bd6c11705e2fc5f84c","modified":1629519523004},{"_id":"source/_posts/clone.md","hash":"948cb851c8241f943c84a32e22f3a437a5fa3f14","modified":1629519979466},{"_id":"themes/autumn/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1629519827951},{"_id":"themes/autumn/LICENSE","hash":"f536fa132372f98422b7030e6dc7eed44a6f3cf0","modified":1629519827951},{"_id":"themes/autumn/README.md","hash":"4d715cc4ed590e86c93f499dd1025fce168cfb0e","modified":1629519827951},{"_id":"themes/autumn/_config.yml","hash":"7332bc45843fd41105f3ee58291a6dcdf0c8a121","modified":1629533515495},{"_id":"themes/autumn/layout/index.ejs","hash":"a3b3847e82f7a4c149357406b978d39a9884d34d","modified":1629525835367},{"_id":"themes/autumn/layout/layout.ejs","hash":"023da2363db6ebd86e476867ba3e5d255bbf4e28","modified":1629519827954},{"_id":"themes/autumn/layout/post.ejs","hash":"f597410955b8c8cdf7fb473a46c46fc8fae1fafa","modified":1629519827954},{"_id":"themes/autumn/languages/default.yml","hash":"9572e889944083ee24ac5d6b79d697b956d1dd5b","modified":1629519827952},{"_id":"themes/autumn/languages/zh-CN.yml","hash":"e8d6c1593a76e3b982707ad3386f2e7dcb0a86a1","modified":1629519827952},{"_id":"themes/autumn/source/.DS_Store","hash":"4c6a3132d33576d31027cc88badc18ee65f746b3","modified":1629519827954},{"_id":"themes/autumn/layout/_partial/head.ejs","hash":"cd682c25c170bd6bbe4f27e4de0ccfeaccf0e341","modified":1629519827953},{"_id":"themes/autumn/layout/_partial/header.ejs","hash":"4a642146cac9520f62a0370b2e4e021e56f14b95","modified":1629525859808},{"_id":"themes/autumn/layout/_widget/category.ejs","hash":"988035ec1ccb8b73673e2c05868d1af1f5326dd3","modified":1629525875898},{"_id":"themes/autumn/layout/_widget/archive.ejs","hash":"ab924371938fad0af2d3102e783d3fec37601ce3","modified":1629525869356},{"_id":"themes/autumn/layout/_widget/tag.ejs","hash":"58f45e5ee244325e9f9c927bd75ba1499281240d","modified":1629525882419},{"_id":"themes/autumn/source/css/style.styl","hash":"36acfc148063210328644b84ba95831a645e12b1","modified":1629519827956},{"_id":"themes/autumn/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1629519827968},{"_id":"themes/autumn/source/img/button-bg.png","hash":"be57bd491c993c2f897eae34da996ed7801dede4","modified":1629519827968},{"_id":"themes/autumn/source/img/button.svg","hash":"dd9e6ec23f3e2eadea654c717c1c1c574090c6fb","modified":1629519827969},{"_id":"themes/autumn/source/img/cover.png","hash":"18480dc4a616218875ecf00819318871c98b9632","modified":1629519827969},{"_id":"themes/autumn/source/img/favicon.ico","hash":"2e8ae8fb2730613ac8b1605e3c5a4a6ca66e7d28","modified":1629519827970},{"_id":"themes/autumn/source/img/menu.svg","hash":"2d2b8ecc5320de6b70a46ade7a5e0a0f101941a8","modified":1629519827970},{"_id":"themes/autumn/source/font/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1629519827956},{"_id":"themes/autumn/source/font/Lato-Bold.eot","hash":"0b41857a70f61e48fe91c57661c192fff5b1c7f4","modified":1629519827956},{"_id":"themes/autumn/source/font/Lato-Bold.ttf","hash":"cd493b15b85d6e58a41ddd6747f121993bdf85cc","modified":1629519827957},{"_id":"themes/autumn/source/font/Lato-Regular.eot","hash":"a407297bb03fa7249f9b2f207812a87ee6bc60bb","modified":1629519827962},{"_id":"themes/autumn/source/font/Lato-Regular.ttf","hash":"55900d5b51bec73a4edc71fa741b25e80eb42be1","modified":1629519827964},{"_id":"themes/autumn/source/font/Lora-Bold.eot","hash":"ff07a95bb1702fc4d4d97b960beafab33a8dfe86","modified":1629519827964},{"_id":"themes/autumn/source/font/Lora-Bold.ttf","hash":"4dae113cfd94755a9b12fd05f7687aa83183d875","modified":1629519827965},{"_id":"themes/autumn/source/css/_partial/font.styl","hash":"7ef35c24774a3bea53a73f09039ced9db4cabe22","modified":1629519827955},{"_id":"themes/autumn/source/css/_partial/header.styl","hash":"8f6483c19b0756d4ca94aec2b3dae4349c24a968","modified":1629519827955},{"_id":"themes/autumn/source/css/_partial/post.styl","hash":"4ea2b22c2de5620eac501fcf6d2bd51ef34b4c65","modified":1629519827955},{"_id":"themes/autumn/source/css/_widget/aside.styl","hash":"c7f3e23f69bf20ba913afd939690b1837fb4bf72","modified":1629519827955},{"_id":"themes/autumn/source/font/Lora-Regular.eot","hash":"196a4f080315598e60f6ead1862de9651f831409","modified":1629519827966},{"_id":"themes/autumn/source/font/Lora-Regular.ttf","hash":"80c11b9b62cd9ddc2deaff6d9ef92520cf20b644","modified":1629519827967},{"_id":"source/_posts/eventLoopInNode.md","hash":"ae0305c2db8e6e7728c070e0df45df3f95bc7dab","modified":1629522855356},{"_id":"source/_posts/githubActions.md","hash":"7d385529b35cba3e296c29349c403a4e02365175","modified":1629522855356},{"_id":"source/_posts/slashInUrl.md","hash":"3a80a7fb1767cb7bbe953691b5079fce52491ae1","modified":1629523426944},{"_id":"source/_posts/githubComment.md","hash":"0af93ff98f62f314674977122ea5ada3bc9ec714","modified":1629522855357},{"_id":"source/_posts/thisPointer.md","hash":"6688b59d2eaf0275df621fc5a48cbb0a29bc07a6","modified":1629522855358},{"_id":"source/_posts/webpackBase.md","hash":"2bc60ad2063c8b38154f4b91dc68535f3874a46f","modified":1629522855358},{"_id":"source/_posts/webpackBuild.md","hash":"3c19464f22bff944d6b3fe78389e1f318e86a43d","modified":1629522855359},{"_id":"source/_posts/webpackCompilation.md","hash":"194c2feb1370de76a7fcdb9948bf0001e4a4923d","modified":1629522855360},{"_id":"source/_posts/Ime.md","hash":"455ae20c73f7931fa9e865ca857b1266febd7594","modified":1629534029179},{"_id":"source/_posts/queue.md","hash":"cc31516652f51638c5b09122680ce7466062451c","modified":1629546612867},{"_id":"source/_posts/节流和防抖.md","hash":"75d72705927187ab6bfb4af94a03601d2552c717","modified":1629533515495},{"_id":"themes/autumn/.DS_Store","hash":"cdc30afbcf8100b3a111906d16f7809bd2607ce5","modified":1629525801886},{"_id":"source/_posts/lazyloadImage.md","hash":"24dca83e5d9c662d19dcdea7ac0bede12540ecdf","modified":1629555307305},{"_id":"themes/autumn/source/img/newyearseve-2011-hp.jpg","hash":"637360312b32c6b22783e7e11b370183fe6a1ab1","modified":1629546824676},{"_id":"themes/autumn/source/img/images04.jpg","hash":"cb92ed7047a92e23c43dd9d7fc67242eb56bffe0","modified":1629546824509},{"_id":"themes/autumn/source/img/new-years-eve-2013-5666313846390784-hp (1).gif","hash":"9403c666a317d6fb6cd5caea2ca9fa7c2d0c8a4b","modified":1629546824644},{"_id":"themes/autumn/source/img/new-years-eve-2014-5699412953137152.2-hp.gif","hash":"b522c342f538325bec5833db964f09f4df5aca2d","modified":1629546824652},{"_id":"themes/autumn/source/img/new-years-eve-2015-5985438795825152-hp.gif","hash":"ebac5db5bf87ea6b081f58559fd1154be0b52b26","modified":1629546824662},{"_id":"themes/autumn/source/img/mages11.jpg","hash":"9f0bc8fae31adde332b3343a847078f286886b5f","modified":1629546824598},{"_id":"themes/autumn/source/img/images01.jpg","hash":"659866c77e86dc6e9d0907bb727d1e54370c951f","modified":1629546824477},{"_id":"themes/autumn/source/img/images07.jpg","hash":"ee7150ec1c9081adeb23546e4b43a59409320b56","modified":1629546824545},{"_id":"themes/autumn/source/img/images03.jpg","hash":"5bd714d008a2e15c078c40848d2b53aa900a788f","modified":1629546824496},{"_id":"themes/autumn/source/img/images09.jpg","hash":"4b388293ee1d40455c2135bfeb71108123a61f0b","modified":1629546824574},{"_id":"themes/autumn/source/img/images08.jpg","hash":"fcbddfacba3cb97c492da647acea6a933c5c4fdd","modified":1629546824558},{"_id":"themes/autumn/source/img/images06.jpg","hash":"79dccdb5c30664612825c20ebbb07c8ad72bcb54","modified":1629546824531},{"_id":"themes/autumn/source/img/images05.jpg","hash":"81593377da03a7c38cd574581f92b42fc4e07f46","modified":1629546824516},{"_id":"themes/autumn/source/img/images10.jpg","hash":"188fec38a328d90c56f8d2e30bdfe38bb149f13c","modified":1629546824585},{"_id":"themes/autumn/source/img/images02.jpg","hash":"cc904bdb065b02b7ae1084dccf3ec0a7d8b85583","modified":1629546824487},{"_id":"themes/autumn/source/img/下载.png","hash":"9ba3b3440faf2311e14155e591bfd8c0c763a41d","modified":1629546824448},{"_id":"themes/autumn/source/img/mages12.jpg","hash":"8f6c84fed11f315a4abcc7e0add2a85a01dfb944","modified":1629546824616},{"_id":"themes/autumn/source/img/mages13.jpg","hash":"8a84755f51df0b0865ba223649a4be728ba46bb8","modified":1629546824631},{"_id":"themes/autumn/source/img/c17345a23b00d07044d835c193d10a49.jpg","hash":"1ed241a59384a97c071bc1b7e429c15e018a593e","modified":1629546824463},{"_id":"public/about/index.html","hash":"63e9d8235e201d71510e8360c1d3466bb57e608d","modified":1654132207952},{"_id":"public/categories/index.html","hash":"7467b31ea9fb8c33e9001ad1276dd4afdfc09d7a","modified":1654132207952},{"_id":"public/projects/index.html","hash":"0b1120ca73f84c213ad96a746aa341994ce1352a","modified":1654132207952},{"_id":"public/tags/index.html","hash":"ab8029a591255b06e76e8edd49397f18339081f7","modified":1654132207952},{"_id":"public/2021/08/21/lazyloadImage/index.html","hash":"bca291047fe651f4bafa12d8a2e8184b53b31f04","modified":1654132207952},{"_id":"public/2021/08/21/Ime/index.html","hash":"1e8abd75c77b189865f1570703a87951027cacb7","modified":1654132207952},{"_id":"public/2021/08/21/slashInUrl/index.html","hash":"29e8f7cf0d8d2d1a7e0a5a91c03d0c2c33354cce","modified":1654132207952},{"_id":"public/2021/08/21/thisPointer/index.html","hash":"a72d1923c461f0b0135387b70680c156c7b816f9","modified":1654132207952},{"_id":"public/2021/08/21/eventLoopInNode/index.html","hash":"ef0365cd0895f5756a33b397e6e68ccca445f2c6","modified":1654132207952},{"_id":"public/2021/08/21/githubActions/index.html","hash":"92ac1de912afe01bfe06f8d3008ca2da444c41e5","modified":1654132207952},{"_id":"public/2021/08/21/githubComment/index.html","hash":"5c79bc609c259fd837d3337b61113a29906cfa87","modified":1654132207952},{"_id":"public/2021/08/21/clone/index.html","hash":"9664bc1492f3d4a774dc6fe270c35fba2cb8528c","modified":1654132207952},{"_id":"public/archives/index.html","hash":"77ebdae4dd154efa14c64ed24ebdd37f25217e86","modified":1654132207952},{"_id":"public/archives/page/2/index.html","hash":"d20cc16a19ca3743d87f5741eca53d327c50345d","modified":1654132207952},{"_id":"public/archives/2021/index.html","hash":"9a273db1b6cbd23a5f2e373a2e0923f2f606a9e0","modified":1654132207952},{"_id":"public/archives/2021/page/2/index.html","hash":"d73f5b7d60a2510678bbc6fefbe20cbfad00a0ac","modified":1654132207952},{"_id":"public/archives/2021/08/index.html","hash":"1973bf4970223ab9258a80c382ebbfea6854cc55","modified":1654132207952},{"_id":"public/archives/2021/08/page/2/index.html","hash":"c9995b73b4d6d6d7fd7b093ddfe0270702f59adf","modified":1654132207952},{"_id":"public/categories/javascript/index.html","hash":"51b31ab226509345cc0708a99a6097558c6d1687","modified":1654132207952},{"_id":"public/categories/node/index.html","hash":"b3d8f95c295d6b2a2d77ac19a5992ddad0d50376","modified":1654132207952},{"_id":"public/categories/git/index.html","hash":"1d5ddc4645360d761e5487c56bfbfd62f35e7527","modified":1654132207952},{"_id":"public/categories/broswer/index.html","hash":"4ee3119566171ee83c84944c293da2b1176c24a7","modified":1654132207952},{"_id":"public/categories/webpack/index.html","hash":"533dfd8ef9a1a4e187528b25e1dbb147f694fde8","modified":1654132207952},{"_id":"public/index.html","hash":"5b1d16b242a2408c479cf2040609ac84e5c2129a","modified":1654132207952},{"_id":"public/page/2/index.html","hash":"474e545a5dd17c55d424063d759f259f40eea3f3","modified":1654132207952},{"_id":"public/tags/拷贝/index.html","hash":"2ec5b4799141d676edd7d34b0938b02217354a78","modified":1654132207952},{"_id":"public/tags/事件循环/index.html","hash":"257e9d5ba034402628d136a7d72f0897e419fa57","modified":1654132207952},{"_id":"public/tags/this指针/index.html","hash":"cb515c111f8710d1f76f329ec02f4b9d91d5b1c2","modified":1654132207952},{"_id":"public/tags/自动部署-Actions/index.html","hash":"9a0f347f22c05786d6d3bd3f549272379f43fc49","modified":1654132207952},{"_id":"public/tags/评论系统/index.html","hash":"38cc77c6f3e2732702259dc6b894cbb5ad2e4200","modified":1654132207952},{"_id":"public/tags/url/index.html","hash":"3a4b610b2304314b8bc2904c5ba90fc983ef5fee","modified":1654132207952},{"_id":"public/tags/webpack/index.html","hash":"533dfd8ef9a1a4e187528b25e1dbb147f694fde8","modified":1654132207952},{"_id":"public/tags/lodash-debounce/index.html","hash":"8b3c09463bd69d4382ad73f8465d94cfcd7b83c4","modified":1654132207952},{"_id":"public/tags/queue/index.html","hash":"f9b19012a3e9580bb1fbbb13b4f467ebabbcb7fe","modified":1654132207952},{"_id":"public/tags/lazyload/index.html","hash":"37ac36678b298b96336b73a62d8fd762f65e2b54","modified":1654132207952},{"_id":"public/2021/08/21/queue/index.html","hash":"17b6e7953389f86b871e7374886930b5e20ca74c","modified":1654132207952},{"_id":"public/2021/08/21/节流和防抖/index.html","hash":"799ad4f396d80098256fce2df88f5a29cb121e16","modified":1654132207952},{"_id":"public/2021/08/21/webpackBuild/index.html","hash":"ae0eaa9b783e5c9eb666ebf4d8fa80aac5a904b6","modified":1654132207952},{"_id":"public/2021/08/21/webpackCompilation/index.html","hash":"bb5485dad7f7508be462421e2cb8f63fa573af2a","modified":1654132207952},{"_id":"public/2021/08/21/webpackBase/index.html","hash":"125eddafbdbc8ef5cdcf70a98878bd3839250266","modified":1654132207952},{"_id":"public/2021/08/21/eventLoop/index.html","hash":"d8ff154731351ad2b8a1343453b8d2741ff61ce7","modified":1654132207952},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1629556192063},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1629556192063},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1629556192063},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1629556192063},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1629556192063},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1629556192063},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1629556192063},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1629556192063},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1629556192063},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1629556192063},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1629556192063},{"_id":"source/_posts/functionCurrying.md","hash":"0da5f6c0b8afa51f0e2c8738004d2ae05cb8ddc3","modified":1629615131442},{"_id":"source/_posts/dragFile.md","hash":"8772c22a849833bed8c2ae35ef0046eafd997f32","modified":1629630951115},{"_id":"public/tags/拖拽上传-dragevent/index.html","hash":"9b8ebd605d3b1bfa20d7f9d62ea5eec28e5e12cb","modified":1654132207952},{"_id":"public/tags/函数-柯里化/index.html","hash":"d02f81ff239ae95c2788604ca179a17f947cb696","modified":1654132207952},{"_id":"public/2021/08/22/dragFile/index.html","hash":"9ed03f92d73644cbf2eaa8dd1a8f3698e8e0afae","modified":1654132207952},{"_id":"public/2021/08/21/functionCurrying/index.html","hash":"0e77fb84f41c06fd11da6c5dc5f95bb96fda7fff","modified":1654132207952},{"_id":"source/_posts/MonteCarlomethod.md","hash":"c044707f1a8eb3067d6f4f6955aff8dbcf12e52f","modified":1629791295877},{"_id":"source/_posts/proxy.md","hash":"e85ccbde185bff6f8e2bb2b7ee1e1910dbdba7b3","modified":1629788289818},{"_id":"source/_posts/reactComponent.md","hash":"598889a461373aebf3b8eef2211a5773580c6433","modified":1629796596564},{"_id":"source/_posts/slot.md","hash":"1489ee2430a8730e96bc2eb7bbebe78385a14b18","modified":1648796406643},{"_id":"public/2022/04/01/slot/index.html","hash":"21f85ba0c881aff4f88b96b5ebd70cca90ebe676","modified":1654132207952},{"_id":"public/2021/08/23/MonteCarlomethod/index.html","hash":"0e3fcc7adbfa54c1940766ec8c0758fd5e0e2ab8","modified":1654132207952},{"_id":"public/archives/2022/index.html","hash":"1cfe23b5f730563a84cc32fe42284cbbbef3bada","modified":1654132207952},{"_id":"public/archives/2022/04/index.html","hash":"1e05dfbb5eac8096d006b81fc66caed490aa91e6","modified":1654132207952},{"_id":"public/tags/react-组件化/index.html","hash":"abfac218185bb8e6cc879eca436f814e3e94deb2","modified":1654132207952},{"_id":"public/categories/算法/index.html","hash":"e38fef94eb7fcc57d8e3da5b8a7fb77abe8b815f","modified":1654132207952},{"_id":"public/categories/react-javascript/index.html","hash":"abfac218185bb8e6cc879eca436f814e3e94deb2","modified":1654132207952},{"_id":"public/2021/08/24/reactComponent/index.html","hash":"ec4b2f09dd80de33044e8a196d6859e42410b02e","modified":1654132207952},{"_id":"public/2021/08/22/proxy/index.html","hash":"fcdd9a2bb0fc4bb0905489ee8a4215f071023fc5","modified":1654132207952},{"_id":"public/categories/Vue-javascript/index.html","hash":"25e5845b5882574e181de54c3e32c5b7d1511763","modified":1654132207952},{"_id":"public/tags/Vue-slot/index.html","hash":"25e5845b5882574e181de54c3e32c5b7d1511763","modified":1654132207952},{"_id":"source/_posts/文件下载.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1651135861850},{"_id":"source/.DS_Store","hash":"c46c713009c7b818fd469b9f1489d0b09c72d344","modified":1648805366608},{"_id":"source/_posts/代码简洁之道（一）.md","hash":"b719bf3858bfc69793b41b0cdce0c444df9e48e0","modified":1650781008284},{"_id":"public/2022/04/28/文件下载/index.html","hash":"f3e5d4d9792364e2e9c6cc7a4699ebb468d6d47d","modified":1654132207952},{"_id":"public/2022/04/24/代码简洁之道（一）/index.html","hash":"aefbc738758f8fd31c37c5019f1a9d5ba2dbb054","modified":1654132207952},{"_id":"public/archives/page/3/index.html","hash":"5f1bb4f985b615a716e9a177538850ffe302313d","modified":1654132207952},{"_id":"public/tags/javascript/index.html","hash":"23a6aafdd60c90504baee2801a30a1b1d3a0f57f","modified":1654132207952},{"_id":"public/page/3/index.html","hash":"9faf5d1be3eb102accc2b3af84e7ef9ddbdde35f","modified":1654132207952},{"_id":"public/categories/code/index.html","hash":"ababfe28013cf813a42b83630bb06fcbfaa9efef","modified":1654132207952},{"_id":"source/_posts/Localstorage和SessionStorage.md","hash":"5394a80fd8ebbd18924431262126fa9605752b54","modified":1654130412590},{"_id":"public/2022/05/16/Localstorage和SessionStorage/index.html","hash":"2771df2779909191d8dc58b85ac8d208bbd637b5","modified":1654132207952},{"_id":"public/archives/2022/05/index.html","hash":"fb29f5e19f169122d85d9905d6a836968348509f","modified":1654132207952},{"_id":"themes/mintin/.gitignore","hash":"ad00fbf2912c875d1d75a6483c557b4d1acd4c5b","modified":1651797561147},{"_id":"themes/mintin/_config.yml","hash":"9ac772a8b547cef5f4d02182b838ca3d5689df6c","modified":1654132200771},{"_id":"themes/mintin/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1651797561147},{"_id":"themes/mintin/package.json","hash":"3007bf897b0a9594285b864113ae3fbc620d1d58","modified":1651797561153},{"_id":"themes/mintin/readme.md","hash":"7c9e7a8030357609093283c6bd719012fbdf1d75","modified":1653964391659},{"_id":"themes/mintin/layout/about_page.ejs","hash":"d861f620f90f83590e941790b5a6668d75787dfa","modified":1651797561150},{"_id":"themes/mintin/layout/cate_page.ejs","hash":"54411aba283c42e9d215c01a706aa5a0accfe9b5","modified":1651797561150},{"_id":"themes/mintin/layout/index.ejs","hash":"92281a180a09e1972e1ef2787f5c9e18269fcb75","modified":1651797561150},{"_id":"themes/mintin/layout/page.ejs","hash":"c2cde68ddc8fad29eadbd8f0fe3c04b2b07c088b","modified":1651797561150},{"_id":"themes/mintin/layout/layout.ejs","hash":"e4ccb77af510c3984a3acfc99416a4c5108ad809","modified":1651797561150},{"_id":"themes/mintin/layout/post.ejs","hash":"fe9171e027ea98d55047146a1997aeba1ee2a47f","modified":1651797561150},{"_id":"themes/mintin/layout/tags_page.ejs","hash":"7bf5538f5ab56727c6ef3cf66a9a32204bd319c1","modified":1651797561151},{"_id":"themes/mintin/languages/zh-CN.yml","hash":"eaf11c2745fde1fc4ff393d08f73df9ae6361e93","modified":1651797561148},{"_id":"themes/mintin/languages/en.yml","hash":"f9e660433c937fd20bdb91dd75a23f71ed8bf8b9","modified":1651797561147},{"_id":"themes/mintin/languages/fr.yml","hash":"dccb71347027a7e5486682ef21e6822d2f784e81","modified":1651797561147},{"_id":"themes/mintin/languages/zh-TW.yml","hash":"c90564c4f6841e04f3838f23eebb411bd3115a6d","modified":1651797561148},{"_id":"themes/mintin/layout/_common/article.ejs","hash":"49708e981eece832010693bfd662ea43b893ea09","modified":1651797561148},{"_id":"themes/mintin/layout/_common/excerpt.ejs","hash":"18f7a38d3547a08006309c595709038fd5eefb9d","modified":1651797561148},{"_id":"themes/mintin/layout/_common/foot.ejs","hash":"6c344faf6a96f6219b7bdb5fd7184502cb4c26ab","modified":1651797561148},{"_id":"themes/mintin/layout/_common/head.ejs","hash":"316ee266c8c2b1967813e9787179e36e0c2fe910","modified":1651797561149},{"_id":"themes/mintin/layout/_common/footer.ejs","hash":"bcc5a5f147929187974a8b151abb95d2ed49cee0","modified":1651797561148},{"_id":"themes/mintin/layout/_common/highlight.ejs","hash":"df0cb6d2f2915e07ce3b8c0bfe3145c6410cfce5","modified":1651797561149},{"_id":"themes/mintin/layout/_common/navbar.ejs","hash":"780bf1600a9914ec3baaeb4f5c105a8858512444","modified":1651797561149},{"_id":"themes/mintin/layout/_common/index-card.ejs","hash":"7519f4e755fc38e953e470de463623362c33e24a","modified":1651797561149},{"_id":"themes/mintin/layout/_common/rights.ejs","hash":"98835e3286426f3ed7d2cd32f536c4b178f4a5bf","modified":1651797561149},{"_id":"themes/mintin/layout/_common/pagination.ejs","hash":"518f9114c1bb9308ca15c67a29aea0f378752974","modified":1651797561149},{"_id":"themes/mintin/layout/_plugins/backtop.ejs","hash":"17392396802195aad7f0f6e3fc3ac9e154a8865c","modified":1651797561150},{"_id":"themes/mintin/source/js/backtop.js","hash":"6fc41a2e884d56dd7c5881b659249e00142a795b","modified":1651797561202},{"_id":"themes/mintin/layout/_common/widgets.ejs","hash":"e1c1e5277e46d3f3b1984d3588c35cd46da3c1bb","modified":1653964370908},{"_id":"themes/mintin/source/css/index.css","hash":"dc905ac54e4b730dcca23479e03649748b966753","modified":1651797561154},{"_id":"themes/mintin/source/css/index.css.map","hash":"82974fb535d7f771082a9b0c2b834731e2fb5f2a","modified":1651797561154},{"_id":"themes/mintin/source/js/iconfont.js","hash":"e6fe39fe6555feb4b1c64e65a374cb12b299c105","modified":1651797561204},{"_id":"themes/mintin/source/img/Step1.3.png","hash":"ed2330960047e2cc38db8b28e1c45d05f7569465","modified":1651797561194},{"_id":"themes/mintin/source/img/Step1.1.png","hash":"ebe3dd2ee5480653d7dcb7fc104d8e5fa57e6536","modified":1651797561191},{"_id":"themes/mintin/source/img/Step1.4.png","hash":"1f6cc94e31bfdd2595c6cfd1e0963d65328d3f2f","modified":1651797561200},{"_id":"themes/mintin/source/img/top.svg","hash":"ae370ba60c7b62e2971219e7cef58d9a619ec89d","modified":1651797561202},{"_id":"themes/mintin/source/img/tag.png","hash":"c95bc4826817a4b4f8ae8322b3473d9e706b1585","modified":1651797561202},{"_id":"themes/mintin/source/css/plugins/device/index.scss","hash":"1050bb91a6d4f8f3c923bc5a1be0687741bc549d","modified":1651797561157},{"_id":"themes/mintin/source/css/plugins/iconfont/demo_index.html","hash":"c16e2b8d9030935f8efd5156d65f9ac7afc08895","modified":1651797561187},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.css","hash":"7317544f31cbec46913cd1f13d4416dbd52cbbca","modified":1651797561187},{"_id":"themes/mintin/source/css/plugins/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1651797561186},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.eot","hash":"57f4d1543daf2dd863b6abf5af67570c4276b344","modified":1651797561187},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.js","hash":"e6fe39fe6555feb4b1c64e65a374cb12b299c105","modified":1651797561188},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.json","hash":"292c171359126fb4683a6cd66ffc0d408c5963a0","modified":1651797561188},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.ttf","hash":"589d71c30521a7b698e2f71eb3f942939b65a4aa","modified":1651797561188},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.svg","hash":"9e95b97e4b3ac1f3fe8fb7053ce02ac0f7065132","modified":1651797561188},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.woff2","hash":"6d4b025e286d469b1a37be76666072e351acc03f","modified":1651797561189},{"_id":"themes/mintin/source/css/plugins/iconfont/iconfont.woff","hash":"2cdda8deb9d5b1cec3357d05226b5e5b761aa2e6","modified":1651797561189},{"_id":"themes/mintin/source/css/plugins/highlight/a11y-dark.css","hash":"122f8c71ac1c35398e96bf209f20668195a9e144","modified":1651797561159},{"_id":"themes/mintin/source/css/plugins/highlight/a11y-light.css","hash":"3f5cde8e2278a6d52e6e4f30509588c80a3ad5a6","modified":1651797561159},{"_id":"themes/mintin/source/css/plugins/highlight/agate.css","hash":"bb58979fd230b27b1f1524ae0241acdad5d84cf4","modified":1651797561159},{"_id":"themes/mintin/source/css/plugins/highlight/an-old-hope.css","hash":"124d4856bbd6e2cfc164914080724f1a59b9899c","modified":1651797561160},{"_id":"themes/mintin/source/css/plugins/highlight/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1651797561160},{"_id":"themes/mintin/source/css/plugins/highlight/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1651797561161},{"_id":"themes/mintin/source/css/plugins/highlight/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1651797561161},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1651797561162},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1651797561162},{"_id":"themes/mintin/source/css/plugins/highlight/arduino-light.css","hash":"141b53b2e2de6a321a695d816a836666c5e2c5e6","modified":1651797561160},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1651797561162},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1651797561163},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1651797561163},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1651797561163},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1651797561162},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1651797561164},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1651797561164},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1651797561164},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1651797561165},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1651797561164},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1651797561165},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1651797561165},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1651797561166},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1651797561166},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1651797561166},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1651797561166},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1651797561166},{"_id":"themes/mintin/source/css/plugins/highlight/atom-one-dark-reasonable.css","hash":"90e194ba1c1fe2ca1b5f40b5eb7c29f40ab66ff4","modified":1651797561167},{"_id":"themes/mintin/source/css/plugins/highlight/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1651797561167},{"_id":"themes/mintin/source/css/plugins/highlight/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1651797561168},{"_id":"themes/mintin/source/css/plugins/highlight/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1651797561167},{"_id":"themes/mintin/source/css/plugins/highlight/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1651797561165},{"_id":"themes/mintin/source/css/plugins/highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1651797561168},{"_id":"themes/mintin/source/css/plugins/highlight/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1651797561169},{"_id":"themes/mintin/source/css/plugins/highlight/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1651797561168},{"_id":"themes/mintin/source/css/plugins/highlight/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1651797561169},{"_id":"themes/mintin/source/css/plugins/highlight/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1651797561170},{"_id":"themes/mintin/source/css/plugins/highlight/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1651797561171},{"_id":"themes/mintin/source/css/plugins/highlight/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1651797561170},{"_id":"themes/mintin/source/css/plugins/highlight/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1651797561170},{"_id":"themes/mintin/source/css/plugins/highlight/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1651797561173},{"_id":"themes/mintin/source/css/plugins/highlight/foundation.css","hash":"29d960268ca944b5537ff2d2e70d620339dcd5d5","modified":1651797561173},{"_id":"themes/mintin/source/css/plugins/highlight/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1651797561174},{"_id":"themes/mintin/source/css/plugins/highlight/gradient-dark.css","hash":"e49b73bab4446ec2dbc0befb860a1fdc27bf1b42","modified":1651797561174},{"_id":"themes/mintin/source/css/plugins/highlight/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1651797561174},{"_id":"themes/mintin/source/css/plugins/highlight/gml.css","hash":"0f3f5502247b00ce37dc2b362a6984305001dd50","modified":1651797561174},{"_id":"themes/mintin/source/css/plugins/highlight/github-gist.css","hash":"8cfbcbf4c0491e44e6b073c95a04cc401cb11ab2","modified":1651797561173},{"_id":"themes/mintin/source/css/plugins/highlight/darcula.css","hash":"617241bc95a5dbbd741820bf296155b90e22d61b","modified":1651797561169},{"_id":"themes/mintin/source/css/plugins/highlight/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1651797561175},{"_id":"themes/mintin/source/css/plugins/highlight/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1651797561175},{"_id":"themes/mintin/source/css/plugins/highlight/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1651797561175},{"_id":"themes/mintin/source/css/plugins/highlight/highlight.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1651797561175},{"_id":"themes/mintin/source/css/plugins/highlight/hopscotch.css","hash":"3d258ff6f84900ad9abbe43f4ec8b8152c72e887","modified":1651797561176},{"_id":"themes/mintin/source/css/plugins/highlight/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1651797561176},{"_id":"themes/mintin/source/css/plugins/highlight/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1651797561176},{"_id":"themes/mintin/source/css/plugins/highlight/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1651797561177},{"_id":"themes/mintin/source/css/plugins/highlight/isbl-editor-dark.css","hash":"73d2282192e403868998cff2e77093ace8a6e5fb","modified":1651797561177},{"_id":"themes/mintin/source/css/plugins/highlight/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1651797561178},{"_id":"themes/mintin/source/css/plugins/highlight/isbl-editor-light.css","hash":"41baadd11cf10bab67128dd104f704fdd149318e","modified":1651797561177},{"_id":"themes/mintin/source/css/plugins/highlight/lightfair.css","hash":"3bdc4517354b7acc495562d8b4937c7a40a89f06","modified":1651797561178},{"_id":"themes/mintin/source/css/plugins/highlight/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1651797561177},{"_id":"themes/mintin/source/css/plugins/highlight/magula.css","hash":"8f5cfb7c23c705de7c95577563eb79beb49b68f6","modified":1651797561178},{"_id":"themes/mintin/source/css/plugins/highlight/mono-blue.css","hash":"3163f08756efa9e68e87addf20750e5650cdb8e4","modified":1651797561178},{"_id":"themes/mintin/source/css/plugins/highlight/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1651797561179},{"_id":"themes/mintin/source/css/plugins/highlight/monokai.css","hash":"99ab7678d541bc02a8d38de83a289c5e549a20ce","modified":1651797561179},{"_id":"themes/mintin/source/css/plugins/highlight/night-owl.css","hash":"d067142aeb74bfdcdec4acebb3241b3e79461bda","modified":1651797561179},{"_id":"themes/mintin/source/css/plugins/highlight/nord.css","hash":"98dfcd6eee4968fb4c634784cb048a98169b1bc8","modified":1651797561179},{"_id":"themes/mintin/source/css/plugins/highlight/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1651797561180},{"_id":"themes/mintin/source/css/plugins/highlight/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1651797561180},{"_id":"themes/mintin/source/css/plugins/highlight/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1651797561180},{"_id":"themes/mintin/source/css/plugins/highlight/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1651797561180},{"_id":"themes/mintin/source/css/plugins/highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1651797561181},{"_id":"themes/mintin/source/css/plugins/highlight/purebasic.css","hash":"e6bb7a57221bed7a601dc9d8d41d9b1425e2dea6","modified":1651797561181},{"_id":"themes/mintin/source/css/plugins/highlight/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1651797561181},{"_id":"themes/mintin/source/css/plugins/highlight/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1651797561182},{"_id":"themes/mintin/source/css/plugins/highlight/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1651797561181},{"_id":"themes/mintin/source/css/plugins/highlight/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1651797561182},{"_id":"themes/mintin/source/css/plugins/highlight/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1651797561181},{"_id":"themes/mintin/source/css/plugins/highlight/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1651797561182},{"_id":"themes/mintin/source/css/plugins/highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1651797561183},{"_id":"themes/mintin/source/css/plugins/highlight/shades-of-purple.css","hash":"4d5b44a1615173d02b223ba2cce220ab70e09650","modified":1651797561183},{"_id":"themes/mintin/source/css/plugins/highlight/school-book.css","hash":"6c4198b6ffde866f5e2fe9172aee094065f9774a","modified":1651797561182},{"_id":"themes/mintin/source/css/plugins/highlight/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1651797561183},{"_id":"themes/mintin/source/css/plugins/highlight/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1651797561183},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1651797561184},{"_id":"themes/mintin/source/css/plugins/highlight/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1651797561183},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1651797561184},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1651797561184},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1651797561185},{"_id":"themes/mintin/source/css/plugins/highlight/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1651797561185},{"_id":"themes/mintin/source/css/plugins/highlight/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1651797561185},{"_id":"themes/mintin/source/css/plugins/highlight/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1651797561185},{"_id":"themes/mintin/source/css/plugins/highlight/xcode.css","hash":"d8a1f18e5344c2edf97921ec21a54b02745997e9","modified":1651797561186},{"_id":"themes/mintin/source/css/plugins/highlight/xt256.css","hash":"d9e0f7d8ab5cfd627ce085c16e7a90e1ad495516","modified":1651797561186},{"_id":"themes/mintin/source/css/plugins/highlight/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1651797561186},{"_id":"themes/mintin/source/css/plugins/device/desktop/_article.scss","hash":"ded177e0975f9394772c27262d4bd1255abf407d","modified":1651797561155},{"_id":"themes/mintin/source/css/plugins/device/desktop/_base.scss","hash":"0bfe122437129bd66880d1b566e01cc7ba5d4456","modified":1651797561155},{"_id":"themes/mintin/source/css/plugins/device/desktop/_card.scss","hash":"2b0c29c637efcca98f9910ae3688e07e27dbe353","modified":1651797561155},{"_id":"themes/mintin/source/css/plugins/device/desktop/_navbar.scss","hash":"9960ace7550d15f69f483a62cfa274346755d0c2","modified":1651797561156},{"_id":"themes/mintin/source/css/plugins/device/desktop/_cate_page.scss","hash":"3b9cd6ad63f44f2ffcc0dbbd85fb9427914c2077","modified":1651797561156},{"_id":"themes/mintin/source/css/plugins/device/desktop/_rights.scss","hash":"029dd70303907a83978f82fa84228dc3202645f7","modified":1651797561156},{"_id":"themes/mintin/source/css/plugins/device/desktop/_tags_page.scss","hash":"bc39f70e22717c08bfb9a1a54c28878531ccc402","modified":1651797561156},{"_id":"themes/mintin/source/css/plugins/device/desktop/_pagination.scss","hash":"207c4d0543b32e7fbbac95bfd14c9c474243b34d","modified":1651797561156},{"_id":"themes/mintin/source/css/plugins/device/mobile/_article.scss","hash":"90508bab60bceb09fd8f925b7631d94fdb647282","modified":1651797561157},{"_id":"themes/mintin/source/css/plugins/device/mobile/_card.scss","hash":"a8cb813ed94ebd5453ef09ba88aca7e35423ea32","modified":1651797561158},{"_id":"themes/mintin/source/css/plugins/device/mobile/_base.scss","hash":"6adc1cb8264c71416bddf163bd005d6f085c5174","modified":1651797561157},{"_id":"themes/mintin/source/css/plugins/device/mobile/_navbar.scss","hash":"950cb239c3965cd5b6aff75694435ff0ffb2fef8","modified":1651797561158},{"_id":"themes/mintin/source/css/plugins/device/mobile/_cate_page.scss","hash":"61273bc4a2cdece8458095d6f0c85cd18662b379","modified":1651797561158},{"_id":"themes/mintin/source/css/plugins/device/mobile/_pagination.scss","hash":"f23f72f9d14c99d87bd1568f9a8eac6c28c1f9cf","modified":1651797561158},{"_id":"themes/mintin/source/css/plugins/device/mobile/_tags_page.scss","hash":"e55bbdac40c59d18ca4b25f322ea134a08e216f6","modified":1651797561159},{"_id":"themes/mintin/source/css/plugins/device/mobile/_rights.scss","hash":"d8b34aff96946e757535b2212f13ac83434d51d6","modified":1651797561158},{"_id":"themes/mintin/source/favicon.ico","hash":"d926f0c25169c1d5212c2344b2bc7d8de46f3e4e","modified":1651797561190},{"_id":"themes/mintin/source/img/Step1.2.png","hash":"c8ea5f268b1acafaa56f9c0a2430cd3c1dbad6de","modified":1651797561192},{"_id":"themes/mintin/source/js/highlight.pack.js","hash":"26ced1c227c83c65421e7802fd330b8d1a0daeee","modified":1651797561203},{"_id":"themes/mintin/mintin-preview.png","hash":"8e452347d8bc81c987aa37e3c7a701707cf8cc41","modified":1651797561153},{"_id":"public/css/index.css.map","hash":"82974fb535d7f771082a9b0c2b834731e2fb5f2a","modified":1654132053007},{"_id":"public/img/Step1.3.png","hash":"ed2330960047e2cc38db8b28e1c45d05f7569465","modified":1654132053007},{"_id":"public/img/Step1.1.png","hash":"ebe3dd2ee5480653d7dcb7fc104d8e5fa57e6536","modified":1654132053007},{"_id":"public/img/top.svg","hash":"ae370ba60c7b62e2971219e7cef58d9a619ec89d","modified":1654132053007},{"_id":"public/img/tag.png","hash":"c95bc4826817a4b4f8ae8322b3473d9e706b1585","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.eot","hash":"57f4d1543daf2dd863b6abf5af67570c4276b344","modified":1654132053007},{"_id":"public/img/Step1.4.png","hash":"1f6cc94e31bfdd2595c6cfd1e0963d65328d3f2f","modified":1654132053007},{"_id":"public/css/plugins/device/index.scss","hash":"1050bb91a6d4f8f3c923bc5a1be0687741bc549d","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.svg","hash":"9e95b97e4b3ac1f3fe8fb7053ce02ac0f7065132","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.woff","hash":"2cdda8deb9d5b1cec3357d05226b5e5b761aa2e6","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.ttf","hash":"589d71c30521a7b698e2f71eb3f942939b65a4aa","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.woff2","hash":"6d4b025e286d469b1a37be76666072e351acc03f","modified":1654132053007},{"_id":"public/css/plugins/highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1654132053007},{"_id":"public/css/plugins/highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1654132053007},{"_id":"public/css/plugins/highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1654132053007},{"_id":"public/favicon.ico","hash":"d926f0c25169c1d5212c2344b2bc7d8de46f3e4e","modified":1654132053007},{"_id":"public/img/Step1.2.png","hash":"c8ea5f268b1acafaa56f9c0a2430cd3c1dbad6de","modified":1654132053007},{"_id":"public/css/index.css","hash":"dc905ac54e4b730dcca23479e03649748b966753","modified":1654132053007},{"_id":"public/js/iconfont.js","hash":"e6fe39fe6555feb4b1c64e65a374cb12b299c105","modified":1654132053007},{"_id":"public/js/backtop.js","hash":"6fc41a2e884d56dd7c5881b659249e00142a795b","modified":1654132053007},{"_id":"public/css/plugins/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.css","hash":"7317544f31cbec46913cd1f13d4416dbd52cbbca","modified":1654132053007},{"_id":"public/css/plugins/iconfont/demo_index.html","hash":"c16e2b8d9030935f8efd5156d65f9ac7afc08895","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.js","hash":"e6fe39fe6555feb4b1c64e65a374cb12b299c105","modified":1654132053007},{"_id":"public/css/plugins/iconfont/iconfont.json","hash":"63052ce8d017ed71c265b0801ed3af91a004694a","modified":1654132053007},{"_id":"public/css/plugins/highlight/agate.css","hash":"bb58979fd230b27b1f1524ae0241acdad5d84cf4","modified":1654132053007},{"_id":"public/css/plugins/highlight/a11y-dark.css","hash":"122f8c71ac1c35398e96bf209f20668195a9e144","modified":1654132053007},{"_id":"public/css/plugins/highlight/a11y-light.css","hash":"3f5cde8e2278a6d52e6e4f30509588c80a3ad5a6","modified":1654132053007},{"_id":"public/css/plugins/highlight/ascetic.css","hash":"6358377b5c25667886aca0d605cbc497cf02405f","modified":1654132053007},{"_id":"public/css/plugins/highlight/androidstudio.css","hash":"958baa24814c06a625612a3b2b478d54bc1bf1b1","modified":1654132053007},{"_id":"public/css/plugins/highlight/arta.css","hash":"17b23b9fa57ef7a05a6aaeea9b5feb5442a8e584","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-cave-light.css","hash":"2933f0247ac6d84c2954dd4946e359853abbf70a","modified":1654132053007},{"_id":"public/css/plugins/highlight/arduino-light.css","hash":"141b53b2e2de6a321a695d816a836666c5e2c5e6","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-cave-dark.css","hash":"f397d4418ce88b998841fd9135242461ba1a79b5","modified":1654132053007},{"_id":"public/css/plugins/highlight/an-old-hope.css","hash":"124d4856bbd6e2cfc164914080724f1a59b9899c","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-dune-light.css","hash":"7ba074de897e6a5e27d8b97f7cd06c1746474e72","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-estuary-dark.css","hash":"a0c46a0f955e3864f5e967ea93f5e61519a17be8","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-forest-light.css","hash":"8a78a4eea0f32d094d1f9e316d59e990ba739d97","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-forest-dark.css","hash":"d8a4dc060b3fc719aa2f7d7b3f1019a3964b8101","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-dune-dark.css","hash":"081d73e454db140cd41b2bb595be297cfcab25e0","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-heath-dark.css","hash":"b93c2241ff123e62d4edb3dfc20410e4d1da3e78","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-estuary-light.css","hash":"91ae4668c15a085ffce15ca21e93da445b5ecf3a","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-heath-light.css","hash":"172b98f783d213a20211ec6aca9a3840ba524f55","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-plateau-light.css","hash":"9731db1052f23351c983210701edd3f5ceed343f","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-lakeside-dark.css","hash":"fa707b252d5d5caccc0589374522bed47b7ca100","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-plateau-dark.css","hash":"240f79f4e1fd63485c13900875b64c5a0d1bd06d","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-lakeside-light.css","hash":"8ba595b9ba6e8be6dc029bf80caab38e85aed686","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-seaside-dark.css","hash":"b2800804a21f729a3d0a16b3aadc17679fd0639c","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-savanna-light.css","hash":"6bd3a62c32558476d436bd389500e5fbeb693d67","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-sulphurpool-light.css","hash":"0319c3eea893601b79b6c57652ef49b9222cc9de","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-sulphurpool-dark.css","hash":"1f006f8bd28e2ffbb73f708769605ba766787fff","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-seaside-light.css","hash":"3e6b9e2a3a5de455490b8224401f19702df4cde9","modified":1654132053007},{"_id":"public/css/plugins/highlight/atom-one-dark-reasonable.css","hash":"90e194ba1c1fe2ca1b5f40b5eb7c29f40ab66ff4","modified":1654132053007},{"_id":"public/css/plugins/highlight/atom-one-light.css","hash":"eda63d8cce440dbf3bb823e10577a134e9941deb","modified":1654132053007},{"_id":"public/css/plugins/highlight/atelier-savanna-dark.css","hash":"09d45a218f87b8cb55b5ca7f4e9d76ea89a9404a","modified":1654132053007},{"_id":"public/css/plugins/highlight/brown-paper.css","hash":"a6817d890e58f80ce79d87620791dae821a70fff","modified":1654132053007},{"_id":"public/css/plugins/highlight/atom-one-dark.css","hash":"a6d28e1c04cee20cd874fc7ac0903d8e2e4bd54e","modified":1654132053007},{"_id":"public/css/plugins/highlight/color-brewer.css","hash":"96332573db854e7b7411caa94ba29b238fede2d3","modified":1654132053007},{"_id":"public/css/plugins/highlight/dark.css","hash":"fc77519d4f5d731054c5d4b7e7bbdbb510833271","modified":1654132053007},{"_id":"public/css/plugins/highlight/darkula.css","hash":"0be948bb84acc05f93a1e5e9b48fe34cf61673a0","modified":1654132053007},{"_id":"public/css/plugins/highlight/codepen-embed.css","hash":"c4520e45d18259817b8942d17971f27c94f0fb09","modified":1654132053007},{"_id":"public/css/plugins/highlight/far.css","hash":"67e0658b2376e91e4894636a3522a30c2aec42de","modified":1654132053007},{"_id":"public/css/plugins/highlight/default.css","hash":"fba68624d1b34a5543fe0bf4b2af2ac1ddf65e74","modified":1654132053007},{"_id":"public/css/plugins/highlight/dracula.css","hash":"2633f2e84680e9f381e9ac1df344b542e28f9774","modified":1654132053007},{"_id":"public/css/plugins/highlight/docco.css","hash":"1be7be09a1b927c22c7f11451becdb335145bdd2","modified":1654132053007},{"_id":"public/css/plugins/highlight/foundation.css","hash":"29d960268ca944b5537ff2d2e70d620339dcd5d5","modified":1654132053007},{"_id":"public/css/plugins/highlight/gml.css","hash":"0f3f5502247b00ce37dc2b362a6984305001dd50","modified":1654132053007},{"_id":"public/css/plugins/highlight/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1654132053007},{"_id":"public/css/plugins/highlight/github-gist.css","hash":"8cfbcbf4c0491e44e6b073c95a04cc401cb11ab2","modified":1654132053007},{"_id":"public/css/plugins/highlight/googlecode.css","hash":"fed3d439d0c305b337dd9c0f68dcbfa51429f445","modified":1654132053007},{"_id":"public/css/plugins/highlight/darcula.css","hash":"617241bc95a5dbbd741820bf296155b90e22d61b","modified":1654132053007},{"_id":"public/css/plugins/highlight/gradient-dark.css","hash":"e49b73bab4446ec2dbc0befb860a1fdc27bf1b42","modified":1654132053007},{"_id":"public/css/plugins/highlight/gruvbox-dark.css","hash":"aaf90d076e34bc44016462d70f83985e0e55c8dc","modified":1654132053007},{"_id":"public/css/plugins/highlight/grayscale.css","hash":"5688658c28fc5799517e8f3c224ae3da3797ba44","modified":1654132053007},{"_id":"public/css/plugins/highlight/highlight.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1654132053007},{"_id":"public/css/plugins/highlight/gruvbox-light.css","hash":"084699ab0aa326fede86e38bf41ebe49edde3a90","modified":1654132053007},{"_id":"public/css/plugins/highlight/hopscotch.css","hash":"3d258ff6f84900ad9abbe43f4ec8b8152c72e887","modified":1654132053007},{"_id":"public/css/plugins/highlight/idea.css","hash":"164649ae1e7c891a0d88cca075521af28656e2a1","modified":1654132053007},{"_id":"public/css/plugins/highlight/hybrid.css","hash":"1e2d54598b5f948b597059909d4bd158b7df021f","modified":1654132053007},{"_id":"public/css/plugins/highlight/ir-black.css","hash":"95aad65ba77183500ce0f7ad62a7535b647ee20c","modified":1654132053007},{"_id":"public/css/plugins/highlight/isbl-editor-dark.css","hash":"73d2282192e403868998cff2e77093ace8a6e5fb","modified":1654132053007},{"_id":"public/css/plugins/highlight/kimbie.light.css","hash":"b7aa9b1b21a25dfefcac7649a328962f84c47913","modified":1654132053007},{"_id":"public/css/plugins/highlight/kimbie.dark.css","hash":"58ed061c204fbc09d221ee9135d66bad976e5fc3","modified":1654132053007},{"_id":"public/css/plugins/highlight/lightfair.css","hash":"3bdc4517354b7acc495562d8b4937c7a40a89f06","modified":1654132053007},{"_id":"public/css/plugins/highlight/isbl-editor-light.css","hash":"41baadd11cf10bab67128dd104f704fdd149318e","modified":1654132053007},{"_id":"public/css/plugins/highlight/magula.css","hash":"8f5cfb7c23c705de7c95577563eb79beb49b68f6","modified":1654132053007},{"_id":"public/css/plugins/highlight/mono-blue.css","hash":"3163f08756efa9e68e87addf20750e5650cdb8e4","modified":1654132053007},{"_id":"public/css/plugins/highlight/monokai.css","hash":"99ab7678d541bc02a8d38de83a289c5e549a20ce","modified":1654132053007},{"_id":"public/css/plugins/highlight/monokai-sublime.css","hash":"e4f3df87cbfa634c86b489e9cc43acf44d415986","modified":1654132053007},{"_id":"public/css/plugins/highlight/nord.css","hash":"98dfcd6eee4968fb4c634784cb048a98169b1bc8","modified":1654132053007},{"_id":"public/css/plugins/highlight/ocean.css","hash":"fce6858e1c5eb9d2857cb5b5d24069c5994cfc91","modified":1654132053007},{"_id":"public/css/plugins/highlight/obsidian.css","hash":"6ed475813fe4886a58b236297862ff2f181e66f7","modified":1654132053007},{"_id":"public/css/plugins/highlight/night-owl.css","hash":"d067142aeb74bfdcdec4acebb3241b3e79461bda","modified":1654132053007},{"_id":"public/css/plugins/highlight/paraiso-dark.css","hash":"8f5445327ce3c83b62f6bf4c1a0d87fa6f036341","modified":1654132053007},{"_id":"public/css/plugins/highlight/paraiso-light.css","hash":"6eb3ab7a3337f9cad3a2e5fa6bf7dd83685228d8","modified":1654132053007},{"_id":"public/css/plugins/highlight/purebasic.css","hash":"e6bb7a57221bed7a601dc9d8d41d9b1425e2dea6","modified":1654132053007},{"_id":"public/css/plugins/highlight/pojoaque.css","hash":"4e1e6a431212f5043a550474a1acda63362cdd6f","modified":1654132053007},{"_id":"public/css/plugins/highlight/qtcreator_light.css","hash":"9a2a19ac2f6e6a7d5edd7fae67b7de4a3957e878","modified":1654132053007},{"_id":"public/css/plugins/highlight/railscasts.css","hash":"a6d2043478fae5915926914cbd96fe9b706d98a6","modified":1654132053007},{"_id":"public/css/plugins/highlight/qtcreator_dark.css","hash":"213a40d203c4986cdbcb1bdf7d0b9013b29041ba","modified":1654132053007},{"_id":"public/css/plugins/highlight/rainbow.css","hash":"1b2d98ccdda36aa926d0e6d069b673fdacd2d33e","modified":1654132053007},{"_id":"public/css/plugins/highlight/school-book.css","hash":"6c4198b6ffde866f5e2fe9172aee094065f9774a","modified":1654132053007},{"_id":"public/css/plugins/highlight/routeros.css","hash":"fc5db7c8f18d6b31ad92df21a51e7867d459af19","modified":1654132053007},{"_id":"public/css/plugins/highlight/shades-of-purple.css","hash":"4d5b44a1615173d02b223ba2cce220ab70e09650","modified":1654132053007},{"_id":"public/css/plugins/highlight/solarized-light.css","hash":"6b70caf1e84d096b1bc6318d5dae78d69e5dd1d3","modified":1654132053007},{"_id":"public/css/plugins/highlight/sunburst.css","hash":"8309eab2e5b1765dbee81a626baacbdad869b76a","modified":1654132053007},{"_id":"public/css/plugins/highlight/tomorrow-night-eighties.css","hash":"d82b84bcda0588105dbbc0e8e8ba5e62c208a061","modified":1654132053007},{"_id":"public/css/plugins/highlight/tomorrow-night.css","hash":"86264dd861d35a8b135f9fcb8ff2675e9fa69c16","modified":1654132053007},{"_id":"public/css/plugins/highlight/solarized-dark.css","hash":"d02fc2dcbeec4b7af2cadec4bbbfc5b016aed4c7","modified":1654132053007},{"_id":"public/css/plugins/highlight/tomorrow-night-blue.css","hash":"cd257d7d6a37cd5a09419b5f5f9d34b6b282423f","modified":1654132053007},{"_id":"public/css/plugins/highlight/tomorrow.css","hash":"163593ad70770d0296c5e643fa62e58e63f1b340","modified":1654132053007},{"_id":"public/css/plugins/highlight/tomorrow-night-bright.css","hash":"04f0af30fdda5e5d6ebdeef5a860b6b7e49cfe89","modified":1654132053007},{"_id":"public/css/plugins/highlight/vs.css","hash":"2ac5e89ceb3d5a0e0fdab1ed6d9a411ec7d221aa","modified":1654132053007},{"_id":"public/css/plugins/highlight/vs2015.css","hash":"3c7fa677de2a785d90fc6c3f7520ac1b11bfd37a","modified":1654132053007},{"_id":"public/css/plugins/highlight/xcode.css","hash":"d8a1f18e5344c2edf97921ec21a54b02745997e9","modified":1654132053007},{"_id":"public/css/plugins/highlight/xt256.css","hash":"d9e0f7d8ab5cfd627ce085c16e7a90e1ad495516","modified":1654132053007},{"_id":"public/css/plugins/highlight/zenburn.css","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1654132053007},{"_id":"public/js/highlight.pack.js","hash":"26ced1c227c83c65421e7802fd330b8d1a0daeee","modified":1654132053007}],"Category":[{"name":"javascript","_id":"cksla4fpe0000p13qfc0x7hdk"},{"name":"node","_id":"cksladlbs0002sq3q7g5penan"},{"name":"git","_id":"ckslafrf9000asq3qc6d6b7tk"},{"name":"broswer","_id":"ckslai6ge000jsq3q1gus6vdp"},{"name":"webpack","_id":"ckslarjdi000qsq3qbc9vc9fs"},{"name":"算法","_id":"cl1g0fb8n0002us9k9ji419wx"},{"name":"react javascript","_id":"cl1g0fb8u0006us9k9g4u2k4h"},{"name":"Vue javascript","_id":"cl1g2t8wu00006c9k6ygh2fj9"},{"name":"code","_id":"cl38avqmz0002ojmb67vzbedl"}],"Data":[],"Page":[{"title":"关于","date":"2021-08-21T04:04:41.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-08-21 12:04:41\n---\n","updated":"2021-08-21T05:22:51.799Z","path":"about/index.html","_id":"ckslbu2cu000ysq3q5d1g24t2","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2021-08-21T04:04:33.000Z","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-08-21 12:04:33\nlayout: categories\n---\n","updated":"2021-08-21T05:22:51.800Z","path":"categories/index.html","_id":"ckslbu2cx0010sq3qcp79flde","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"主页","date":"2021-08-21T04:04:25.000Z","layout":"projects","_content":"","source":"projects/index.md","raw":"---\ntitle: 主页\ndate: 2021-08-21 12:04:25\nlayout: projects\n---\n","updated":"2021-08-21T05:22:51.801Z","path":"projects/index.html","_id":"ckslbu2d8001usq3q5y0x9t3t","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2021-08-21T04:04:38.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-08-21 12:04:38\nlayout: tags\n---\n","updated":"2021-08-21T05:22:51.802Z","path":"tags/index.html","_id":"ckslbu2d8001vsq3q41xpbwfm","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"深拷贝和浅拷贝","_content":"\n1. 定义 - 浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。\n\n2. 实现\n\n- 浅拷贝实现\n\n```js\nconst isArray = (props) =>\n  Object.prototype.toString.call(props) === \"[object Array]\";\n\nconst isObject = (props) =>\n  Object.prototype.toString.call(props) === \"[object Object]\";\nlet result = isArray(obj) ? [] : {};\n\nfunction shallowCopy(obj) {\n  function shallowCopyArray(arr) {\n    // return arr.concat([])\n    // return arr.slice()\n    // return Array.from(arr)\n    // return [...arr]\n  }\n\n  function shallowCopyObject(obj) {\n    // return Object.assign({}, obj)\n    // return {...obj}\n  }\n  return isArray(obj) ? shallowCopyArray(obj) : shallowCopyObject(obj);\n}\n```\n\n- 深拷贝实现\n\n```js\nfunction deepClone(obj) {\n  // 函数的情况不考虑\n  function isObjValid(obj) {\n    const isObject = typeof obj === \"object\";\n    let isCircular = false;\n    try {\n      JSON.stringify(obj);\n    } catch (e) {\n      isCircular = false;\n    }\n    return isObject && !isCircular;\n  }\n  if (!isObjValid(obj)) {\n    throw new Error(\"非对象或者对象不可用(有循环引用)\");\n  }\n  for (let key in obj) {\n    result[key] = cloneVal(obj[key]);\n  }\n  return result;\n\n  function cloneVal(val) {\n    if (isArray(val) || isObject(val)) {\n      return deepClone(val);\n    }\n    return val;\n  }\n}\n```\n\n- 深拷贝可以通过 JSON.parse(JSON.stringify(obj)) , 但是这种情况循环引用会报错\n","source":"_posts/clone.md","raw":"---\ntitle: 深拷贝和浅拷贝\ntags: 拷贝\ncategories: javascript\n---\n\n1. 定义 - 浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。\n\n2. 实现\n\n- 浅拷贝实现\n\n```js\nconst isArray = (props) =>\n  Object.prototype.toString.call(props) === \"[object Array]\";\n\nconst isObject = (props) =>\n  Object.prototype.toString.call(props) === \"[object Object]\";\nlet result = isArray(obj) ? [] : {};\n\nfunction shallowCopy(obj) {\n  function shallowCopyArray(arr) {\n    // return arr.concat([])\n    // return arr.slice()\n    // return Array.from(arr)\n    // return [...arr]\n  }\n\n  function shallowCopyObject(obj) {\n    // return Object.assign({}, obj)\n    // return {...obj}\n  }\n  return isArray(obj) ? shallowCopyArray(obj) : shallowCopyObject(obj);\n}\n```\n\n- 深拷贝实现\n\n```js\nfunction deepClone(obj) {\n  // 函数的情况不考虑\n  function isObjValid(obj) {\n    const isObject = typeof obj === \"object\";\n    let isCircular = false;\n    try {\n      JSON.stringify(obj);\n    } catch (e) {\n      isCircular = false;\n    }\n    return isObject && !isCircular;\n  }\n  if (!isObjValid(obj)) {\n    throw new Error(\"非对象或者对象不可用(有循环引用)\");\n  }\n  for (let key in obj) {\n    result[key] = cloneVal(obj[key]);\n  }\n  return result;\n\n  function cloneVal(val) {\n    if (isArray(val) || isObject(val)) {\n      return deepClone(val);\n    }\n    return val;\n  }\n}\n```\n\n- 深拷贝可以通过 JSON.parse(JSON.stringify(obj)) , 但是这种情况循环引用会报错\n","slug":"clone","published":1,"date":"2021-08-21T05:22:51.795Z","updated":"2021-08-21T05:22:51.795Z","_id":"ckslbu2cv000zsq3qhzlv2iyy","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>定义 - 浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p>\n</li>\n<li><p>实现</p>\n</li>\n</ol>\n<ul>\n<li>浅拷贝实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isArray = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Object]&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopyArray</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return arr.concat([])</span></span><br><span class=\"line\">    <span class=\"comment\">// return arr.slice()</span></span><br><span class=\"line\">    <span class=\"comment\">// return Array.from(arr)</span></span><br><span class=\"line\">    <span class=\"comment\">// return [...arr]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopyObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return Object.assign(&#123;&#125;, obj)</span></span><br><span class=\"line\">    <span class=\"comment\">// return &#123;...obj&#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isArray(obj) ? shallowCopyArray(obj) : shallowCopyObject(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>深拷贝实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的情况不考虑</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObjValid</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isObject = <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCircular = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.stringify(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      isCircular = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isObject &amp;&amp; !isCircular;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObjValid(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;非对象或者对象不可用(有循环引用)&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    result[key] = cloneVal(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneVal</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isArray(val) || isObject(val)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> deepClone(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>深拷贝可以通过 JSON.parse(JSON.stringify(obj)) , 但是这种情况循环引用会报错</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>定义 - 浅拷贝只复制指向某个对象的指针，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会改到原对象。</p>\n</li>\n<li><p>实现</p>\n</li>\n</ol>\n<ul>\n<li>浅拷贝实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isArray = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> isObject = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span></span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Object]&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = isArray(obj) ? [] : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopyArray</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return arr.concat([])</span></span><br><span class=\"line\">    <span class=\"comment\">// return arr.slice()</span></span><br><span class=\"line\">    <span class=\"comment\">// return Array.from(arr)</span></span><br><span class=\"line\">    <span class=\"comment\">// return [...arr]</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">shallowCopyObject</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// return Object.assign(&#123;&#125;, obj)</span></span><br><span class=\"line\">    <span class=\"comment\">// return &#123;...obj&#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isArray(obj) ? shallowCopyArray(obj) : shallowCopyObject(obj);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>深拷贝实现</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的情况不考虑</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isObjValid</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isObject = <span class=\"keyword\">typeof</span> obj === <span class=\"string\">&quot;object&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> isCircular = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.stringify(obj);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      isCircular = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isObject &amp;&amp; !isCircular;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isObjValid(obj)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;非对象或者对象不可用(有循环引用)&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    result[key] = cloneVal(obj[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cloneVal</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isArray(val) || isObject(val)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> deepClone(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>深拷贝可以通过 JSON.parse(JSON.stringify(obj)) , 但是这种情况循环引用会报错</li>\n</ul>\n"},{"title":"JS 事件循环","_content":"\n概述： JavaScript 有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务\n\n## 概念\n\n1. 栈： 函数调用形成了一个由若干帧组成的栈(先进后出)\n\n- 执行栈: 同步代码的执行，按照顺序添加到执行栈中\n\n```javascript\nfunction sampleInner(a) {\n  let b = 10;\n  return a + b;\n}\nfunction sampleOuter(m) {\n  let n = 3;\n  // step 2\n  // 第二个帧被创建并被压入栈中, 放在第一个帧之上\n  // 帧中包含 sampleInner 的参数 a 和局部变量 b\n  return sampleInner(m + n);\n  // step 3\n  // sampleInner 执行完毕然后返回\n  // 第二个帧就被弹出栈（剩下 sampleOuter 函数的调用帧 ）\n}\n\n// step 1\n// 第一个帧被创建并压入栈中\n// 帧中包含了 sampleOuter 的参数 m 和局部变量 n\nsampleOuter(12);\n// step 4\n// 当 sampleOuter 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了\n```\n\n2. 堆： 对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语。\n\n3. 队列：\n\n- 一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数。\n- 在 [**事件循环**](#js-事件循环) 期间的某个时刻，运行时会从最先进入队列的消息开始处理队列中的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。 (先进先出)\n- 函数的处理会一直进行到执行栈再次为空为止；然后事件循环将会处理队列中的下一个消息（如果还有的话）。\n\n## 特性/执行过程\n\n- 检查调用栈是否为空，以及确定把哪个 task 加入调用栈的这个过程就是事件循环\n- 浏览器至少有一个事件循环，一个事件循环至少有一个任务队列（macrotask），每个外任务都有自己的分组，浏览器会为不同的任务组设置优先级\n\n```javascript\n// 同步等待\nwhile (isReady()) {\n  // 完成后处理， 然后循环到isReady\n  execute();\n}\n```\n\n### 特征 1 **执行至完成**\n\n- 既当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码。 如果消息需处理时间过长，可能造成阻塞，\n\n### 特征 2 **添加消息**\n\n- 在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失。所以当一个带有点击事件处理器的元素被点击时，就会像其他事件一样产生一个类似的消息。\n- setTimeout 的第二个参数表示最少延迟时间， 在队列之前的消息未处理完成时，setTimeout 并不会在计时器到期之后直接执行\n\n```javascript\nfunction getSeconds() {\n  return new Date().getSeconds();\n}\n\nfunction consoleWidthDelay(time, originSeconds) {\n  setTimeout(() => {\n    // step3\n    // setTimeout 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少延迟时间\n    console.log(\"等待了\" + (getSeconds() - originSeconds) + \"s\");\n  }, time);\n}\n\nfunction addMessageSample() {\n  const originSeconds = getSeconds();\n  const LOOP_TIME = 2;\n  // step1\n  consoleWidthDelay(500, originSeconds);\n  // step2\n  while (true) {\n    if (getSeconds() - originSeconds >= LOOP_TIME) {\n      console.log(\"循环\" + LOOP_TIME.toString() + \"s\");\n      break;\n    }\n  }\n}\n\naddMessageSample();\n```\n\n### 特征 3 **零延迟**\n\n零延迟并不意味着回调会立即执行， 其等待的时间取决于队列里**待处理消息的处理时间**\n\n## 宏任务和微任务\n\n- 页面渲染事件，各种 IO 的完成事件等随时被添加到任务队列中，一直会保持先进先出的原则执行，我们不能准确地控制这些事件被添加到任务队列中的位置。但是这个时候突然有高优先级的任务需要尽快执行，那么一种类型的任务就不合适了，所以引入了微任务队列。\n\n- 宏任务：\n\n1. script(整体代码)\n2. setTimeout()\n3. setInterval()\n4. postMessage\n5. I/O\n6. UI 交互事件\n7. setImmediate(nodejs)\n8. ...\n\n- 微任务：\n\n1. new Promise().then(回调)\n2. MutationObserver(html5 新特性)\n3. process.nextTick(nodejs)\n4. Object.observe\n5. ...\n\n- 机制\n\n```javascript\nfunction microTask(count) {\n  return (\n    Promise.resolve()\n      // 微任务\n      .then(function () {\n        console.log(\"microTask\" + count);\n      })\n      // 微任务\n      .then(function () {\n        console.log(\"microTask-next\" + count);\n      })\n  );\n}\n\nfunction macroTask() {\n  // 宏任务\n  setTimeout(() => {\n    console.log(\"macroTask-执行\");\n  });\n}\n\nfunction mainTask() {\n  console.log(\"开始\");\n  microTask(1);\n  macroTask();\n  microTask(2);\n  macroTask();\n  console.log(\"结束\");\n}\n// 输出\n// 开始\n// 结束\n// microTask1\n// microTask2\n// microTask-next1\n// microTask-next2\n// macroTask\n```\n\n```js\n// 接上面， 修改macrotask\nfunction macroTask(count) {\n  setTimeout(() => {\n    console.log(\"macroTask-\" + count + \"-执行\");\n    microTask(count);\n  });\n}\n\nfunction mainTask() {\n  macroTask(1);\n  macroTask(2);\n}\n\nmainTask();\n// 输出\n// macroTask-1-执行\n// microTask1\n// microTask-next1\n// macroTask-2-执行\n// microTask2\n// microTask-next2\n```\n\n- 一个完整的事件循环\n\n1. **检查** macrotask 队列是否为空，非空则到 2，为空则到 3\n2. **执行** macrotask 中的一个任务\n3. **(继续)检查** microtask 队列是否为空，非空则到 4，否则到 5\n4. 取出 microtask 中的任务**执行**，执行完成返回到步骤 3\n5. 执行视图更新\n\n### 视图渲染(update rendering)时间\n\n- 视图渲染发生在本轮事件循环的 microtask 队列被执行完之后，也就是说执行任务的耗时会影响视图渲染的时机。通常浏览器以每秒 60 帧（60fps）的速率刷新页面，据说这个帧率最适合人眼交互，大概 16.7ms 渲染一帧，所以如果要让用户觉得顺畅，单个 [macrotask](#宏任务和微任务) 及它相关的所有 [microtask](#宏任务和微任务) 最好能在 16.7ms 内完成。\n- 浏览器同时有自己的优化策略，例如把几次的视图更新累积到一起重绘，重绘之前会通知 requestAnimationFrame 执行回调函数，也就是说 requestAnimationFrame 回调的执行时机是在一次或多次事件循环的 UI render 阶段。\n\n```javascript\nfunction microTask(count) {\n  return new Promise(function (resolve) {\n    console.log(\"microTask\" + count + \" top\");\n    resolve();\n    console.log(\"microTask\" + count + \" middle\");\n  }).then(function () {\n    console.log(\"microTask\" + count + \" bottom\");\n  });\n}\n\nfunction animationFrame() {\n  requestAnimationFrame(function () {\n    console.log(\"requestAnimationFrame\");\n  });\n}\nfunction macroTask(count) {\n  setTimeout(function () {\n    console.log(\"macroTask\" + count);\n  }, 0);\n}\n\nfunction mainTask() {\n  macroTask(1);\n  animationFrame();\n  microTask(1);\n  macroTask(2);\n  document.body.setAttribute(\"style\", \"color: #eee\");\n  console.log(\"task-end\");\n}\n```\n\n### 总结\n\n1. 事件循环是 js 实现异步的核心\n2. 每轮事件循环分为 3 个步骤：\n   a) 执行 macrotask 队列的一个任务\n   b) 执行完当前 microtask 队列的所有任务\n   c) UI render\n\n3. 浏览器只保证 requestAnimationFrame 的回调在重绘之前执行，没有确定的时间，何时重绘由浏览器决定\n","source":"_posts/eventLoop.md","raw":"---\ntitle: JS 事件循环\ntags: 事件循环\ncategories: javascript\n---\n\n概述： JavaScript 有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务\n\n## 概念\n\n1. 栈： 函数调用形成了一个由若干帧组成的栈(先进后出)\n\n- 执行栈: 同步代码的执行，按照顺序添加到执行栈中\n\n```javascript\nfunction sampleInner(a) {\n  let b = 10;\n  return a + b;\n}\nfunction sampleOuter(m) {\n  let n = 3;\n  // step 2\n  // 第二个帧被创建并被压入栈中, 放在第一个帧之上\n  // 帧中包含 sampleInner 的参数 a 和局部变量 b\n  return sampleInner(m + n);\n  // step 3\n  // sampleInner 执行完毕然后返回\n  // 第二个帧就被弹出栈（剩下 sampleOuter 函数的调用帧 ）\n}\n\n// step 1\n// 第一个帧被创建并压入栈中\n// 帧中包含了 sampleOuter 的参数 m 和局部变量 n\nsampleOuter(12);\n// step 4\n// 当 sampleOuter 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了\n```\n\n2. 堆： 对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语。\n\n3. 队列：\n\n- 一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数。\n- 在 [**事件循环**](#js-事件循环) 期间的某个时刻，运行时会从最先进入队列的消息开始处理队列中的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。 (先进先出)\n- 函数的处理会一直进行到执行栈再次为空为止；然后事件循环将会处理队列中的下一个消息（如果还有的话）。\n\n## 特性/执行过程\n\n- 检查调用栈是否为空，以及确定把哪个 task 加入调用栈的这个过程就是事件循环\n- 浏览器至少有一个事件循环，一个事件循环至少有一个任务队列（macrotask），每个外任务都有自己的分组，浏览器会为不同的任务组设置优先级\n\n```javascript\n// 同步等待\nwhile (isReady()) {\n  // 完成后处理， 然后循环到isReady\n  execute();\n}\n```\n\n### 特征 1 **执行至完成**\n\n- 既当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码。 如果消息需处理时间过长，可能造成阻塞，\n\n### 特征 2 **添加消息**\n\n- 在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失。所以当一个带有点击事件处理器的元素被点击时，就会像其他事件一样产生一个类似的消息。\n- setTimeout 的第二个参数表示最少延迟时间， 在队列之前的消息未处理完成时，setTimeout 并不会在计时器到期之后直接执行\n\n```javascript\nfunction getSeconds() {\n  return new Date().getSeconds();\n}\n\nfunction consoleWidthDelay(time, originSeconds) {\n  setTimeout(() => {\n    // step3\n    // setTimeout 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少延迟时间\n    console.log(\"等待了\" + (getSeconds() - originSeconds) + \"s\");\n  }, time);\n}\n\nfunction addMessageSample() {\n  const originSeconds = getSeconds();\n  const LOOP_TIME = 2;\n  // step1\n  consoleWidthDelay(500, originSeconds);\n  // step2\n  while (true) {\n    if (getSeconds() - originSeconds >= LOOP_TIME) {\n      console.log(\"循环\" + LOOP_TIME.toString() + \"s\");\n      break;\n    }\n  }\n}\n\naddMessageSample();\n```\n\n### 特征 3 **零延迟**\n\n零延迟并不意味着回调会立即执行， 其等待的时间取决于队列里**待处理消息的处理时间**\n\n## 宏任务和微任务\n\n- 页面渲染事件，各种 IO 的完成事件等随时被添加到任务队列中，一直会保持先进先出的原则执行，我们不能准确地控制这些事件被添加到任务队列中的位置。但是这个时候突然有高优先级的任务需要尽快执行，那么一种类型的任务就不合适了，所以引入了微任务队列。\n\n- 宏任务：\n\n1. script(整体代码)\n2. setTimeout()\n3. setInterval()\n4. postMessage\n5. I/O\n6. UI 交互事件\n7. setImmediate(nodejs)\n8. ...\n\n- 微任务：\n\n1. new Promise().then(回调)\n2. MutationObserver(html5 新特性)\n3. process.nextTick(nodejs)\n4. Object.observe\n5. ...\n\n- 机制\n\n```javascript\nfunction microTask(count) {\n  return (\n    Promise.resolve()\n      // 微任务\n      .then(function () {\n        console.log(\"microTask\" + count);\n      })\n      // 微任务\n      .then(function () {\n        console.log(\"microTask-next\" + count);\n      })\n  );\n}\n\nfunction macroTask() {\n  // 宏任务\n  setTimeout(() => {\n    console.log(\"macroTask-执行\");\n  });\n}\n\nfunction mainTask() {\n  console.log(\"开始\");\n  microTask(1);\n  macroTask();\n  microTask(2);\n  macroTask();\n  console.log(\"结束\");\n}\n// 输出\n// 开始\n// 结束\n// microTask1\n// microTask2\n// microTask-next1\n// microTask-next2\n// macroTask\n```\n\n```js\n// 接上面， 修改macrotask\nfunction macroTask(count) {\n  setTimeout(() => {\n    console.log(\"macroTask-\" + count + \"-执行\");\n    microTask(count);\n  });\n}\n\nfunction mainTask() {\n  macroTask(1);\n  macroTask(2);\n}\n\nmainTask();\n// 输出\n// macroTask-1-执行\n// microTask1\n// microTask-next1\n// macroTask-2-执行\n// microTask2\n// microTask-next2\n```\n\n- 一个完整的事件循环\n\n1. **检查** macrotask 队列是否为空，非空则到 2，为空则到 3\n2. **执行** macrotask 中的一个任务\n3. **(继续)检查** microtask 队列是否为空，非空则到 4，否则到 5\n4. 取出 microtask 中的任务**执行**，执行完成返回到步骤 3\n5. 执行视图更新\n\n### 视图渲染(update rendering)时间\n\n- 视图渲染发生在本轮事件循环的 microtask 队列被执行完之后，也就是说执行任务的耗时会影响视图渲染的时机。通常浏览器以每秒 60 帧（60fps）的速率刷新页面，据说这个帧率最适合人眼交互，大概 16.7ms 渲染一帧，所以如果要让用户觉得顺畅，单个 [macrotask](#宏任务和微任务) 及它相关的所有 [microtask](#宏任务和微任务) 最好能在 16.7ms 内完成。\n- 浏览器同时有自己的优化策略，例如把几次的视图更新累积到一起重绘，重绘之前会通知 requestAnimationFrame 执行回调函数，也就是说 requestAnimationFrame 回调的执行时机是在一次或多次事件循环的 UI render 阶段。\n\n```javascript\nfunction microTask(count) {\n  return new Promise(function (resolve) {\n    console.log(\"microTask\" + count + \" top\");\n    resolve();\n    console.log(\"microTask\" + count + \" middle\");\n  }).then(function () {\n    console.log(\"microTask\" + count + \" bottom\");\n  });\n}\n\nfunction animationFrame() {\n  requestAnimationFrame(function () {\n    console.log(\"requestAnimationFrame\");\n  });\n}\nfunction macroTask(count) {\n  setTimeout(function () {\n    console.log(\"macroTask\" + count);\n  }, 0);\n}\n\nfunction mainTask() {\n  macroTask(1);\n  animationFrame();\n  microTask(1);\n  macroTask(2);\n  document.body.setAttribute(\"style\", \"color: #eee\");\n  console.log(\"task-end\");\n}\n```\n\n### 总结\n\n1. 事件循环是 js 实现异步的核心\n2. 每轮事件循环分为 3 个步骤：\n   a) 执行 macrotask 队列的一个任务\n   b) 执行完当前 microtask 队列的所有任务\n   c) UI render\n\n3. 浏览器只保证 requestAnimationFrame 的回调在重绘之前执行，没有确定的时间，何时重绘由浏览器决定\n","slug":"eventLoop","published":1,"date":"2021-08-21T05:22:51.795Z","updated":"2021-08-21T05:22:51.796Z","_id":"ckslbu2cx0011sq3qfnypgh29","comments":1,"layout":"post","photos":[],"link":"","content":"<p>概述： JavaScript 有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ol>\n<li>栈： 函数调用形成了一个由若干帧组成的栈(先进后出)</li>\n</ol>\n<ul>\n<li>执行栈: 同步代码的执行，按照顺序添加到执行栈中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleInner</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleOuter</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// step 2</span></span><br><span class=\"line\">  <span class=\"comment\">// 第二个帧被创建并被压入栈中, 放在第一个帧之上</span></span><br><span class=\"line\">  <span class=\"comment\">// 帧中包含 sampleInner 的参数 a 和局部变量 b</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sampleInner(m + n);</span><br><span class=\"line\">  <span class=\"comment\">// step 3</span></span><br><span class=\"line\">  <span class=\"comment\">// sampleInner 执行完毕然后返回</span></span><br><span class=\"line\">  <span class=\"comment\">// 第二个帧就被弹出栈（剩下 sampleOuter 函数的调用帧 ）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// step 1</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个帧被创建并压入栈中</span></span><br><span class=\"line\"><span class=\"comment\">// 帧中包含了 sampleOuter 的参数 m 和局部变量 n</span></span><br><span class=\"line\">sampleOuter(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"comment\">// step 4</span></span><br><span class=\"line\"><span class=\"comment\">// 当 sampleOuter 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>堆： 对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语。</p>\n</li>\n<li><p>队列：</p>\n</li>\n</ol>\n<ul>\n<li>一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数。</li>\n<li>在 <a href=\"#js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\"><strong>事件循环</strong></a> 期间的某个时刻，运行时会从最先进入队列的消息开始处理队列中的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。 (先进先出)</li>\n<li>函数的处理会一直进行到执行栈再次为空为止；然后事件循环将会处理队列中的下一个消息（如果还有的话）。</li>\n</ul>\n<h2 id=\"特性-执行过程\"><a href=\"#特性-执行过程\" class=\"headerlink\" title=\"特性/执行过程\"></a>特性/执行过程</h2><ul>\n<li>检查调用栈是否为空，以及确定把哪个 task 加入调用栈的这个过程就是事件循环</li>\n<li>浏览器至少有一个事件循环，一个事件循环至少有一个任务队列（macrotask），每个外任务都有自己的分组，浏览器会为不同的任务组设置优先级</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步等待</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (isReady()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 完成后处理， 然后循环到isReady</span></span><br><span class=\"line\">  execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特征-1-执行至完成\"><a href=\"#特征-1-执行至完成\" class=\"headerlink\" title=\"特征 1 执行至完成\"></a>特征 1 <strong>执行至完成</strong></h3><ul>\n<li>既当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码。 如果消息需处理时间过长，可能造成阻塞，</li>\n</ul>\n<h3 id=\"特征-2-添加消息\"><a href=\"#特征-2-添加消息\" class=\"headerlink\" title=\"特征 2 添加消息\"></a>特征 2 <strong>添加消息</strong></h3><ul>\n<li>在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失。所以当一个带有点击事件处理器的元素被点击时，就会像其他事件一样产生一个类似的消息。</li>\n<li>setTimeout 的第二个参数表示最少延迟时间， 在队列之前的消息未处理完成时，setTimeout 并不会在计时器到期之后直接执行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSeconds</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getSeconds();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleWidthDelay</span>(<span class=\"params\">time, originSeconds</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// step3</span></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少延迟时间</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;等待了&quot;</span> + (getSeconds() - originSeconds) + <span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">  &#125;, time);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addMessageSample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originSeconds = getSeconds();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> LOOP_TIME = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// step1</span></span><br><span class=\"line\">  consoleWidthDelay(<span class=\"number\">500</span>, originSeconds);</span><br><span class=\"line\">  <span class=\"comment\">// step2</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getSeconds() - originSeconds &gt;= LOOP_TIME) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;循环&quot;</span> + LOOP_TIME.toString() + <span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addMessageSample();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特征-3-零延迟\"><a href=\"#特征-3-零延迟\" class=\"headerlink\" title=\"特征 3 零延迟\"></a>特征 3 <strong>零延迟</strong></h3><p>零延迟并不意味着回调会立即执行， 其等待的时间取决于队列里<strong>待处理消息的处理时间</strong></p>\n<h2 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h2><ul>\n<li><p>页面渲染事件，各种 IO 的完成事件等随时被添加到任务队列中，一直会保持先进先出的原则执行，我们不能准确地控制这些事件被添加到任务队列中的位置。但是这个时候突然有高优先级的任务需要尽快执行，那么一种类型的任务就不合适了，所以引入了微任务队列。</p>\n</li>\n<li><p>宏任务：</p>\n</li>\n</ul>\n<ol>\n<li>script(整体代码)</li>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n<li>postMessage</li>\n<li>I/O</li>\n<li>UI 交互事件</li>\n<li>setImmediate(nodejs)</li>\n<li>…</li>\n</ol>\n<ul>\n<li>微任务：</li>\n</ul>\n<ol>\n<li>new Promise().then(回调)</li>\n<li>MutationObserver(html5 新特性)</li>\n<li>process.nextTick(nodejs)</li>\n<li>Object.observe</li>\n<li>…</li>\n</ol>\n<ul>\n<li>机制</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">microTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">      <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask-next&quot;</span> + count);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">macroTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 宏任务</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;macroTask-执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;开始&quot;</span>);</span><br><span class=\"line\">  microTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  macroTask();</span><br><span class=\"line\">  microTask(<span class=\"number\">2</span>);</span><br><span class=\"line\">  macroTask();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;结束&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 开始</span></span><br><span class=\"line\"><span class=\"comment\">// 结束</span></span><br><span class=\"line\"><span class=\"comment\">// microTask1</span></span><br><span class=\"line\"><span class=\"comment\">// microTask2</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next1</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next2</span></span><br><span class=\"line\"><span class=\"comment\">// macroTask</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接上面， 修改macrotask</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">macroTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;macroTask-&quot;</span> + count + <span class=\"string\">&quot;-执行&quot;</span>);</span><br><span class=\"line\">    microTask(count);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  macroTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  macroTask(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mainTask();</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// macroTask-1-执行</span></span><br><span class=\"line\"><span class=\"comment\">// microTask1</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next1</span></span><br><span class=\"line\"><span class=\"comment\">// macroTask-2-执行</span></span><br><span class=\"line\"><span class=\"comment\">// microTask2</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一个完整的事件循环</li>\n</ul>\n<ol>\n<li><strong>检查</strong> macrotask 队列是否为空，非空则到 2，为空则到 3</li>\n<li><strong>执行</strong> macrotask 中的一个任务</li>\n<li><strong>(继续)检查</strong> microtask 队列是否为空，非空则到 4，否则到 5</li>\n<li>取出 microtask 中的任务<strong>执行</strong>，执行完成返回到步骤 3</li>\n<li>执行视图更新</li>\n</ol>\n<h3 id=\"视图渲染-update-rendering-时间\"><a href=\"#视图渲染-update-rendering-时间\" class=\"headerlink\" title=\"视图渲染(update rendering)时间\"></a>视图渲染(update rendering)时间</h3><ul>\n<li>视图渲染发生在本轮事件循环的 microtask 队列被执行完之后，也就是说执行任务的耗时会影响视图渲染的时机。通常浏览器以每秒 60 帧（60fps）的速率刷新页面，据说这个帧率最适合人眼交互，大概 16.7ms 渲染一帧，所以如果要让用户觉得顺畅，单个 <a href=\"#%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1\">macrotask</a> 及它相关的所有 <a href=\"#%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1\">microtask</a> 最好能在 16.7ms 内完成。</li>\n<li>浏览器同时有自己的优化策略，例如把几次的视图更新累积到一起重绘，重绘之前会通知 requestAnimationFrame 执行回调函数，也就是说 requestAnimationFrame 回调的执行时机是在一次或多次事件循环的 UI render 阶段。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">microTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count + <span class=\"string\">&quot; top&quot;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count + <span class=\"string\">&quot; middle&quot;</span>);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count + <span class=\"string\">&quot; bottom&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animationFrame</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;requestAnimationFrame&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">macroTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;macroTask&quot;</span> + count);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  macroTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  animationFrame();</span><br><span class=\"line\">  microTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  macroTask(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.setAttribute(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;color: #eee&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;task-end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li><p>事件循环是 js 实现异步的核心</p>\n</li>\n<li><p>每轮事件循环分为 3 个步骤：<br>a) 执行 macrotask 队列的一个任务<br>b) 执行完当前 microtask 队列的所有任务<br>c) UI render</p>\n</li>\n<li><p>浏览器只保证 requestAnimationFrame 的回调在重绘之前执行，没有确定的时间，何时重绘由浏览器决定</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>概述： JavaScript 有一个基于事件循环的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><ol>\n<li>栈： 函数调用形成了一个由若干帧组成的栈(先进后出)</li>\n</ol>\n<ul>\n<li>执行栈: 同步代码的执行，按照顺序添加到执行栈中</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleInner</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sampleOuter</span>(<span class=\"params\">m</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> n = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"comment\">// step 2</span></span><br><span class=\"line\">  <span class=\"comment\">// 第二个帧被创建并被压入栈中, 放在第一个帧之上</span></span><br><span class=\"line\">  <span class=\"comment\">// 帧中包含 sampleInner 的参数 a 和局部变量 b</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sampleInner(m + n);</span><br><span class=\"line\">  <span class=\"comment\">// step 3</span></span><br><span class=\"line\">  <span class=\"comment\">// sampleInner 执行完毕然后返回</span></span><br><span class=\"line\">  <span class=\"comment\">// 第二个帧就被弹出栈（剩下 sampleOuter 函数的调用帧 ）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// step 1</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个帧被创建并压入栈中</span></span><br><span class=\"line\"><span class=\"comment\">// 帧中包含了 sampleOuter 的参数 m 和局部变量 n</span></span><br><span class=\"line\">sampleOuter(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"comment\">// step 4</span></span><br><span class=\"line\"><span class=\"comment\">// 当 sampleOuter 也执行完毕然后返回时，第一个帧也被弹出，栈就被清空了</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>堆： 对象被分配在堆中，堆是一个用来表示一大块（通常是非结构化的）内存区域的计算机术语。</p>\n</li>\n<li><p>队列：</p>\n</li>\n</ol>\n<ul>\n<li>一个 JavaScript 运行时包含了一个待处理消息的消息队列。每一个消息都关联着一个用以处理这个消息的回调函数。</li>\n<li>在 <a href=\"#js-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\"><strong>事件循环</strong></a> 期间的某个时刻，运行时会从最先进入队列的消息开始处理队列中的消息。被处理的消息会被移出队列，并作为输入参数来调用与之关联的函数。正如前面所提到的，调用一个函数总是会为其创造一个新的栈帧。 (先进先出)</li>\n<li>函数的处理会一直进行到执行栈再次为空为止；然后事件循环将会处理队列中的下一个消息（如果还有的话）。</li>\n</ul>\n<h2 id=\"特性-执行过程\"><a href=\"#特性-执行过程\" class=\"headerlink\" title=\"特性/执行过程\"></a>特性/执行过程</h2><ul>\n<li>检查调用栈是否为空，以及确定把哪个 task 加入调用栈的这个过程就是事件循环</li>\n<li>浏览器至少有一个事件循环，一个事件循环至少有一个任务队列（macrotask），每个外任务都有自己的分组，浏览器会为不同的任务组设置优先级</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 同步等待</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (isReady()) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 完成后处理， 然后循环到isReady</span></span><br><span class=\"line\">  execute();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特征-1-执行至完成\"><a href=\"#特征-1-执行至完成\" class=\"headerlink\" title=\"特征 1 执行至完成\"></a>特征 1 <strong>执行至完成</strong></h3><ul>\n<li>既当一个函数执行时，它不会被抢占，只有在它运行完毕之后才会去运行任何其他的代码。 如果消息需处理时间过长，可能造成阻塞，</li>\n</ul>\n<h3 id=\"特征-2-添加消息\"><a href=\"#特征-2-添加消息\" class=\"headerlink\" title=\"特征 2 添加消息\"></a>特征 2 <strong>添加消息</strong></h3><ul>\n<li>在浏览器里，每当一个事件发生并且有一个事件监听器绑定在该事件上时，一个消息就会被添加进消息队列。如果没有事件监听器，这个事件将会丢失。所以当一个带有点击事件处理器的元素被点击时，就会像其他事件一样产生一个类似的消息。</li>\n<li>setTimeout 的第二个参数表示最少延迟时间， 在队列之前的消息未处理完成时，setTimeout 并不会在计时器到期之后直接执行</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSeconds</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getSeconds();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">consoleWidthDelay</span>(<span class=\"params\">time, originSeconds</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// step3</span></span><br><span class=\"line\">    <span class=\"comment\">// setTimeout 消息必须等待其它消息处理完。因此第二个参数仅仅表示最少延迟时间</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;等待了&quot;</span> + (getSeconds() - originSeconds) + <span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">  &#125;, time);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addMessageSample</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> originSeconds = getSeconds();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> LOOP_TIME = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"comment\">// step1</span></span><br><span class=\"line\">  consoleWidthDelay(<span class=\"number\">500</span>, originSeconds);</span><br><span class=\"line\">  <span class=\"comment\">// step2</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getSeconds() - originSeconds &gt;= LOOP_TIME) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;循环&quot;</span> + LOOP_TIME.toString() + <span class=\"string\">&quot;s&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">addMessageSample();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特征-3-零延迟\"><a href=\"#特征-3-零延迟\" class=\"headerlink\" title=\"特征 3 零延迟\"></a>特征 3 <strong>零延迟</strong></h3><p>零延迟并不意味着回调会立即执行， 其等待的时间取决于队列里<strong>待处理消息的处理时间</strong></p>\n<h2 id=\"宏任务和微任务\"><a href=\"#宏任务和微任务\" class=\"headerlink\" title=\"宏任务和微任务\"></a>宏任务和微任务</h2><ul>\n<li><p>页面渲染事件，各种 IO 的完成事件等随时被添加到任务队列中，一直会保持先进先出的原则执行，我们不能准确地控制这些事件被添加到任务队列中的位置。但是这个时候突然有高优先级的任务需要尽快执行，那么一种类型的任务就不合适了，所以引入了微任务队列。</p>\n</li>\n<li><p>宏任务：</p>\n</li>\n</ul>\n<ol>\n<li>script(整体代码)</li>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n<li>postMessage</li>\n<li>I/O</li>\n<li>UI 交互事件</li>\n<li>setImmediate(nodejs)</li>\n<li>…</li>\n</ol>\n<ul>\n<li>微任务：</li>\n</ul>\n<ol>\n<li>new Promise().then(回调)</li>\n<li>MutationObserver(html5 新特性)</li>\n<li>process.nextTick(nodejs)</li>\n<li>Object.observe</li>\n<li>…</li>\n</ol>\n<ul>\n<li>机制</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">microTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"built_in\">Promise</span>.resolve()</span><br><span class=\"line\">      <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 微任务</span></span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask-next&quot;</span> + count);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">macroTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 宏任务</span></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;macroTask-执行&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;开始&quot;</span>);</span><br><span class=\"line\">  microTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  macroTask();</span><br><span class=\"line\">  microTask(<span class=\"number\">2</span>);</span><br><span class=\"line\">  macroTask();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;结束&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// 开始</span></span><br><span class=\"line\"><span class=\"comment\">// 结束</span></span><br><span class=\"line\"><span class=\"comment\">// microTask1</span></span><br><span class=\"line\"><span class=\"comment\">// microTask2</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next1</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next2</span></span><br><span class=\"line\"><span class=\"comment\">// macroTask</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接上面， 修改macrotask</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">macroTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;macroTask-&quot;</span> + count + <span class=\"string\">&quot;-执行&quot;</span>);</span><br><span class=\"line\">    microTask(count);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  macroTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  macroTask(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">mainTask();</span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// macroTask-1-执行</span></span><br><span class=\"line\"><span class=\"comment\">// microTask1</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next1</span></span><br><span class=\"line\"><span class=\"comment\">// macroTask-2-执行</span></span><br><span class=\"line\"><span class=\"comment\">// microTask2</span></span><br><span class=\"line\"><span class=\"comment\">// microTask-next2</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>一个完整的事件循环</li>\n</ul>\n<ol>\n<li><strong>检查</strong> macrotask 队列是否为空，非空则到 2，为空则到 3</li>\n<li><strong>执行</strong> macrotask 中的一个任务</li>\n<li><strong>(继续)检查</strong> microtask 队列是否为空，非空则到 4，否则到 5</li>\n<li>取出 microtask 中的任务<strong>执行</strong>，执行完成返回到步骤 3</li>\n<li>执行视图更新</li>\n</ol>\n<h3 id=\"视图渲染-update-rendering-时间\"><a href=\"#视图渲染-update-rendering-时间\" class=\"headerlink\" title=\"视图渲染(update rendering)时间\"></a>视图渲染(update rendering)时间</h3><ul>\n<li>视图渲染发生在本轮事件循环的 microtask 队列被执行完之后，也就是说执行任务的耗时会影响视图渲染的时机。通常浏览器以每秒 60 帧（60fps）的速率刷新页面，据说这个帧率最适合人眼交互，大概 16.7ms 渲染一帧，所以如果要让用户觉得顺畅，单个 <a href=\"#%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1\">macrotask</a> 及它相关的所有 <a href=\"#%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1\">microtask</a> 最好能在 16.7ms 内完成。</li>\n<li>浏览器同时有自己的优化策略，例如把几次的视图更新累积到一起重绘，重绘之前会通知 requestAnimationFrame 执行回调函数，也就是说 requestAnimationFrame 回调的执行时机是在一次或多次事件循环的 UI render 阶段。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">microTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count + <span class=\"string\">&quot; top&quot;</span>);</span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count + <span class=\"string\">&quot; middle&quot;</span>);</span><br><span class=\"line\">  &#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;microTask&quot;</span> + count + <span class=\"string\">&quot; bottom&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animationFrame</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  requestAnimationFrame(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;requestAnimationFrame&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">macroTask</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;macroTask&quot;</span> + count);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mainTask</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  macroTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  animationFrame();</span><br><span class=\"line\">  microTask(<span class=\"number\">1</span>);</span><br><span class=\"line\">  macroTask(<span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.setAttribute(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;color: #eee&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;task-end&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li><p>事件循环是 js 实现异步的核心</p>\n</li>\n<li><p>每轮事件循环分为 3 个步骤：<br>a) 执行 macrotask 队列的一个任务<br>b) 执行完当前 microtask 队列的所有任务<br>c) UI render</p>\n</li>\n<li><p>浏览器只保证 requestAnimationFrame 的回调在重绘之前执行，没有确定的时间，何时重绘由浏览器决定</p>\n</li>\n</ol>\n"},{"title":"Node 中的事件循环","_content":"\n<!--\n  name: Node 中的事件循环\n  description: 相比于浏览器中的事件循环，node 环境中的有什么差别？\n-->\n\n相比于浏览器中的事件循环，node 环境中的有什么差别？\n\n### 对比浏览器中的事件循环\n\n```js\n// http://lynnelv.github.io/js-event-loop-nodejs\n```\n","source":"_posts/eventLoopInNode.md","raw":"---\ntitle: Node 中的事件循环\ncategories: node\ntags: 事件循环\n---\n\n<!--\n  name: Node 中的事件循环\n  description: 相比于浏览器中的事件循环，node 环境中的有什么差别？\n-->\n\n相比于浏览器中的事件循环，node 环境中的有什么差别？\n\n### 对比浏览器中的事件循环\n\n```js\n// http://lynnelv.github.io/js-event-loop-nodejs\n```\n","slug":"eventLoopInNode","published":1,"date":"2021-08-21T05:22:51.796Z","updated":"2021-08-21T05:22:51.796Z","_id":"ckslbu2cy0013sq3qfyot5my6","comments":1,"layout":"post","photos":[],"link":"","content":"<!--\n  name: Node 中的事件循环\n  description: 相比于浏览器中的事件循环，node 环境中的有什么差别？\n-->\n\n<p>相比于浏览器中的事件循环，node 环境中的有什么差别？</p>\n<h3 id=\"对比浏览器中的事件循环\"><a href=\"#对比浏览器中的事件循环\" class=\"headerlink\" title=\"对比浏览器中的事件循环\"></a>对比浏览器中的事件循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://lynnelv.github.io/js-event-loop-nodejs</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!--\n  name: Node 中的事件循环\n  description: 相比于浏览器中的事件循环，node 环境中的有什么差别？\n-->\n\n<p>相比于浏览器中的事件循环，node 环境中的有什么差别？</p>\n<h3 id=\"对比浏览器中的事件循环\"><a href=\"#对比浏览器中的事件循环\" class=\"headerlink\" title=\"对比浏览器中的事件循环\"></a>对比浏览器中的事件循环</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://lynnelv.github.io/js-event-loop-nodejs</span></span><br></pre></td></tr></table></figure>\n"},{"title":"利用 github actions 进行自动部署","_content":"\n<!--\n  name: 利用github actions进行自动部署\n  description: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n-->\n\n概述： GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n\n## 使用步骤\n\n1. 创建项目/使用已有的 github 项目\n2. 找到 action tap， 选择 new workflow\n\n3. 选择一个需要创建的 workflow 类型(这里我直接使用的 Deno， 如果只需要使用 webpack 也可以选择 webpack)\n\n4. 然后他会给你一个模板\n\n```yml\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\n# This workflow will install Deno then run Deno lint and test.\n# For more information see: https://github.com/denoland/setup-deno\n\nname: Deno\n\non:\n  #  action 执行时间\n  # 推送后执行 [分支名]\n  push:\n    branches: [master]\n  # 拉取后执行 [分支名]\n  pull_request:\n    branches: [master]\n\njobs:\n  test:\n    # 运行系统\n    runs-on: ubuntu-latest\n    # 执行步骤\n    steps:\n      # 步骤名称\n      - name: Setup repo\n        # 步骤内容\n        uses: actions/checkout@v2\n\n      - name: Setup Deno\n        # uses: denoland/setup-deno@v1\n        uses: denoland/setup-deno@004814556e37c54a2f6e31384c9e18e9833173669\n        with:\n          deno-version: v1.x\n\n      # Uncomment this step to verify the use of 'deno fmt' on each commit.\n      # - name: Verify formatting\n      #   run: deno fmt --check\n\n      - name: Run linter\n        run: deno lint\n\n      - name: Run tests\n        run: deno test -A --unstable\n```\n\n5. 根据自己的情况,增加或修改 action 的步骤即可, 我这边增加了一个 node 版本的选择+安装依赖+打包 3 个步骤\n\n```yaml\n - name: Use Node.js ${{ matrix.node-version }}\n    uses: actions/setup-node@v1\n\n  - name: Install dependencies\n    run: npm install\n\n  - name: build package\n    run: make default\n```\n\n6. 提交 pr， 然后查看 action 是否生效\n","source":"_posts/githubActions.md","raw":"---\ntitle: 利用 github actions 进行自动部署\ncategories: git\ntags: 自动部署 Actions\n---\n\n<!--\n  name: 利用github actions进行自动部署\n  description: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n-->\n\n概述： GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n\n## 使用步骤\n\n1. 创建项目/使用已有的 github 项目\n2. 找到 action tap， 选择 new workflow\n\n3. 选择一个需要创建的 workflow 类型(这里我直接使用的 Deno， 如果只需要使用 webpack 也可以选择 webpack)\n\n4. 然后他会给你一个模板\n\n```yml\n# This workflow uses actions that are not certified by GitHub.\n# They are provided by a third-party and are governed by\n# separate terms of service, privacy policy, and support\n# documentation.\n\n# This workflow will install Deno then run Deno lint and test.\n# For more information see: https://github.com/denoland/setup-deno\n\nname: Deno\n\non:\n  #  action 执行时间\n  # 推送后执行 [分支名]\n  push:\n    branches: [master]\n  # 拉取后执行 [分支名]\n  pull_request:\n    branches: [master]\n\njobs:\n  test:\n    # 运行系统\n    runs-on: ubuntu-latest\n    # 执行步骤\n    steps:\n      # 步骤名称\n      - name: Setup repo\n        # 步骤内容\n        uses: actions/checkout@v2\n\n      - name: Setup Deno\n        # uses: denoland/setup-deno@v1\n        uses: denoland/setup-deno@004814556e37c54a2f6e31384c9e18e9833173669\n        with:\n          deno-version: v1.x\n\n      # Uncomment this step to verify the use of 'deno fmt' on each commit.\n      # - name: Verify formatting\n      #   run: deno fmt --check\n\n      - name: Run linter\n        run: deno lint\n\n      - name: Run tests\n        run: deno test -A --unstable\n```\n\n5. 根据自己的情况,增加或修改 action 的步骤即可, 我这边增加了一个 node 版本的选择+安装依赖+打包 3 个步骤\n\n```yaml\n - name: Use Node.js ${{ matrix.node-version }}\n    uses: actions/setup-node@v1\n\n  - name: Install dependencies\n    run: npm install\n\n  - name: build package\n    run: make default\n```\n\n6. 提交 pr， 然后查看 action 是否生效\n","slug":"githubActions","published":1,"date":"2021-08-21T05:22:51.796Z","updated":"2021-08-21T05:22:51.796Z","_id":"ckslbu2cz0015sq3qb2jmc4kp","comments":1,"layout":"post","photos":[],"link":"","content":"<!--\n  name: 利用github actions进行自动部署\n  description: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n-->\n\n<p>概述： GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><ol>\n<li><p>创建项目/使用已有的 github 项目</p>\n</li>\n<li><p>找到 action tap， 选择 new workflow</p>\n</li>\n<li><p>选择一个需要创建的 workflow 类型(这里我直接使用的 Deno， 如果只需要使用 webpack 也可以选择 webpack)</p>\n</li>\n<li><p>然后他会给你一个模板</p>\n</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This workflow uses actions that are not certified by GitHub.</span></span><br><span class=\"line\"><span class=\"comment\"># They are provided by a third-party and are governed by</span></span><br><span class=\"line\"><span class=\"comment\"># separate terms of service, privacy policy, and support</span></span><br><span class=\"line\"><span class=\"comment\"># documentation.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This workflow will install Deno then run Deno lint and test.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information see: https://github.com/denoland/setup-deno</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deno</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"comment\">#  action 执行时间</span></span><br><span class=\"line\">  <span class=\"comment\"># 推送后执行 [分支名]</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">  <span class=\"comment\"># 拉取后执行 [分支名]</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">test:</span></span><br><span class=\"line\">    <span class=\"comment\"># 运行系统</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行步骤</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 步骤名称</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">repo</span></span><br><span class=\"line\">        <span class=\"comment\"># 步骤内容</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Deno</span></span><br><span class=\"line\">        <span class=\"comment\"># uses: denoland/setup-deno@v1</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">denoland/setup-deno@004814556e37c54a2f6e31384c9e18e9833173669</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">deno-version:</span> <span class=\"string\">v1.x</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Uncomment this step to verify the use of &#x27;deno fmt&#x27; on each commit.</span></span><br><span class=\"line\">      <span class=\"comment\"># - name: Verify formatting</span></span><br><span class=\"line\">      <span class=\"comment\">#   run: deno fmt --check</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">linter</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">deno</span> <span class=\"string\">lint</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">tests</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">deno</span> <span class=\"string\">test</span> <span class=\"string\">-A</span> <span class=\"string\">--unstable</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>根据自己的情况,增加或修改 action 的步骤即可, 我这边增加了一个 node 版本的选择+安装依赖+打包 3 个步骤</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.node-version</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">   <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">build</span> <span class=\"string\">package</span></span><br><span class=\"line\">   <span class=\"attr\">run:</span> <span class=\"string\">make</span> <span class=\"string\">default</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>提交 pr， 然后查看 action 是否生效</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<!--\n  name: 利用github actions进行自动部署\n  description: GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。\n-->\n\n<p>概述： GitHub Actions 帮助您自动完成软件开发周期内的任务。 GitHub Actions 是事件驱动的，意味着您可以在指定事件发生后运行一系列命令。 例如，每次有人为仓库创建拉取请求时，您都可以自动运行命令来执行软件测试脚本。</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><ol>\n<li><p>创建项目/使用已有的 github 项目</p>\n</li>\n<li><p>找到 action tap， 选择 new workflow</p>\n</li>\n<li><p>选择一个需要创建的 workflow 类型(这里我直接使用的 Deno， 如果只需要使用 webpack 也可以选择 webpack)</p>\n</li>\n<li><p>然后他会给你一个模板</p>\n</li>\n</ol>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This workflow uses actions that are not certified by GitHub.</span></span><br><span class=\"line\"><span class=\"comment\"># They are provided by a third-party and are governed by</span></span><br><span class=\"line\"><span class=\"comment\"># separate terms of service, privacy policy, and support</span></span><br><span class=\"line\"><span class=\"comment\"># documentation.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># This workflow will install Deno then run Deno lint and test.</span></span><br><span class=\"line\"><span class=\"comment\"># For more information see: https://github.com/denoland/setup-deno</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deno</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"comment\">#  action 执行时间</span></span><br><span class=\"line\">  <span class=\"comment\"># 推送后执行 [分支名]</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\">  <span class=\"comment\"># 拉取后执行 [分支名]</span></span><br><span class=\"line\">  <span class=\"attr\">pull_request:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> [<span class=\"string\">master</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">test:</span></span><br><span class=\"line\">    <span class=\"comment\"># 运行系统</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># 执行步骤</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"comment\"># 步骤名称</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">repo</span></span><br><span class=\"line\">        <span class=\"comment\"># 步骤内容</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Deno</span></span><br><span class=\"line\">        <span class=\"comment\"># uses: denoland/setup-deno@v1</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">denoland/setup-deno@004814556e37c54a2f6e31384c9e18e9833173669</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">deno-version:</span> <span class=\"string\">v1.x</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\"># Uncomment this step to verify the use of &#x27;deno fmt&#x27; on each commit.</span></span><br><span class=\"line\">      <span class=\"comment\"># - name: Verify formatting</span></span><br><span class=\"line\">      <span class=\"comment\">#   run: deno fmt --check</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">linter</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">deno</span> <span class=\"string\">lint</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span> <span class=\"string\">tests</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">deno</span> <span class=\"string\">test</span> <span class=\"string\">-A</span> <span class=\"string\">--unstable</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>根据自己的情况,增加或修改 action 的步骤即可, 我这边增加了一个 node 版本的选择+安装依赖+打包 3 个步骤</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Use</span> <span class=\"string\">Node.js</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">matrix.node-version</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">   <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">dependencies</span></span><br><span class=\"line\">   <span class=\"attr\">run:</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">build</span> <span class=\"string\">package</span></span><br><span class=\"line\">   <span class=\"attr\">run:</span> <span class=\"string\">make</span> <span class=\"string\">default</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>提交 pr， 然后查看 action 是否生效</li>\n</ol>\n"},{"title":"利用 github issues 实现评论系统","_content":"\n<!--\n  name: 利用github issues实现评论系统\n  description: 利用github的issues作为数据库，构建一个评论系统\n-->\n\n## github issues\n\n- github 官网关于 issue 功能的介绍\n- Issues 是一种非常好的跟踪你项目中任务、改善和 bug 的方式。它们某种程度上类似于邮件，但是它们可以与团队中其他人分享和讨论。\n- 功能\n\n1. title 和 description：标题和描述\n2. labels：标签，用于分类\n3. milestone：时间点\n4. assignee：指定\n5. Comments：评论\n6. Notifications, @mentions, and References\n7. Notifications：消息提醒\n8. @mentions： 提到他人。github 建议使用/cc，即 carbon copy，概念抄送。\n9. References： 依赖的其他 issue、pr 等\n\n- 基于每个 issues 制作一条评论\n\n## 实现\n\n1. 创建 OAuth applications， 评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application\n","source":"_posts/githubComment.md","raw":"---\ntitle: 利用 github issues 实现评论系统\ncategories: git\ntags: 评论系统\n---\n\n<!--\n  name: 利用github issues实现评论系统\n  description: 利用github的issues作为数据库，构建一个评论系统\n-->\n\n## github issues\n\n- github 官网关于 issue 功能的介绍\n- Issues 是一种非常好的跟踪你项目中任务、改善和 bug 的方式。它们某种程度上类似于邮件，但是它们可以与团队中其他人分享和讨论。\n- 功能\n\n1. title 和 description：标题和描述\n2. labels：标签，用于分类\n3. milestone：时间点\n4. assignee：指定\n5. Comments：评论\n6. Notifications, @mentions, and References\n7. Notifications：消息提醒\n8. @mentions： 提到他人。github 建议使用/cc，即 carbon copy，概念抄送。\n9. References： 依赖的其他 issue、pr 等\n\n- 基于每个 issues 制作一条评论\n\n## 实现\n\n1. 创建 OAuth applications， 评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application\n","slug":"githubComment","published":1,"date":"2021-08-21T05:22:51.796Z","updated":"2021-08-21T05:22:51.797Z","_id":"ckslbu2d00018sq3qa5e16j7v","comments":1,"layout":"post","photos":[],"link":"","content":"<!--\n  name: 利用github issues实现评论系统\n  description: 利用github的issues作为数据库，构建一个评论系统\n-->\n\n<h2 id=\"github-issues\"><a href=\"#github-issues\" class=\"headerlink\" title=\"github issues\"></a>github issues</h2><ul>\n<li>github 官网关于 issue 功能的介绍</li>\n<li>Issues 是一种非常好的跟踪你项目中任务、改善和 bug 的方式。它们某种程度上类似于邮件，但是它们可以与团队中其他人分享和讨论。</li>\n<li>功能</li>\n</ul>\n<ol>\n<li>title 和 description：标题和描述</li>\n<li>labels：标签，用于分类</li>\n<li>milestone：时间点</li>\n<li>assignee：指定</li>\n<li>Comments：评论</li>\n<li>Notifications, @mentions, and References</li>\n<li>Notifications：消息提醒</li>\n<li>@mentions： 提到他人。github 建议使用/cc，即 carbon copy，概念抄送。</li>\n<li>References： 依赖的其他 issue、pr 等</li>\n</ol>\n<ul>\n<li>基于每个 issues 制作一条评论</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ol>\n<li>创建 OAuth applications， 评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<!--\n  name: 利用github issues实现评论系统\n  description: 利用github的issues作为数据库，构建一个评论系统\n-->\n\n<h2 id=\"github-issues\"><a href=\"#github-issues\" class=\"headerlink\" title=\"github issues\"></a>github issues</h2><ul>\n<li>github 官网关于 issue 功能的介绍</li>\n<li>Issues 是一种非常好的跟踪你项目中任务、改善和 bug 的方式。它们某种程度上类似于邮件，但是它们可以与团队中其他人分享和讨论。</li>\n<li>功能</li>\n</ul>\n<ol>\n<li>title 和 description：标题和描述</li>\n<li>labels：标签，用于分类</li>\n<li>milestone：时间点</li>\n<li>assignee：指定</li>\n<li>Comments：评论</li>\n<li>Notifications, @mentions, and References</li>\n<li>Notifications：消息提醒</li>\n<li>@mentions： 提到他人。github 建议使用/cc，即 carbon copy，概念抄送。</li>\n<li>References： 依赖的其他 issue、pr 等</li>\n</ol>\n<ul>\n<li>基于每个 issues 制作一条评论</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ol>\n<li>创建 OAuth applications， 评论需要涉及 GitHub 授权登录，所以在这里你先要有一个 GitHub application</li>\n</ol>\n"},{"title":"url 后面的斜杠 /","_content":"\n<!--\n  name: url 后面的斜杠 /\n  description: 之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题\n-->\n\n之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题\n\n### 来源及区分\n\n- 末尾斜杠是放在 URL 末尾的正斜杠 “/”，例如 domain.com/ 或者 domain.com/page/。 末末尾斜杠通常用于区分目录和文件。然而，这些只是建议，而不是要求。\n- 在过去，文件夹会有一个末尾斜杠，而文件不会有末尾斜杠。一个文件夹将表明有更多的文件，你通常会有一个索引文件 (index.html, index.php 等）页面内容将从中加载。因此，内容将来自 domain.com/page/index.html 但是 展示给用户看的却是 domain.com/page/ 。对于单个文件，文件名和末尾都没有斜杠。\n- 现在，大多数系统中的 URL 不是指向某个文件，而是存储在数据库中的记录。无服务器系统甚至不需要在服务器上托管文件。\n\n### 特征\n\n1. 域名后面的斜杠无关紧要\n\n- domain.com=domain.com/\n\n2. 斜杠对其他 URL 很重要\n\n- https://simidetect.jianguoyun.net.cn/rewards/01 = !https://simidetect.jianguoyun.net.cn/rewards/01/\n  后端未处理静态资源路径或重定向时，斜杠会影响资源加载\n- domain.com/page≠domain.com/page/\n\n3. 文件不应该以斜杠结尾\n\n- 在大多数情况下，如果在.html、.php、.js、.css、.pdf、.jpg 等文件中添加末尾斜杠，则不会加载该文件。这是因为大多数系统都会假设文件是一个文件夹，并且由于路径后面没有任何内容，因此通常会返回 404 页。\n\n### 对 SEO 的影响\n\n1. 相同的内容显示在带或者不带斜杠的 URL 上\n\n- 如前所述，如果你的内容可以在尾部斜杠版本和非尾部斜杠版本的页面上看到，这些页面会被视为单独的 URL。这里通常导致内容重复。在大多数情况下，这不会有问题，因为规范标记可能会指定一个首选版本\n- 无论你是否决定使用末尾斜杠，你都要确保所有信号（如重定向、站点地图、内部链接、规范标记等）都指向你要索引的版本。\n\n2. 带斜杠和不带斜杠的 URL 上显示的内容不同\n\n- 在某些情况下，如果两个系统共享相同的文件夹结构或某个 A/B 测试软件，则可能会出现这样的情况：带有和不带有尾部斜杠的 URL 页面显示完全不同的内容。在这些情况下，最理想的是选择一个版本进行索引并显示给用户，然后将另一个版本重定向到该版本。\n\n### 其他\n\n- 没有特殊情况， 最好由后端进行重定向， 统一将页面指向同一版本，旧的斜杠 URL 标准并不适用于大多数现代网站\n","source":"_posts/slashInUrl.md","raw":"---\ntitle: url 后面的斜杠 /\ncategories: broswer\ntags: url\n---\n\n<!--\n  name: url 后面的斜杠 /\n  description: 之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题\n-->\n\n之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题\n\n### 来源及区分\n\n- 末尾斜杠是放在 URL 末尾的正斜杠 “/”，例如 domain.com/ 或者 domain.com/page/。 末末尾斜杠通常用于区分目录和文件。然而，这些只是建议，而不是要求。\n- 在过去，文件夹会有一个末尾斜杠，而文件不会有末尾斜杠。一个文件夹将表明有更多的文件，你通常会有一个索引文件 (index.html, index.php 等）页面内容将从中加载。因此，内容将来自 domain.com/page/index.html 但是 展示给用户看的却是 domain.com/page/ 。对于单个文件，文件名和末尾都没有斜杠。\n- 现在，大多数系统中的 URL 不是指向某个文件，而是存储在数据库中的记录。无服务器系统甚至不需要在服务器上托管文件。\n\n### 特征\n\n1. 域名后面的斜杠无关紧要\n\n- domain.com=domain.com/\n\n2. 斜杠对其他 URL 很重要\n\n- https://simidetect.jianguoyun.net.cn/rewards/01 = !https://simidetect.jianguoyun.net.cn/rewards/01/\n  后端未处理静态资源路径或重定向时，斜杠会影响资源加载\n- domain.com/page≠domain.com/page/\n\n3. 文件不应该以斜杠结尾\n\n- 在大多数情况下，如果在.html、.php、.js、.css、.pdf、.jpg 等文件中添加末尾斜杠，则不会加载该文件。这是因为大多数系统都会假设文件是一个文件夹，并且由于路径后面没有任何内容，因此通常会返回 404 页。\n\n### 对 SEO 的影响\n\n1. 相同的内容显示在带或者不带斜杠的 URL 上\n\n- 如前所述，如果你的内容可以在尾部斜杠版本和非尾部斜杠版本的页面上看到，这些页面会被视为单独的 URL。这里通常导致内容重复。在大多数情况下，这不会有问题，因为规范标记可能会指定一个首选版本\n- 无论你是否决定使用末尾斜杠，你都要确保所有信号（如重定向、站点地图、内部链接、规范标记等）都指向你要索引的版本。\n\n2. 带斜杠和不带斜杠的 URL 上显示的内容不同\n\n- 在某些情况下，如果两个系统共享相同的文件夹结构或某个 A/B 测试软件，则可能会出现这样的情况：带有和不带有尾部斜杠的 URL 页面显示完全不同的内容。在这些情况下，最理想的是选择一个版本进行索引并显示给用户，然后将另一个版本重定向到该版本。\n\n### 其他\n\n- 没有特殊情况， 最好由后端进行重定向， 统一将页面指向同一版本，旧的斜杠 URL 标准并不适用于大多数现代网站\n","slug":"slashInUrl","published":1,"date":"2021-08-21T05:23:46.943Z","updated":"2021-08-21T05:23:46.944Z","_id":"ckslbu2d1001bsq3qb8bvfv6u","comments":1,"layout":"post","photos":[],"link":"","content":"<!--\n  name: url 后面的斜杠 /\n  description: 之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题\n-->\n\n<p>之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题</p>\n<h3 id=\"来源及区分\"><a href=\"#来源及区分\" class=\"headerlink\" title=\"来源及区分\"></a>来源及区分</h3><ul>\n<li>末尾斜杠是放在 URL 末尾的正斜杠 “/”，例如 domain.com/ 或者 domain.com/page/。 末末尾斜杠通常用于区分目录和文件。然而，这些只是建议，而不是要求。</li>\n<li>在过去，文件夹会有一个末尾斜杠，而文件不会有末尾斜杠。一个文件夹将表明有更多的文件，你通常会有一个索引文件 (index.html, index.php 等）页面内容将从中加载。因此，内容将来自 domain.com/page/index.html 但是 展示给用户看的却是 domain.com/page/ 。对于单个文件，文件名和末尾都没有斜杠。</li>\n<li>现在，大多数系统中的 URL 不是指向某个文件，而是存储在数据库中的记录。无服务器系统甚至不需要在服务器上托管文件。</li>\n</ul>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><ol>\n<li>域名后面的斜杠无关紧要</li>\n</ol>\n<ul>\n<li>domain.com=domain.com/</li>\n</ul>\n<ol start=\"2\">\n<li>斜杠对其他 URL 很重要</li>\n</ol>\n<ul>\n<li><a href=\"https://simidetect.jianguoyun.net.cn/rewards/01\">https://simidetect.jianguoyun.net.cn/rewards/01</a> = !<a href=\"https://simidetect.jianguoyun.net.cn/rewards/01/\">https://simidetect.jianguoyun.net.cn/rewards/01/</a><br>后端未处理静态资源路径或重定向时，斜杠会影响资源加载</li>\n<li>domain.com/page≠domain.com/page/</li>\n</ul>\n<ol start=\"3\">\n<li>文件不应该以斜杠结尾</li>\n</ol>\n<ul>\n<li>在大多数情况下，如果在.html、.php、.js、.css、.pdf、.jpg 等文件中添加末尾斜杠，则不会加载该文件。这是因为大多数系统都会假设文件是一个文件夹，并且由于路径后面没有任何内容，因此通常会返回 404 页。</li>\n</ul>\n<h3 id=\"对-SEO-的影响\"><a href=\"#对-SEO-的影响\" class=\"headerlink\" title=\"对 SEO 的影响\"></a>对 SEO 的影响</h3><ol>\n<li>相同的内容显示在带或者不带斜杠的 URL 上</li>\n</ol>\n<ul>\n<li>如前所述，如果你的内容可以在尾部斜杠版本和非尾部斜杠版本的页面上看到，这些页面会被视为单独的 URL。这里通常导致内容重复。在大多数情况下，这不会有问题，因为规范标记可能会指定一个首选版本</li>\n<li>无论你是否决定使用末尾斜杠，你都要确保所有信号（如重定向、站点地图、内部链接、规范标记等）都指向你要索引的版本。</li>\n</ul>\n<ol start=\"2\">\n<li>带斜杠和不带斜杠的 URL 上显示的内容不同</li>\n</ol>\n<ul>\n<li>在某些情况下，如果两个系统共享相同的文件夹结构或某个 A/B 测试软件，则可能会出现这样的情况：带有和不带有尾部斜杠的 URL 页面显示完全不同的内容。在这些情况下，最理想的是选择一个版本进行索引并显示给用户，然后将另一个版本重定向到该版本。</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>没有特殊情况， 最好由后端进行重定向， 统一将页面指向同一版本，旧的斜杠 URL 标准并不适用于大多数现代网站</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!--\n  name: url 后面的斜杠 /\n  description: 之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题\n-->\n\n<p>之前碰到一个问题，后端部署了一个网站后，访问网站时如果网址后面不带斜杠，会导致静态资源加载不出来， 然后我就想到平常访问网站的时候有些网站地址后面接了斜杠，接下来我继续查阅了一下，发现了一些问题</p>\n<h3 id=\"来源及区分\"><a href=\"#来源及区分\" class=\"headerlink\" title=\"来源及区分\"></a>来源及区分</h3><ul>\n<li>末尾斜杠是放在 URL 末尾的正斜杠 “/”，例如 domain.com/ 或者 domain.com/page/。 末末尾斜杠通常用于区分目录和文件。然而，这些只是建议，而不是要求。</li>\n<li>在过去，文件夹会有一个末尾斜杠，而文件不会有末尾斜杠。一个文件夹将表明有更多的文件，你通常会有一个索引文件 (index.html, index.php 等）页面内容将从中加载。因此，内容将来自 domain.com/page/index.html 但是 展示给用户看的却是 domain.com/page/ 。对于单个文件，文件名和末尾都没有斜杠。</li>\n<li>现在，大多数系统中的 URL 不是指向某个文件，而是存储在数据库中的记录。无服务器系统甚至不需要在服务器上托管文件。</li>\n</ul>\n<h3 id=\"特征\"><a href=\"#特征\" class=\"headerlink\" title=\"特征\"></a>特征</h3><ol>\n<li>域名后面的斜杠无关紧要</li>\n</ol>\n<ul>\n<li>domain.com=domain.com/</li>\n</ul>\n<ol start=\"2\">\n<li>斜杠对其他 URL 很重要</li>\n</ol>\n<ul>\n<li><a href=\"https://simidetect.jianguoyun.net.cn/rewards/01\">https://simidetect.jianguoyun.net.cn/rewards/01</a> = !<a href=\"https://simidetect.jianguoyun.net.cn/rewards/01/\">https://simidetect.jianguoyun.net.cn/rewards/01/</a><br>后端未处理静态资源路径或重定向时，斜杠会影响资源加载</li>\n<li>domain.com/page≠domain.com/page/</li>\n</ul>\n<ol start=\"3\">\n<li>文件不应该以斜杠结尾</li>\n</ol>\n<ul>\n<li>在大多数情况下，如果在.html、.php、.js、.css、.pdf、.jpg 等文件中添加末尾斜杠，则不会加载该文件。这是因为大多数系统都会假设文件是一个文件夹，并且由于路径后面没有任何内容，因此通常会返回 404 页。</li>\n</ul>\n<h3 id=\"对-SEO-的影响\"><a href=\"#对-SEO-的影响\" class=\"headerlink\" title=\"对 SEO 的影响\"></a>对 SEO 的影响</h3><ol>\n<li>相同的内容显示在带或者不带斜杠的 URL 上</li>\n</ol>\n<ul>\n<li>如前所述，如果你的内容可以在尾部斜杠版本和非尾部斜杠版本的页面上看到，这些页面会被视为单独的 URL。这里通常导致内容重复。在大多数情况下，这不会有问题，因为规范标记可能会指定一个首选版本</li>\n<li>无论你是否决定使用末尾斜杠，你都要确保所有信号（如重定向、站点地图、内部链接、规范标记等）都指向你要索引的版本。</li>\n</ul>\n<ol start=\"2\">\n<li>带斜杠和不带斜杠的 URL 上显示的内容不同</li>\n</ol>\n<ul>\n<li>在某些情况下，如果两个系统共享相同的文件夹结构或某个 A/B 测试软件，则可能会出现这样的情况：带有和不带有尾部斜杠的 URL 页面显示完全不同的内容。在这些情况下，最理想的是选择一个版本进行索引并显示给用户，然后将另一个版本重定向到该版本。</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li>没有特殊情况， 最好由后端进行重定向， 统一将页面指向同一版本，旧的斜杠 URL 标准并不适用于大多数现代网站</li>\n</ul>\n"},{"title":"bind, apply, call 的使用及区别","_content":"\n<!--\n  name: bind, apply, call\n  description: bind, apply, call的使用场景,区别及转换\n-->\n\n- bind，call，apply 的作用都是用来改变 this 指向的\n\n1. 如果函数不带参数， 只是绑定 this 对象， 下面三种情况产生的效果是一样的\n\n```js\n//\nfunction main() {\n  const thisObj = { name: \"this\" };\n  function log() {\n    console.log(this.name);\n    return \"log\";\n  }\n  // 执行函数, 返回 'log'\n  log.apply(thisObj);\n  log.bind(thisObj)();\n  log.call(thisObj);\n}\nmain();\n```\n\n2. 如果函数带参数,\n\n- apply 第二个参数(必须是数组或者类数组)将展开作为函数的参数， bind, call 则是第二个参数以后的参数都作为函数的参数\n- bind 会返回 this 指针改变后的函数， call 会直接执行\n\n```js\nfunction main() {\n  const thisObj = { name: \"this\" };\n  function logWidthArgs(...args) {\n    console.log(...args, this.name);\n    return \"log\";\n  }\n\n  // 打印 1, 2 \"this\"\n  logWidthArgs.apply(thisObj, [1, 2], 3);\n  const fn = logWidthArgs.bind(thisObj, [1, 2], 3);\n  // 打印 [1,2], 3 \"this\"\n  fn();\n  // 打印 [1,2],3 \"this\"\n  logWidthArgs.call(thisObj, [1, 2], 3);\n}\n```\n\n3. 使用场景\n\n- 如果不带参数或者只有一个, 且无需保存函数， 则三个函数都可以使用\n- 如果需要保存函数， 则使用 bind\n\n4. 转换(不同过三者直接生成的暂时没找到方法， js 改变 this 指针的方法主要只提供了这三个)\n\n```js\nfunction bindFn(thisObj, ...args) {\n  const _this = this;\n  return function () {\n    _this.apply(thisObj, [...args]);\n  };\n}\n\nfunction applyFn(thisObj, ...args) {\n  return thus.apply(thisObj, [...args]);\n}\nFunction.prototype.bindFn = bindFn;\nFunction.prototype.applyFn = applyFn;\n```\n","source":"_posts/thisPointer.md","raw":"---\ntitle: bind, apply, call 的使用及区别\ncategories: javascript\ntags: this指针\n---\n\n<!--\n  name: bind, apply, call\n  description: bind, apply, call的使用场景,区别及转换\n-->\n\n- bind，call，apply 的作用都是用来改变 this 指向的\n\n1. 如果函数不带参数， 只是绑定 this 对象， 下面三种情况产生的效果是一样的\n\n```js\n//\nfunction main() {\n  const thisObj = { name: \"this\" };\n  function log() {\n    console.log(this.name);\n    return \"log\";\n  }\n  // 执行函数, 返回 'log'\n  log.apply(thisObj);\n  log.bind(thisObj)();\n  log.call(thisObj);\n}\nmain();\n```\n\n2. 如果函数带参数,\n\n- apply 第二个参数(必须是数组或者类数组)将展开作为函数的参数， bind, call 则是第二个参数以后的参数都作为函数的参数\n- bind 会返回 this 指针改变后的函数， call 会直接执行\n\n```js\nfunction main() {\n  const thisObj = { name: \"this\" };\n  function logWidthArgs(...args) {\n    console.log(...args, this.name);\n    return \"log\";\n  }\n\n  // 打印 1, 2 \"this\"\n  logWidthArgs.apply(thisObj, [1, 2], 3);\n  const fn = logWidthArgs.bind(thisObj, [1, 2], 3);\n  // 打印 [1,2], 3 \"this\"\n  fn();\n  // 打印 [1,2],3 \"this\"\n  logWidthArgs.call(thisObj, [1, 2], 3);\n}\n```\n\n3. 使用场景\n\n- 如果不带参数或者只有一个, 且无需保存函数， 则三个函数都可以使用\n- 如果需要保存函数， 则使用 bind\n\n4. 转换(不同过三者直接生成的暂时没找到方法， js 改变 this 指针的方法主要只提供了这三个)\n\n```js\nfunction bindFn(thisObj, ...args) {\n  const _this = this;\n  return function () {\n    _this.apply(thisObj, [...args]);\n  };\n}\n\nfunction applyFn(thisObj, ...args) {\n  return thus.apply(thisObj, [...args]);\n}\nFunction.prototype.bindFn = bindFn;\nFunction.prototype.applyFn = applyFn;\n```\n","slug":"thisPointer","published":1,"date":"2021-08-21T05:22:51.797Z","updated":"2021-08-21T05:22:51.797Z","_id":"ckslbu2d2001esq3q7hdo9w4d","comments":1,"layout":"post","photos":[],"link":"","content":"<!--\n  name: bind, apply, call\n  description: bind, apply, call的使用场景,区别及转换\n-->\n\n<ul>\n<li>bind，call，apply 的作用都是用来改变 this 指向的</li>\n</ul>\n<ol>\n<li>如果函数不带参数， 只是绑定 this 对象， 下面三种情况产生的效果是一样的</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> thisObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;this&quot;</span> &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;log&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数, 返回 &#x27;log&#x27;</span></span><br><span class=\"line\">  log.apply(thisObj);</span><br><span class=\"line\">  log.bind(thisObj)();</span><br><span class=\"line\">  log.call(thisObj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果函数带参数,</li>\n</ol>\n<ul>\n<li>apply 第二个参数(必须是数组或者类数组)将展开作为函数的参数， bind, call 则是第二个参数以后的参数都作为函数的参数</li>\n<li>bind 会返回 this 指针改变后的函数， call 会直接执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> thisObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;this&quot;</span> &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logWidthArgs</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(...args, <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;log&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 打印 1, 2 &quot;this&quot;</span></span><br><span class=\"line\">  logWidthArgs.apply(thisObj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = logWidthArgs.bind(thisObj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 打印 [1,2], 3 &quot;this&quot;</span></span><br><span class=\"line\">  fn();</span><br><span class=\"line\">  <span class=\"comment\">// 打印 [1,2],3 &quot;this&quot;</span></span><br><span class=\"line\">  logWidthArgs.call(thisObj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用场景</li>\n</ol>\n<ul>\n<li>如果不带参数或者只有一个, 且无需保存函数， 则三个函数都可以使用</li>\n<li>如果需要保存函数， 则使用 bind</li>\n</ul>\n<ol start=\"4\">\n<li>转换(不同过三者直接生成的暂时没找到方法， js 改变 this 指针的方法主要只提供了这三个)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindFn</span>(<span class=\"params\">thisObj, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    _this.apply(thisObj, [...args]);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyFn</span>(<span class=\"params\">thisObj, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thus.apply(thisObj, [...args]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bindFn = bindFn;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.applyFn = applyFn;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<!--\n  name: bind, apply, call\n  description: bind, apply, call的使用场景,区别及转换\n-->\n\n<ul>\n<li>bind，call，apply 的作用都是用来改变 this 指向的</li>\n</ul>\n<ol>\n<li>如果函数不带参数， 只是绑定 this 对象， 下面三种情况产生的效果是一样的</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> thisObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;this&quot;</span> &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">log</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;log&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 执行函数, 返回 &#x27;log&#x27;</span></span><br><span class=\"line\">  log.apply(thisObj);</span><br><span class=\"line\">  log.bind(thisObj)();</span><br><span class=\"line\">  log.call(thisObj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>如果函数带参数,</li>\n</ol>\n<ul>\n<li>apply 第二个参数(必须是数组或者类数组)将展开作为函数的参数， bind, call 则是第二个参数以后的参数都作为函数的参数</li>\n<li>bind 会返回 this 指针改变后的函数， call 会直接执行</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> thisObj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;this&quot;</span> &#125;;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logWidthArgs</span>(<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(...args, <span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;log&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 打印 1, 2 &quot;this&quot;</span></span><br><span class=\"line\">  logWidthArgs.apply(thisObj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = logWidthArgs.bind(thisObj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 打印 [1,2], 3 &quot;this&quot;</span></span><br><span class=\"line\">  fn();</span><br><span class=\"line\">  <span class=\"comment\">// 打印 [1,2],3 &quot;this&quot;</span></span><br><span class=\"line\">  logWidthArgs.call(thisObj, [<span class=\"number\">1</span>, <span class=\"number\">2</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用场景</li>\n</ol>\n<ul>\n<li>如果不带参数或者只有一个, 且无需保存函数， 则三个函数都可以使用</li>\n<li>如果需要保存函数， 则使用 bind</li>\n</ul>\n<ol start=\"4\">\n<li>转换(不同过三者直接生成的暂时没找到方法， js 改变 this 指针的方法主要只提供了这三个)</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bindFn</span>(<span class=\"params\">thisObj, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    _this.apply(thisObj, [...args]);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">applyFn</span>(<span class=\"params\">thisObj, ...args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> thus.apply(thisObj, [...args]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.bindFn = bindFn;</span><br><span class=\"line\"><span class=\"built_in\">Function</span>.prototype.applyFn = applyFn;</span><br></pre></td></tr></table></figure>\n"},{"title":"webpack 基础","subtitle":"Webpack 核心概念，Webpack 调优，Webpack 运行原理","_content":"\n<!--\n  name: webpack 基础\n  description: Webpack 核心概念，Webpack 调优，Webpack 运行原理\n-->\n\n# Webpack 基础\n\n## 配置项\n\n1. 入口(entry)\n\n- 入口是 webpack 构建开始的地方，通过入口文件，webpack 可以找到入口文件所依赖的文件，并逐步递归，找出所有依赖的文件。\n- 可指定一个入口起点（或多个入口起点\n\n```js\nmodule.exports = {\n  /**\n   * entry: {\n   *  file1: './path/to/file1.js',\n   *  file2: './path/to/file2.js',\n   * }\n   * */\n  entry: \"./path/to/file.js\",\n};\n```\n\n2. 出口(output)\n\n- output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist\n- output.path 必须是绝对路径\n\n```js\nmodule.exports = {\n  entry: './path/to/file.js',\n  output: {\n    // webpack默认输出路径为dist\n    path: path.resolve(__dirname, 'dist')\n    filename: '[name].js'\n  }\n}\n```\n\n3. loader\n\n- 本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。\n- loader 其实就是一个 function，接收一个参数 source，就是当前的文件内容，然后稍加处理，就可以 return 出一个新的文件内容\n\n```js\n// sampleLoader.js\nmodule.exports = function () {\n  this.callback(null, \"console.log('sampleLoader worked')\" + source);\n\n  // 或者 return  \"console.log('sampleLoader worked')\" + source\n};\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\*.js$/,\n        loader: \"path/to/sampleLoader\",\n      },\n    ],\n  },\n};\n```\n\n4. 插件(plugins)\n\n- 通过监听 webpack 执行流程上的钩子函数，可以更精密地控制 webpack 的输出，包括：打包优化、资源管理和注入环境变量等\n\n```js\nclass SamplePlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"SamplePlugin\", (compilation) => {\n      // compilation.hooks列表\n      // https://webpack.js.org/api/compilation-hooks/#root\n      compilation.hooks.afterOptimizeChunkAssets.tap(\n        \"SamplePlugin\",\n        (chunks) => {\n          //  这边拿到chunk实例，进行更多操作\n          console.log(\"SamplePlugin worked\", chunks);\n        }\n      );\n    });\n  }\n}\n// webpack.config.js\nmodule.exports = {\n  plugins: [new SamplePlugin()],\n};\n```\n\n## 优化\n\n- 常规优化\n\n1. 在处理 loader 时，配置 include，缩小 loader 检查范围。\n\n2. 使用 alias 可以更快地找到对应文件。\n\n3. 如果在 require 模块时不写后缀名，默认 webpack 会尝试.js,.json 等后缀名匹配，配置 extensions，可以让 webpack 少做一点后缀匹配。\n\n4. thread-loader 可以将非常消耗资源的 loaders 转存到 worker pool 中。\n\n5. 使用 cache-loader 启用持久化缓存。使用 package.json 中的 postinstall 清除缓存目录。\n\n6. 使用 mode 中的 noParse 属性，可以设置不必要的依赖解析，例如：我们知道 lodash 是无任何依赖包的，就可以设置此选项，缩小文件解析范围。\n\n- 开发阶段\n\n1. 选择合理 devtool，在大多数情况下，cheap-module-eval-source-map 是最好的选择。\n2. 可以直接引用 cdn 上的库文件，使用 externals 配置全局对象，避免打包。\n\n- 生成环境\n\n1. cdn 静态资源\n2. [tree shaking](https://webpack.docschina.org/guides/tree-shaking/) + sideEffects\n\n- 通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)\n- 在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有副作用。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是“纯粹部分”。\n- 通过 package.json 的 \"sideEffects\" 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 \"pure(纯正 ES2015 模块)\"，由此可以安全地删除文件中未使用的部分。\n- 如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 false，来告知 webpack 它可以安全地删除未用到的 export。\n- 源码必须采用 ES6 模块化语句，不然它将无法生效\n\n```js\n// sample.js\nexport function methodA(){\n  console.log('methodA run')\n}\nexport function methodB(){\n  console.log('methodB run')\n}\n\n// webpack.config.js\nmodule.exports = {\n  ...\n  mode: 'development',\n  optimization: {\n   usedExports: true,\n  },\n  module: {\n    rules: [\n      {\n        test: ...\n        // 在规则中添加 sideEffects\n        sideEffects: true\n      }\n    ]\n  }\n}\n\n// package.json\n{\n  name: 'my-project',\n  //\n  sideEffects: boolean | 'path/to/target/file'\n}\n\n// src/index.js 入口文件\nimport {methodA} from 'sample'\nmethodA()\n```\n\n3. 配置 (scope hoisting)[https://webpack.docschina.org/plugins/module-concatenation-plugin/] 作用域提升，将多个 IIFE 放在一个 IIFE 中。\n\n- 原理： 分析出模块之间的依赖关系，尽可能的把打散的模块合并到一个函数中去，但前提是不能造成代码冗余。 因此只有那些被引用了一次的模块才能被合并。\n- 源码必须采用 ES6 模块化语句，不然它将无法生效\n","source":"_posts/webpackBase.md","raw":"---\ntitle: webpack 基础\nsubtitle: Webpack 核心概念，Webpack 调优，Webpack 运行原理\ncategories: webpack\ntags: webpack\n---\n\n<!--\n  name: webpack 基础\n  description: Webpack 核心概念，Webpack 调优，Webpack 运行原理\n-->\n\n# Webpack 基础\n\n## 配置项\n\n1. 入口(entry)\n\n- 入口是 webpack 构建开始的地方，通过入口文件，webpack 可以找到入口文件所依赖的文件，并逐步递归，找出所有依赖的文件。\n- 可指定一个入口起点（或多个入口起点\n\n```js\nmodule.exports = {\n  /**\n   * entry: {\n   *  file1: './path/to/file1.js',\n   *  file2: './path/to/file2.js',\n   * }\n   * */\n  entry: \"./path/to/file.js\",\n};\n```\n\n2. 出口(output)\n\n- output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist\n- output.path 必须是绝对路径\n\n```js\nmodule.exports = {\n  entry: './path/to/file.js',\n  output: {\n    // webpack默认输出路径为dist\n    path: path.resolve(__dirname, 'dist')\n    filename: '[name].js'\n  }\n}\n```\n\n3. loader\n\n- 本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。\n- loader 其实就是一个 function，接收一个参数 source，就是当前的文件内容，然后稍加处理，就可以 return 出一个新的文件内容\n\n```js\n// sampleLoader.js\nmodule.exports = function () {\n  this.callback(null, \"console.log('sampleLoader worked')\" + source);\n\n  // 或者 return  \"console.log('sampleLoader worked')\" + source\n};\n// webpack.config.js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\*.js$/,\n        loader: \"path/to/sampleLoader\",\n      },\n    ],\n  },\n};\n```\n\n4. 插件(plugins)\n\n- 通过监听 webpack 执行流程上的钩子函数，可以更精密地控制 webpack 的输出，包括：打包优化、资源管理和注入环境变量等\n\n```js\nclass SamplePlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"SamplePlugin\", (compilation) => {\n      // compilation.hooks列表\n      // https://webpack.js.org/api/compilation-hooks/#root\n      compilation.hooks.afterOptimizeChunkAssets.tap(\n        \"SamplePlugin\",\n        (chunks) => {\n          //  这边拿到chunk实例，进行更多操作\n          console.log(\"SamplePlugin worked\", chunks);\n        }\n      );\n    });\n  }\n}\n// webpack.config.js\nmodule.exports = {\n  plugins: [new SamplePlugin()],\n};\n```\n\n## 优化\n\n- 常规优化\n\n1. 在处理 loader 时，配置 include，缩小 loader 检查范围。\n\n2. 使用 alias 可以更快地找到对应文件。\n\n3. 如果在 require 模块时不写后缀名，默认 webpack 会尝试.js,.json 等后缀名匹配，配置 extensions，可以让 webpack 少做一点后缀匹配。\n\n4. thread-loader 可以将非常消耗资源的 loaders 转存到 worker pool 中。\n\n5. 使用 cache-loader 启用持久化缓存。使用 package.json 中的 postinstall 清除缓存目录。\n\n6. 使用 mode 中的 noParse 属性，可以设置不必要的依赖解析，例如：我们知道 lodash 是无任何依赖包的，就可以设置此选项，缩小文件解析范围。\n\n- 开发阶段\n\n1. 选择合理 devtool，在大多数情况下，cheap-module-eval-source-map 是最好的选择。\n2. 可以直接引用 cdn 上的库文件，使用 externals 配置全局对象，避免打包。\n\n- 生成环境\n\n1. cdn 静态资源\n2. [tree shaking](https://webpack.docschina.org/guides/tree-shaking/) + sideEffects\n\n- 通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)\n- 在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有副作用。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是“纯粹部分”。\n- 通过 package.json 的 \"sideEffects\" 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 \"pure(纯正 ES2015 模块)\"，由此可以安全地删除文件中未使用的部分。\n- 如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 false，来告知 webpack 它可以安全地删除未用到的 export。\n- 源码必须采用 ES6 模块化语句，不然它将无法生效\n\n```js\n// sample.js\nexport function methodA(){\n  console.log('methodA run')\n}\nexport function methodB(){\n  console.log('methodB run')\n}\n\n// webpack.config.js\nmodule.exports = {\n  ...\n  mode: 'development',\n  optimization: {\n   usedExports: true,\n  },\n  module: {\n    rules: [\n      {\n        test: ...\n        // 在规则中添加 sideEffects\n        sideEffects: true\n      }\n    ]\n  }\n}\n\n// package.json\n{\n  name: 'my-project',\n  //\n  sideEffects: boolean | 'path/to/target/file'\n}\n\n// src/index.js 入口文件\nimport {methodA} from 'sample'\nmethodA()\n```\n\n3. 配置 (scope hoisting)[https://webpack.docschina.org/plugins/module-concatenation-plugin/] 作用域提升，将多个 IIFE 放在一个 IIFE 中。\n\n- 原理： 分析出模块之间的依赖关系，尽可能的把打散的模块合并到一个函数中去，但前提是不能造成代码冗余。 因此只有那些被引用了一次的模块才能被合并。\n- 源码必须采用 ES6 模块化语句，不然它将无法生效\n","slug":"webpackBase","published":1,"date":"2021-08-21T05:22:51.797Z","updated":"2021-08-21T05:22:51.798Z","_id":"ckslbu2d3001hsq3qbz3hgfde","comments":1,"layout":"post","photos":[],"link":"","content":"<!--\n  name: webpack 基础\n  description: Webpack 核心概念，Webpack 调优，Webpack 运行原理\n-->\n\n<h1 id=\"Webpack-基础\"><a href=\"#Webpack-基础\" class=\"headerlink\" title=\"Webpack 基础\"></a>Webpack 基础</h1><h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><ol>\n<li>入口(entry)</li>\n</ol>\n<ul>\n<li>入口是 webpack 构建开始的地方，通过入口文件，webpack 可以找到入口文件所依赖的文件，并逐步递归，找出所有依赖的文件。</li>\n<li>可指定一个入口起点（或多个入口起点</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * entry: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">   *  file1: &#x27;./path/to/file1.js&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">   *  file2: &#x27;./path/to/file2.js&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">   * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * */</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./path/to/file.js&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>出口(output)</li>\n</ol>\n<ul>\n<li>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist</li>\n<li>output.path 必须是绝对路径</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/file.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// webpack默认输出路径为dist</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>loader</li>\n</ol>\n<ul>\n<li>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</li>\n<li>loader 其实就是一个 function，接收一个参数 source，就是当前的文件内容，然后稍加处理，就可以 return 出一个新的文件内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sampleLoader.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.callback(<span class=\"literal\">null</span>, <span class=\"string\">&quot;console.log(&#x27;sampleLoader worked&#x27;)&quot;</span> + source);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 或者 return  &quot;console.log(&#x27;sampleLoader worked&#x27;)&quot; + source</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\*.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">&quot;path/to/sampleLoader&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>插件(plugins)</li>\n</ol>\n<ul>\n<li>通过监听 webpack 执行流程上的钩子函数，可以更精密地控制 webpack 的输出，包括：打包优化、资源管理和注入环境变量等</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SamplePlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">compiler</span>)</span> &#123;</span><br><span class=\"line\">    compiler.hooks.compilation.tap(<span class=\"string\">&quot;SamplePlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// compilation.hooks列表</span></span><br><span class=\"line\">      <span class=\"comment\">// https://webpack.js.org/api/compilation-hooks/#root</span></span><br><span class=\"line\">      compilation.hooks.afterOptimizeChunkAssets.tap(</span><br><span class=\"line\">        <span class=\"string\">&quot;SamplePlugin&quot;</span>,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">chunks</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//  这边拿到chunk实例，进行更多操作</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;SamplePlugin worked&quot;</span>, chunks);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> SamplePlugin()],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><ul>\n<li>常规优化</li>\n</ul>\n<ol>\n<li><p>在处理 loader 时，配置 include，缩小 loader 检查范围。</p>\n</li>\n<li><p>使用 alias 可以更快地找到对应文件。</p>\n</li>\n<li><p>如果在 require 模块时不写后缀名，默认 webpack 会尝试.js,.json 等后缀名匹配，配置 extensions，可以让 webpack 少做一点后缀匹配。</p>\n</li>\n<li><p>thread-loader 可以将非常消耗资源的 loaders 转存到 worker pool 中。</p>\n</li>\n<li><p>使用 cache-loader 启用持久化缓存。使用 package.json 中的 postinstall 清除缓存目录。</p>\n</li>\n<li><p>使用 mode 中的 noParse 属性，可以设置不必要的依赖解析，例如：我们知道 lodash 是无任何依赖包的，就可以设置此选项，缩小文件解析范围。</p>\n</li>\n</ol>\n<ul>\n<li>开发阶段</li>\n</ul>\n<ol>\n<li>选择合理 devtool，在大多数情况下，cheap-module-eval-source-map 是最好的选择。</li>\n<li>可以直接引用 cdn 上的库文件，使用 externals 配置全局对象，避免打包。</li>\n</ol>\n<ul>\n<li>生成环境</li>\n</ul>\n<ol>\n<li>cdn 静态资源</li>\n<li><a href=\"https://webpack.docschina.org/guides/tree-shaking/\">tree shaking</a> + sideEffects</li>\n</ol>\n<ul>\n<li>通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)</li>\n<li>在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有副作用。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是“纯粹部分”。</li>\n<li>通过 package.json 的 “sideEffects” 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 “pure(纯正 ES2015 模块)”，由此可以安全地删除文件中未使用的部分。</li>\n<li>如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 false，来告知 webpack 它可以安全地删除未用到的 export。</li>\n<li>源码必须采用 ES6 模块化语句，不然它将无法生效</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sample.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodA</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;methodA run&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;methodB run&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">usedExports</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: ...</span><br><span class=\"line\">        <span class=\"comment\">// 在规则中添加 sideEffects</span></span><br><span class=\"line\">        <span class=\"attr\">sideEffects</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;my-project&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"attr\">sideEffects</span>: boolean | <span class=\"string\">&#x27;path/to/target/file&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/index.js 入口文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;methodA&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;sample&#x27;</span></span><br><span class=\"line\">methodA()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置 (scope hoisting)[<a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin/]\">https://webpack.docschina.org/plugins/module-concatenation-plugin/]</a> 作用域提升，将多个 IIFE 放在一个 IIFE 中。</li>\n</ol>\n<ul>\n<li>原理： 分析出模块之间的依赖关系，尽可能的把打散的模块合并到一个函数中去，但前提是不能造成代码冗余。 因此只有那些被引用了一次的模块才能被合并。</li>\n<li>源码必须采用 ES6 模块化语句，不然它将无法生效</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!--\n  name: webpack 基础\n  description: Webpack 核心概念，Webpack 调优，Webpack 运行原理\n-->\n\n<h1 id=\"Webpack-基础\"><a href=\"#Webpack-基础\" class=\"headerlink\" title=\"Webpack 基础\"></a>Webpack 基础</h1><h2 id=\"配置项\"><a href=\"#配置项\" class=\"headerlink\" title=\"配置项\"></a>配置项</h2><ol>\n<li>入口(entry)</li>\n</ol>\n<ul>\n<li>入口是 webpack 构建开始的地方，通过入口文件，webpack 可以找到入口文件所依赖的文件，并逐步递归，找出所有依赖的文件。</li>\n<li>可指定一个入口起点（或多个入口起点</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * entry: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">   *  file1: &#x27;./path/to/file1.js&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">   *  file2: &#x27;./path/to/file2.js&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">   * &#125;</span></span><br><span class=\"line\"><span class=\"comment\">   * */</span></span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./path/to/file.js&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>出口(output)</li>\n</ol>\n<ul>\n<li>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist</li>\n<li>output.path 必须是绝对路径</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./path/to/file.js&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// webpack默认输出路径为dist</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;[name].js&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>loader</li>\n</ol>\n<ul>\n<li>本质上，webpack loader 将所有类型的文件，转换为应用程序的依赖图（和最终的 bundle）可以直接引用的模块。</li>\n<li>loader 其实就是一个 function，接收一个参数 source，就是当前的文件内容，然后稍加处理，就可以 return 出一个新的文件内容</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sampleLoader.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.callback(<span class=\"literal\">null</span>, <span class=\"string\">&quot;console.log(&#x27;sampleLoader worked&#x27;)&quot;</span> + source);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 或者 return  &quot;console.log(&#x27;sampleLoader worked&#x27;)&quot; + source</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\*.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">&quot;path/to/sampleLoader&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>插件(plugins)</li>\n</ol>\n<ul>\n<li>通过监听 webpack 执行流程上的钩子函数，可以更精密地控制 webpack 的输出，包括：打包优化、资源管理和注入环境变量等</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SamplePlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">compiler</span>)</span> &#123;</span><br><span class=\"line\">    compiler.hooks.compilation.tap(<span class=\"string\">&quot;SamplePlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// compilation.hooks列表</span></span><br><span class=\"line\">      <span class=\"comment\">// https://webpack.js.org/api/compilation-hooks/#root</span></span><br><span class=\"line\">      compilation.hooks.afterOptimizeChunkAssets.tap(</span><br><span class=\"line\">        <span class=\"string\">&quot;SamplePlugin&quot;</span>,</span><br><span class=\"line\">        <span class=\"function\">(<span class=\"params\">chunks</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//  这边拿到chunk实例，进行更多操作</span></span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;SamplePlugin worked&quot;</span>, chunks);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"keyword\">new</span> SamplePlugin()],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><ul>\n<li>常规优化</li>\n</ul>\n<ol>\n<li><p>在处理 loader 时，配置 include，缩小 loader 检查范围。</p>\n</li>\n<li><p>使用 alias 可以更快地找到对应文件。</p>\n</li>\n<li><p>如果在 require 模块时不写后缀名，默认 webpack 会尝试.js,.json 等后缀名匹配，配置 extensions，可以让 webpack 少做一点后缀匹配。</p>\n</li>\n<li><p>thread-loader 可以将非常消耗资源的 loaders 转存到 worker pool 中。</p>\n</li>\n<li><p>使用 cache-loader 启用持久化缓存。使用 package.json 中的 postinstall 清除缓存目录。</p>\n</li>\n<li><p>使用 mode 中的 noParse 属性，可以设置不必要的依赖解析，例如：我们知道 lodash 是无任何依赖包的，就可以设置此选项，缩小文件解析范围。</p>\n</li>\n</ol>\n<ul>\n<li>开发阶段</li>\n</ul>\n<ol>\n<li>选择合理 devtool，在大多数情况下，cheap-module-eval-source-map 是最好的选择。</li>\n<li>可以直接引用 cdn 上的库文件，使用 externals 配置全局对象，避免打包。</li>\n</ol>\n<ul>\n<li>生成环境</li>\n</ul>\n<ol>\n<li>cdn 静态资源</li>\n<li><a href=\"https://webpack.docschina.org/guides/tree-shaking/\">tree shaking</a> + sideEffects</li>\n</ol>\n<ul>\n<li>通常用于描述移除 JavaScript 上下文中的未引用代码(dead-code)</li>\n<li>在一个纯粹的 ESM 模块世界中，很容易识别出哪些文件有副作用。然而，我们的项目无法达到这种纯度，所以，此时有必要提示 webpack compiler 哪些代码是“纯粹部分”。</li>\n<li>通过 package.json 的 “sideEffects” 属性作为标记，向 compiler 提供提示，表明项目中的哪些文件是 “pure(纯正 ES2015 模块)”，由此可以安全地删除文件中未使用的部分。</li>\n<li>如果所有代码都不包含副作用，我们就可以简单地将该属性标记为 false，来告知 webpack 它可以安全地删除未用到的 export。</li>\n<li>源码必须采用 ES6 模块化语句，不然它将无法生效</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// sample.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodA</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;methodA run&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">methodB</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;methodB run&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">   <span class=\"attr\">usedExports</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: ...</span><br><span class=\"line\">        <span class=\"comment\">// 在规则中添加 sideEffects</span></span><br><span class=\"line\">        <span class=\"attr\">sideEffects</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// package.json</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;my-project&#x27;</span>,</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"attr\">sideEffects</span>: boolean | <span class=\"string\">&#x27;path/to/target/file&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// src/index.js 入口文件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;methodA&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;sample&#x27;</span></span><br><span class=\"line\">methodA()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>配置 (scope hoisting)[<a href=\"https://webpack.docschina.org/plugins/module-concatenation-plugin/]\">https://webpack.docschina.org/plugins/module-concatenation-plugin/]</a> 作用域提升，将多个 IIFE 放在一个 IIFE 中。</li>\n</ol>\n<ul>\n<li>原理： 分析出模块之间的依赖关系，尽可能的把打散的模块合并到一个函数中去，但前提是不能造成代码冗余。 因此只有那些被引用了一次的模块才能被合并。</li>\n<li>源码必须采用 ES6 模块化语句，不然它将无法生效</li>\n</ul>\n"},{"title":"webpack搭建","subtitle":"从0开始搭建一个webpack+react+typescript环境","_content":"\n<!--\n  name: webpack搭建\n  description: 从0开始搭建一个webpack+react+typescript环境\n-->\n\n## 从 0 开始搭建一个 webpack+react+typescript 环境\n\n1. 基础配置\n\n```js\nconst config = {\n  entry: {\n    // 入口文件, 可以是相对路径或绝对路径\n    main: \"./src/index.js\",\n  },\n  output: {\n    // 输出的文件名\n    filename: \"[name].js\",\n    // 输入路径 必须是绝对路径\n    path: path.resolve(__dirname, \"../dist\"),\n  },\n};\n```\n\n2. loaders 静态资源， css\n\n```js\nconst generateLoaders = () => {\n  return [\n    // webpack 5 静态资源可以直接 使用type assets 设置\n    {\n      test: /\\.(png|jpe?g|gif|ico|bmp)$/i,\n      type: \"asset\",\n      parser: {\n        dataUrlCondition: {\n          maxSize: 10 * 1024,\n        },\n      },\n      generator: {\n        filename: \"images/[hash][ext][query]\",\n      },\n    },\n    {\n      test: /\\.s[ac]ss$/i,\n      use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n    },\n  ];\n};\n```\n\n3. ts 配置\n\n- 增加一个 tsconfig.json 文件，它包含了输入文件列表以及编译选项\n\n```json\n{\n  \"exclude\": [\"dist\", \"node_modules\"],\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"noUnusedLocals\": true,\n    \"noUncheckedIndexedAccess\": false,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    // 没有export default的文件 可以使用 import * as  DefaultModule 的方式引入文件\n    \"allowSyntheticDefaultImports\": true,\n    // 允许引入js\n    \"allowJs\": true,\n    // 允许引入json文件\n    \"resolveJsonModule\": true\n  }\n}\n```\n\n- loader 增加 ts 支持\n\n```js\nconst generateLoaders = () => {\n  return [\n    // ...\n    {\n      test: /\\.tsx?$/,\n      use: [\n        {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"@babel/preset-env\"],\n          },\n        },\n        \"ts-loader\",\n      ],\n    },\n  ];\n};\n```\n\n- 其他配置项 React ReactDOM 快捷引入(免去每个文件 import)\n\n```js\n// webpack.config.js\nconst config = {\n  // ...\n  plugins: [\n    // 这里需要在ts文件内全局定义React和ReactDOM\n    new webpack.ProvidePlugin({\n      React: 'react',\n      ReactDOM: 'react-dom',\n    }),\n  ],\n}\n\n// global.d.ts\ndeclare const React: typeof import('react')\ndeclare const ReactDOM: typeof import('react-dom')\n```\n\n- scss 配置 使用 astroturf\n\n```js\n// .babel.config.js\n// https://4catalyzer.github.io/astroturf/setup\nmodule.exports = {\n  plugins: [\n    [\n      \"astroturf/plugin\",\n      {\n        tagName: \"css\",\n        extension: \".scss\",\n        writeFiles: true,\n        getFileName(hostFilePath, pluginsOptions) {\n          console.log(\"hostFilePath\", hostFilePath);\n          const basepath = path.join(\n            path.dirname(hostFilePath),\n            path.basename(hostFilePath, path.extname(hostFilePath))\n          );\n          const relativePath = path.relative(__dirname, basepath);\n          return `.astroturf/extracted_styles/${relativePath}.scss`;\n        },\n      },\n    ],\n  ],\n};\n\n// webpack.config.js\nconfig.rules = [\n  //...\n  {\n    test: /\\.tsx?$/,\n    use: [\n      \"babel-loader\",\n      {\n        loader: \"astroturf/loader\",\n        options: { extension: \".module.scss\" },\n      },\n      \"ts-loader\",\n    ],\n  },\n];\n```\n\n- 部分优化工作\n\n1. splitChunks\n\n```js\nconst config = {\n  //...\n  optimization: {\n    minimize: true,\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          name: \"vendors\",\n          // 匹配react相关的包 合并\n          test: /[\\\\/]node_modules[\\\\/](react|react-.*)[\\\\/]/,\n          chunks: \"all\",\n        },\n      },\n    },\n  },\n};\n```\n\n2. 缩小路径，减少打包时索引时间\n\n```js\nconst config = {\n  // ...\n  module: {\n    // ...\n    rules: [\n      // ...\n      {\n        test: /\\.s[ac]ss$/i,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n        // 确认是否只在src目录里面有引入scss文件\n        // 如果在node_module内也引入了需要单独加上\n        // 或者不设置\n        include: path.join(__dirname, \"../src\"),\n      },\n    ],\n  },\n};\n```\n\n3. 其他\n\n- 使用 webpack-bundle-analyzer 对具体情况进行分析，根据文件使用情况可以选择 cdn 或者合并等方式\n","source":"_posts/webpackBuild.md","raw":"---\ntitle: webpack搭建\nsubtitle: 从0开始搭建一个webpack+react+typescript环境\ncategories: webpack\ntags: webpack\n---\n\n<!--\n  name: webpack搭建\n  description: 从0开始搭建一个webpack+react+typescript环境\n-->\n\n## 从 0 开始搭建一个 webpack+react+typescript 环境\n\n1. 基础配置\n\n```js\nconst config = {\n  entry: {\n    // 入口文件, 可以是相对路径或绝对路径\n    main: \"./src/index.js\",\n  },\n  output: {\n    // 输出的文件名\n    filename: \"[name].js\",\n    // 输入路径 必须是绝对路径\n    path: path.resolve(__dirname, \"../dist\"),\n  },\n};\n```\n\n2. loaders 静态资源， css\n\n```js\nconst generateLoaders = () => {\n  return [\n    // webpack 5 静态资源可以直接 使用type assets 设置\n    {\n      test: /\\.(png|jpe?g|gif|ico|bmp)$/i,\n      type: \"asset\",\n      parser: {\n        dataUrlCondition: {\n          maxSize: 10 * 1024,\n        },\n      },\n      generator: {\n        filename: \"images/[hash][ext][query]\",\n      },\n    },\n    {\n      test: /\\.s[ac]ss$/i,\n      use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n    },\n  ];\n};\n```\n\n3. ts 配置\n\n- 增加一个 tsconfig.json 文件，它包含了输入文件列表以及编译选项\n\n```json\n{\n  \"exclude\": [\"dist\", \"node_modules\"],\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"module\": \"esnext\",\n    \"target\": \"esnext\",\n    \"sourceMap\": true,\n    \"strict\": true,\n    \"moduleResolution\": \"node\",\n    \"forceConsistentCasingInFileNames\": true,\n    \"noImplicitReturns\": true,\n    \"noUnusedLocals\": true,\n    \"noUncheckedIndexedAccess\": false,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    // 没有export default的文件 可以使用 import * as  DefaultModule 的方式引入文件\n    \"allowSyntheticDefaultImports\": true,\n    // 允许引入js\n    \"allowJs\": true,\n    // 允许引入json文件\n    \"resolveJsonModule\": true\n  }\n}\n```\n\n- loader 增加 ts 支持\n\n```js\nconst generateLoaders = () => {\n  return [\n    // ...\n    {\n      test: /\\.tsx?$/,\n      use: [\n        {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\"@babel/preset-env\"],\n          },\n        },\n        \"ts-loader\",\n      ],\n    },\n  ];\n};\n```\n\n- 其他配置项 React ReactDOM 快捷引入(免去每个文件 import)\n\n```js\n// webpack.config.js\nconst config = {\n  // ...\n  plugins: [\n    // 这里需要在ts文件内全局定义React和ReactDOM\n    new webpack.ProvidePlugin({\n      React: 'react',\n      ReactDOM: 'react-dom',\n    }),\n  ],\n}\n\n// global.d.ts\ndeclare const React: typeof import('react')\ndeclare const ReactDOM: typeof import('react-dom')\n```\n\n- scss 配置 使用 astroturf\n\n```js\n// .babel.config.js\n// https://4catalyzer.github.io/astroturf/setup\nmodule.exports = {\n  plugins: [\n    [\n      \"astroturf/plugin\",\n      {\n        tagName: \"css\",\n        extension: \".scss\",\n        writeFiles: true,\n        getFileName(hostFilePath, pluginsOptions) {\n          console.log(\"hostFilePath\", hostFilePath);\n          const basepath = path.join(\n            path.dirname(hostFilePath),\n            path.basename(hostFilePath, path.extname(hostFilePath))\n          );\n          const relativePath = path.relative(__dirname, basepath);\n          return `.astroturf/extracted_styles/${relativePath}.scss`;\n        },\n      },\n    ],\n  ],\n};\n\n// webpack.config.js\nconfig.rules = [\n  //...\n  {\n    test: /\\.tsx?$/,\n    use: [\n      \"babel-loader\",\n      {\n        loader: \"astroturf/loader\",\n        options: { extension: \".module.scss\" },\n      },\n      \"ts-loader\",\n    ],\n  },\n];\n```\n\n- 部分优化工作\n\n1. splitChunks\n\n```js\nconst config = {\n  //...\n  optimization: {\n    minimize: true,\n    splitChunks: {\n      cacheGroups: {\n        commons: {\n          name: \"vendors\",\n          // 匹配react相关的包 合并\n          test: /[\\\\/]node_modules[\\\\/](react|react-.*)[\\\\/]/,\n          chunks: \"all\",\n        },\n      },\n    },\n  },\n};\n```\n\n2. 缩小路径，减少打包时索引时间\n\n```js\nconst config = {\n  // ...\n  module: {\n    // ...\n    rules: [\n      // ...\n      {\n        test: /\\.s[ac]ss$/i,\n        use: [\"style-loader\", \"css-loader\", \"sass-loader\"],\n        // 确认是否只在src目录里面有引入scss文件\n        // 如果在node_module内也引入了需要单独加上\n        // 或者不设置\n        include: path.join(__dirname, \"../src\"),\n      },\n    ],\n  },\n};\n```\n\n3. 其他\n\n- 使用 webpack-bundle-analyzer 对具体情况进行分析，根据文件使用情况可以选择 cdn 或者合并等方式\n","slug":"webpackBuild","published":1,"date":"2021-08-21T05:22:51.798Z","updated":"2021-08-21T05:22:51.798Z","_id":"ckslbu2d3001ksq3q1jxsf4ja","comments":1,"layout":"post","photos":[],"link":"","content":"<!--\n  name: webpack搭建\n  description: 从0开始搭建一个webpack+react+typescript环境\n-->\n\n<h2 id=\"从-0-开始搭建一个-webpack-react-typescript-环境\"><a href=\"#从-0-开始搭建一个-webpack-react-typescript-环境\" class=\"headerlink\" title=\"从 0 开始搭建一个 webpack+react+typescript 环境\"></a>从 0 开始搭建一个 webpack+react+typescript 环境</h2><ol>\n<li>基础配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件, 可以是相对路径或绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">main</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件名</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输入路径 必须是绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&quot;../dist&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>loaders 静态资源， css</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateLoaders = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"comment\">// webpack 5 静态资源可以直接 使用type assets 设置</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|ico|bmp)$/i</span>,</span><br><span class=\"line\">      type: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;images/[hash][ext][query]&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/i</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>ts 配置</li>\n</ol>\n<ul>\n<li>增加一个 tsconfig.json 文件，它包含了输入文件列表以及编译选项</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;dist&quot;</span>, <span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;react&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedLocals&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUncheckedIndexedAccess&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;suppressImplicitAnyIndexErrors&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;emitDecoratorMetadata&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;experimentalDecorators&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 没有export default的文件 可以使用 import * as  DefaultModule 的方式引入文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;allowSyntheticDefaultImports&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 允许引入js</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;allowJs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 允许引入json文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>loader 增加 ts 支持</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateLoaders = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;ts-loader&quot;</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他配置项 React ReactDOM 快捷引入(免去每个文件 import)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 这里需要在ts文件内全局定义React和ReactDOM</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      <span class=\"attr\">React</span>: <span class=\"string\">&#x27;react&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">ReactDOM</span>: <span class=\"string\">&#x27;react-dom&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global.d.ts</span></span><br><span class=\"line\">declare <span class=\"keyword\">const</span> React: <span class=\"keyword\">typeof</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;react&#x27;</span>)</span><br><span class=\"line\">declare <span class=\"keyword\">const</span> ReactDOM: <span class=\"keyword\">typeof</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;react-dom&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>scss 配置 使用 astroturf</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babel.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// https://4catalyzer.github.io/astroturf/setup</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">&quot;astroturf/plugin&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">tagName</span>: <span class=\"string\">&quot;css&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">extension</span>: <span class=\"string\">&quot;.scss&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">writeFiles</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">getFileName</span>(<span class=\"params\">hostFilePath, pluginsOptions</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hostFilePath&quot;</span>, hostFilePath);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> basepath = path.join(</span><br><span class=\"line\">            path.dirname(hostFilePath),</span><br><span class=\"line\">            path.basename(hostFilePath, path.extname(hostFilePath))</span><br><span class=\"line\">          );</span><br><span class=\"line\">          <span class=\"keyword\">const</span> relativePath = path.relative(__dirname, basepath);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">`.astroturf/extracted_styles/<span class=\"subst\">$&#123;relativePath&#125;</span>.scss`</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">config.rules = [</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;astroturf/loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123; <span class=\"attr\">extension</span>: <span class=\"string\">&quot;.module.scss&quot;</span> &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-loader&quot;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部分优化工作</li>\n</ul>\n<ol>\n<li>splitChunks</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">commons</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;vendors&quot;</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 匹配react相关的包 合并</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/](react|react-.*)[\\\\/]/</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>缩小路径，减少打包时索引时间</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/i</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 确认是否只在src目录里面有引入scss文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果在node_module内也引入了需要单独加上</span></span><br><span class=\"line\">        <span class=\"comment\">// 或者不设置</span></span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.join(__dirname, <span class=\"string\">&quot;../src&quot;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>其他</li>\n</ol>\n<ul>\n<li>使用 webpack-bundle-analyzer 对具体情况进行分析，根据文件使用情况可以选择 cdn 或者合并等方式</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<!--\n  name: webpack搭建\n  description: 从0开始搭建一个webpack+react+typescript环境\n-->\n\n<h2 id=\"从-0-开始搭建一个-webpack-react-typescript-环境\"><a href=\"#从-0-开始搭建一个-webpack-react-typescript-环境\" class=\"headerlink\" title=\"从 0 开始搭建一个 webpack+react+typescript 环境\"></a>从 0 开始搭建一个 webpack+react+typescript 环境</h2><ol>\n<li>基础配置</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"attr\">entry</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 入口文件, 可以是相对路径或绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">main</span>: <span class=\"string\">&quot;./src/index.js&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 输出的文件名</span></span><br><span class=\"line\">    <span class=\"attr\">filename</span>: <span class=\"string\">&quot;[name].js&quot;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 输入路径 必须是绝对路径</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: path.resolve(__dirname, <span class=\"string\">&quot;../dist&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>loaders 静态资源， css</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateLoaders = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"comment\">// webpack 5 静态资源可以直接 使用type assets 设置</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpe?g|gif|ico|bmp)$/i</span>,</span><br><span class=\"line\">      type: <span class=\"string\">&quot;asset&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">parser</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">dataUrlCondition</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">maxSize</span>: <span class=\"number\">10</span> * <span class=\"number\">1024</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">generator</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;images/[hash][ext][query]&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/i</span>,</span><br><span class=\"line\">      use: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>ts 配置</li>\n</ol>\n<ul>\n<li>增加一个 tsconfig.json 文件，它包含了输入文件列表以及编译选项</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;exclude&quot;</span>: [<span class=\"string\">&quot;dist&quot;</span>, <span class=\"string\">&quot;node_modules&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;jsx&quot;</span>: <span class=\"string\">&quot;react&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span>: <span class=\"string\">&quot;esnext&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span>: <span class=\"string\">&quot;node&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noImplicitReturns&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUnusedLocals&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;noUncheckedIndexedAccess&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;suppressImplicitAnyIndexErrors&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;emitDecoratorMetadata&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;experimentalDecorators&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 没有export default的文件 可以使用 import * as  DefaultModule 的方式引入文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;allowSyntheticDefaultImports&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 允许引入js</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;allowJs&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 允许引入json文件</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>loader 增加 ts 支持</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> generateLoaders = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">      use: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">loader</span>: <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">presets</span>: [<span class=\"string\">&quot;@babel/preset-env&quot;</span>],</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;ts-loader&quot;</span>,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其他配置项 React ReactDOM 快捷引入(免去每个文件 import)</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 这里需要在ts文件内全局定义React和ReactDOM</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.ProvidePlugin(&#123;</span><br><span class=\"line\">      <span class=\"attr\">React</span>: <span class=\"string\">&#x27;react&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">ReactDOM</span>: <span class=\"string\">&#x27;react-dom&#x27;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// global.d.ts</span></span><br><span class=\"line\">declare <span class=\"keyword\">const</span> React: <span class=\"keyword\">typeof</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;react&#x27;</span>)</span><br><span class=\"line\">declare <span class=\"keyword\">const</span> ReactDOM: <span class=\"keyword\">typeof</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;react-dom&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>scss 配置 使用 astroturf</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .babel.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// https://4catalyzer.github.io/astroturf/setup</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">&quot;astroturf/plugin&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">tagName</span>: <span class=\"string\">&quot;css&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">extension</span>: <span class=\"string\">&quot;.scss&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">writeFiles</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">getFileName</span>(<span class=\"params\">hostFilePath, pluginsOptions</span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hostFilePath&quot;</span>, hostFilePath);</span><br><span class=\"line\">          <span class=\"keyword\">const</span> basepath = path.join(</span><br><span class=\"line\">            path.dirname(hostFilePath),</span><br><span class=\"line\">            path.basename(hostFilePath, path.extname(hostFilePath))</span><br><span class=\"line\">          );</span><br><span class=\"line\">          <span class=\"keyword\">const</span> relativePath = path.relative(__dirname, basepath);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"string\">`.astroturf/extracted_styles/<span class=\"subst\">$&#123;relativePath&#125;</span>.scss`</span>;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">config.rules = [</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.tsx?$/</span>,</span><br><span class=\"line\">    use: [</span><br><span class=\"line\">      <span class=\"string\">&quot;babel-loader&quot;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">loader</span>: <span class=\"string\">&quot;astroturf/loader&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">options</span>: &#123; <span class=\"attr\">extension</span>: <span class=\"string\">&quot;.module.scss&quot;</span> &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"string\">&quot;ts-loader&quot;</span>,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>部分优化工作</li>\n</ul>\n<ol>\n<li>splitChunks</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  <span class=\"attr\">optimization</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">minimize</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">splitChunks</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">cacheGroups</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">commons</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">name</span>: <span class=\"string\">&quot;vendors&quot;</span>,</span><br><span class=\"line\">          <span class=\"comment\">// 匹配react相关的包 合并</span></span><br><span class=\"line\">          <span class=\"attr\">test</span>: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/](react|react-.*)[\\\\/]/</span>,</span><br><span class=\"line\">          chunks: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>缩小路径，减少打包时索引时间</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.s[ac]ss$/i</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">&quot;style-loader&quot;</span>, <span class=\"string\">&quot;css-loader&quot;</span>, <span class=\"string\">&quot;sass-loader&quot;</span>],</span><br><span class=\"line\">        <span class=\"comment\">// 确认是否只在src目录里面有引入scss文件</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果在node_module内也引入了需要单独加上</span></span><br><span class=\"line\">        <span class=\"comment\">// 或者不设置</span></span><br><span class=\"line\">        <span class=\"attr\">include</span>: path.join(__dirname, <span class=\"string\">&quot;../src&quot;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>其他</li>\n</ol>\n<ul>\n<li>使用 webpack-bundle-analyzer 对具体情况进行分析，根据文件使用情况可以选择 cdn 或者合并等方式</li>\n</ul>\n"},{"title":"webpack构建流程","subtitle":"webpack构建流程解析","_content":"\n## 整体流程\n\n1. 开始运行 Webpack。\n\n- 读取与合并参数，加载 plugin。\n- 实例化 Compiler(编译器)。\n\n```js\n// webpack 5 部分源码解读\nconst webpack = (options, callback) => {\n  const create = () => {\n    // 检查，读取与合并参数\n    if (!webpackOptionsSchemaCheck(options)) {\n      getValidateSchema()(webpackOptionsSchema, options);\n    }\n    let compiler;\n    let watch = false;\n    let watchOptions;\n    if (Array.isArray(options)) {\n      compiler = createMultiCompiler(options, options);\n      watch = options.some((options) => options.watch);\n      watchOptions = options.map((options) => options.watchOptions || {});\n    } else {\n      const webpackOptions = options;\n      // 创建 编译器 实例\n      compiler = createCompiler(webpackOptions);\n      watch = webpackOptions.watch;\n      watchOptions = webpackOptions.watchOptions || {};\n    }\n    return { compiler, watch, watchOptions };\n  };\n  if (callback) {\n    try {\n      const { compiler, watch, watchOptions } = create();\n      if (watch) {\n        // 开始编译 并监听\n        compiler.watch(watchOptions, callback);\n      } else {\n        // 开始编译\n        compiler.run((err, stats) => {\n          compiler.close((err2) => {\n            callback(err || err2, stats);\n          });\n        });\n      }\n      return compiler;\n    } catch (err) {\n      process.nextTick(() => callback(err));\n      return null;\n    }\n  } else {\n    const { compiler, watch } = create();\n    if (watch) {\n      util.deprecate(\n        () => {},\n        \"A 'callback' argument needs to be provided to the 'webpack(options, callback)' function when the 'watch' option is set. There is no way to handle the 'watch' option without a callback.\",\n        \"DEP_WEBPACK_WATCH_WITHOUT_CALLBACK\"\n      )();\n    }\n    return compiler;\n  }\n};\n\n// 创建编译器\nconst createCompiler = (rawOptions) => {\n  const options = getNormalizedWebpackOptions(rawOptions);\n  applyWebpackOptionsBaseDefaults(options);\n  const compiler = new Compiler(options.context);\n  compiler.options = options;\n  // 对文件做了处理，重新封装node.js 对fs模块做了以一些处理，文件的输入，输出，缓存，监听等\n  new NodeEnvironmentPlugin({\n    infrastructureLogging: options.infrastructureLogging,\n  }).apply(compiler);\n  // 加载plugin, 将 compiler 实例 传给每个plugin\n  if (Array.isArray(options.plugins)) {\n    for (const plugin of options.plugins) {\n      if (typeof plugin === \"function\") {\n        plugin.call(compiler, compiler);\n      } else {\n        plugin.apply(compiler);\n      }\n    }\n  }\n  // 应用参数 context devtools target mode ...\n  applyWebpackOptionsDefaults(options);\n  // 触发hook 在准备环境之前运行插件。\n  compiler.hooks.environment.call();\n  // 触发hook 执行插件环境设置完成。\n  compiler.hooks.afterEnvironment.call();\n  // 应用各类中间件\n  new WebpackOptionsApply().process(options, compiler);\n  // 触发hook 编译器对象被初始化\n  compiler.hooks.initialize.call();\n  return compiler;\n};\n```\n\n- compiler.run 开始编译(这里先分享单入口的情况)\n\n```javascript\n// 1. 编译路径 起始 (webpack.js)\ncompiler.run();\n// 2. 触发 compiler的entryOption hook\n// WebpackOptionsApply 中调用 EntryOptionPlugin().apply()之后设置的hook EntryOptionPlugin.js\ncompiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n  EntryOptionPlugin.applyEntryOption(compiler, context, entry);\n  return true;\n});\n// 3. 触发 compiler的 make hook EntryPlugin.js\n// compiler.compile 内设置的hook\ncompiler.hooks.make.tapAsync(\"EntryPlugin\", (compilation, callback) => {\n  compilation.addEntry(context, dep, options, (err) => {\n    callback(err);\n  });\n});\n// 4. 通过(Compilation.js)addEntry => _addEntryItem => addModuleTree=> handleModuleCreation => addModule => (NormalModule.js)build\n// NormalModule.build 中调用 doBuild方法 然后将代码经过 runLoaders方法 进行转译\nNormalModule.build = function (args, callback) {\n  // ...\n  return this.doBuild(args, () => {\n    // ...\n    try {\n      result = this.parser.parse();\n      handleBuildDone();\n      return callback();\n    } catch (e) {\n      handleParseError(e);\n    }\n  });\n};\n\nNormalModule.doBuild = function (args, callback) {\n  runLoaders(args, () => {\n    return callback();\n  });\n};\n\n// 5. 然后通过parser.parse方法将代码转成ast语法树， 然后接下来对所依赖的对象进行收集\n\n//6. 做Compilation 通过回调中调用 Compilation.seal方法根据依赖关系生成结果代码\n```\n\n-\n\n2. 使用 Parser 分析项目依赖。\n3. 使用 Template 生成结果代码。\n\n## 通过构建 plugin 监听上述各个步骤\n\n```js\nclass WatchModulePlugin {\n  constructor(props) {}\n  /**\n   * @param {Webpack.Compiler} compiler\n   */\n  apply(compiler) {\n    const pluginName = \"WatchModulePlugin\";\n    const hooks = [\n      \"environment\",\n      \"afterEnvironment\",\n      \"initialize\",\n      \"compilation\",\n      \"make\",\n      \"run\",\n      \"entryOption\",\n      \"normalModuleFactory\",\n    ];\n    const compilationHooks = [\n      \"addEntry\",\n      \"seal\",\n      \"buildModule\",\n      \"finishModules\",\n      \"beforeModuleIds\",\n    ];\n    const _this = this;\n\n    function logHook(hook) {\n      console.log(\"hooks-\", hook);\n    }\n\n    function logCompilationHook(compilation) {\n      compilationHooks.forEach((hook) => {\n        compilation.hooks[hook].tap(pluginName, function () {\n          console.log(\"hooks-compilation-\" + hook);\n        });\n      });\n    }\n\n    hooks.forEach(function (hook) {\n      compiler.hooks[hook].tap(\"WatchModulePlugin\", function (compilation) {\n        if (hook === \"compilation\") {\n          logCompilationHook(compilation);\n        }\n        logHook(hook);\n      });\n    });\n  }\n}\n\n/**\n * 输出\nhooks- environment\nhooks- afterEnvironment\nhooks- entryOption\nhooks- initialize\nhooks- run\nhooks- normalModuleFactory\nhooks- compilation\nhooks- make\nhooks-compilation-addEntry\nhooks-compilation-buildModule\nhooks-compilation-buildModule\nhooks-compilation-finishModules\nhooks-compilation-seal\n * \n*/\n```\n","source":"_posts/webpackCompilation.md","raw":"---\ntitle: webpack构建流程\nsubtitle: webpack构建流程解析\ncategories: webpack\ntags: webpack\n---\n\n## 整体流程\n\n1. 开始运行 Webpack。\n\n- 读取与合并参数，加载 plugin。\n- 实例化 Compiler(编译器)。\n\n```js\n// webpack 5 部分源码解读\nconst webpack = (options, callback) => {\n  const create = () => {\n    // 检查，读取与合并参数\n    if (!webpackOptionsSchemaCheck(options)) {\n      getValidateSchema()(webpackOptionsSchema, options);\n    }\n    let compiler;\n    let watch = false;\n    let watchOptions;\n    if (Array.isArray(options)) {\n      compiler = createMultiCompiler(options, options);\n      watch = options.some((options) => options.watch);\n      watchOptions = options.map((options) => options.watchOptions || {});\n    } else {\n      const webpackOptions = options;\n      // 创建 编译器 实例\n      compiler = createCompiler(webpackOptions);\n      watch = webpackOptions.watch;\n      watchOptions = webpackOptions.watchOptions || {};\n    }\n    return { compiler, watch, watchOptions };\n  };\n  if (callback) {\n    try {\n      const { compiler, watch, watchOptions } = create();\n      if (watch) {\n        // 开始编译 并监听\n        compiler.watch(watchOptions, callback);\n      } else {\n        // 开始编译\n        compiler.run((err, stats) => {\n          compiler.close((err2) => {\n            callback(err || err2, stats);\n          });\n        });\n      }\n      return compiler;\n    } catch (err) {\n      process.nextTick(() => callback(err));\n      return null;\n    }\n  } else {\n    const { compiler, watch } = create();\n    if (watch) {\n      util.deprecate(\n        () => {},\n        \"A 'callback' argument needs to be provided to the 'webpack(options, callback)' function when the 'watch' option is set. There is no way to handle the 'watch' option without a callback.\",\n        \"DEP_WEBPACK_WATCH_WITHOUT_CALLBACK\"\n      )();\n    }\n    return compiler;\n  }\n};\n\n// 创建编译器\nconst createCompiler = (rawOptions) => {\n  const options = getNormalizedWebpackOptions(rawOptions);\n  applyWebpackOptionsBaseDefaults(options);\n  const compiler = new Compiler(options.context);\n  compiler.options = options;\n  // 对文件做了处理，重新封装node.js 对fs模块做了以一些处理，文件的输入，输出，缓存，监听等\n  new NodeEnvironmentPlugin({\n    infrastructureLogging: options.infrastructureLogging,\n  }).apply(compiler);\n  // 加载plugin, 将 compiler 实例 传给每个plugin\n  if (Array.isArray(options.plugins)) {\n    for (const plugin of options.plugins) {\n      if (typeof plugin === \"function\") {\n        plugin.call(compiler, compiler);\n      } else {\n        plugin.apply(compiler);\n      }\n    }\n  }\n  // 应用参数 context devtools target mode ...\n  applyWebpackOptionsDefaults(options);\n  // 触发hook 在准备环境之前运行插件。\n  compiler.hooks.environment.call();\n  // 触发hook 执行插件环境设置完成。\n  compiler.hooks.afterEnvironment.call();\n  // 应用各类中间件\n  new WebpackOptionsApply().process(options, compiler);\n  // 触发hook 编译器对象被初始化\n  compiler.hooks.initialize.call();\n  return compiler;\n};\n```\n\n- compiler.run 开始编译(这里先分享单入口的情况)\n\n```javascript\n// 1. 编译路径 起始 (webpack.js)\ncompiler.run();\n// 2. 触发 compiler的entryOption hook\n// WebpackOptionsApply 中调用 EntryOptionPlugin().apply()之后设置的hook EntryOptionPlugin.js\ncompiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n  EntryOptionPlugin.applyEntryOption(compiler, context, entry);\n  return true;\n});\n// 3. 触发 compiler的 make hook EntryPlugin.js\n// compiler.compile 内设置的hook\ncompiler.hooks.make.tapAsync(\"EntryPlugin\", (compilation, callback) => {\n  compilation.addEntry(context, dep, options, (err) => {\n    callback(err);\n  });\n});\n// 4. 通过(Compilation.js)addEntry => _addEntryItem => addModuleTree=> handleModuleCreation => addModule => (NormalModule.js)build\n// NormalModule.build 中调用 doBuild方法 然后将代码经过 runLoaders方法 进行转译\nNormalModule.build = function (args, callback) {\n  // ...\n  return this.doBuild(args, () => {\n    // ...\n    try {\n      result = this.parser.parse();\n      handleBuildDone();\n      return callback();\n    } catch (e) {\n      handleParseError(e);\n    }\n  });\n};\n\nNormalModule.doBuild = function (args, callback) {\n  runLoaders(args, () => {\n    return callback();\n  });\n};\n\n// 5. 然后通过parser.parse方法将代码转成ast语法树， 然后接下来对所依赖的对象进行收集\n\n//6. 做Compilation 通过回调中调用 Compilation.seal方法根据依赖关系生成结果代码\n```\n\n-\n\n2. 使用 Parser 分析项目依赖。\n3. 使用 Template 生成结果代码。\n\n## 通过构建 plugin 监听上述各个步骤\n\n```js\nclass WatchModulePlugin {\n  constructor(props) {}\n  /**\n   * @param {Webpack.Compiler} compiler\n   */\n  apply(compiler) {\n    const pluginName = \"WatchModulePlugin\";\n    const hooks = [\n      \"environment\",\n      \"afterEnvironment\",\n      \"initialize\",\n      \"compilation\",\n      \"make\",\n      \"run\",\n      \"entryOption\",\n      \"normalModuleFactory\",\n    ];\n    const compilationHooks = [\n      \"addEntry\",\n      \"seal\",\n      \"buildModule\",\n      \"finishModules\",\n      \"beforeModuleIds\",\n    ];\n    const _this = this;\n\n    function logHook(hook) {\n      console.log(\"hooks-\", hook);\n    }\n\n    function logCompilationHook(compilation) {\n      compilationHooks.forEach((hook) => {\n        compilation.hooks[hook].tap(pluginName, function () {\n          console.log(\"hooks-compilation-\" + hook);\n        });\n      });\n    }\n\n    hooks.forEach(function (hook) {\n      compiler.hooks[hook].tap(\"WatchModulePlugin\", function (compilation) {\n        if (hook === \"compilation\") {\n          logCompilationHook(compilation);\n        }\n        logHook(hook);\n      });\n    });\n  }\n}\n\n/**\n * 输出\nhooks- environment\nhooks- afterEnvironment\nhooks- entryOption\nhooks- initialize\nhooks- run\nhooks- normalModuleFactory\nhooks- compilation\nhooks- make\nhooks-compilation-addEntry\nhooks-compilation-buildModule\nhooks-compilation-buildModule\nhooks-compilation-finishModules\nhooks-compilation-seal\n * \n*/\n```\n","slug":"webpackCompilation","published":1,"date":"2021-08-21T05:22:51.798Z","updated":"2021-08-21T05:22:51.798Z","_id":"ckslbu2d6001nsq3qfmtodkps","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h2><ol>\n<li>开始运行 Webpack。</li>\n</ol>\n<ul>\n<li>读取与合并参数，加载 plugin。</li>\n<li>实例化 Compiler(编译器)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack 5 部分源码解读</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"function\">(<span class=\"params\">options, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> create = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查，读取与合并参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!webpackOptionsSchemaCheck(options)) &#123;</span><br><span class=\"line\">      getValidateSchema()(webpackOptionsSchema, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> compiler;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> watch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> watchOptions;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(options)) &#123;</span><br><span class=\"line\">      compiler = createMultiCompiler(options, options);</span><br><span class=\"line\">      watch = options.some(<span class=\"function\">(<span class=\"params\">options</span>) =&gt;</span> options.watch);</span><br><span class=\"line\">      watchOptions = options.map(<span class=\"function\">(<span class=\"params\">options</span>) =&gt;</span> options.watchOptions || &#123;&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> webpackOptions = options;</span><br><span class=\"line\">      <span class=\"comment\">// 创建 编译器 实例</span></span><br><span class=\"line\">      compiler = createCompiler(webpackOptions);</span><br><span class=\"line\">      watch = webpackOptions.watch;</span><br><span class=\"line\">      watchOptions = webpackOptions.watchOptions || &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; compiler, watch, watchOptions &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; compiler, watch, watchOptions &#125; = create();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watch) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始编译 并监听</span></span><br><span class=\"line\">        compiler.watch(watchOptions, callback);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始编译</span></span><br><span class=\"line\">        compiler.run(<span class=\"function\">(<span class=\"params\">err, stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          compiler.close(<span class=\"function\">(<span class=\"params\">err2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            callback(err || err2, stats);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      process.nextTick(<span class=\"function\">() =&gt;</span> callback(err));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; compiler, watch &#125; = create();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watch) &#123;</span><br><span class=\"line\">      util.deprecate(</span><br><span class=\"line\">        <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;A &#x27;callback&#x27; argument needs to be provided to the &#x27;webpack(options, callback)&#x27; function when the &#x27;watch&#x27; option is set. There is no way to handle the &#x27;watch&#x27; option without a callback.&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;DEP_WEBPACK_WATCH_WITHOUT_CALLBACK&quot;</span></span><br><span class=\"line\">      )();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建编译器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> createCompiler = <span class=\"function\">(<span class=\"params\">rawOptions</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = getNormalizedWebpackOptions(rawOptions);</span><br><span class=\"line\">  applyWebpackOptionsBaseDefaults(options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> Compiler(options.context);</span><br><span class=\"line\">  compiler.options = options;</span><br><span class=\"line\">  <span class=\"comment\">// 对文件做了处理，重新封装node.js 对fs模块做了以一些处理，文件的输入，输出，缓存，监听等</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> NodeEnvironmentPlugin(&#123;</span><br><span class=\"line\">    <span class=\"attr\">infrastructureLogging</span>: options.infrastructureLogging,</span><br><span class=\"line\">  &#125;).apply(compiler);</span><br><span class=\"line\">  <span class=\"comment\">// 加载plugin, 将 compiler 实例 传给每个plugin</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(options.plugins)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> plugin <span class=\"keyword\">of</span> options.plugins) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        plugin.call(compiler, compiler);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        plugin.apply(compiler);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 应用参数 context devtools target mode ...</span></span><br><span class=\"line\">  applyWebpackOptionsDefaults(options);</span><br><span class=\"line\">  <span class=\"comment\">// 触发hook 在准备环境之前运行插件。</span></span><br><span class=\"line\">  compiler.hooks.environment.call();</span><br><span class=\"line\">  <span class=\"comment\">// 触发hook 执行插件环境设置完成。</span></span><br><span class=\"line\">  compiler.hooks.afterEnvironment.call();</span><br><span class=\"line\">  <span class=\"comment\">// 应用各类中间件</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> WebpackOptionsApply().process(options, compiler);</span><br><span class=\"line\">  <span class=\"comment\">// 触发hook 编译器对象被初始化</span></span><br><span class=\"line\">  compiler.hooks.initialize.call();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>compiler.run 开始编译(这里先分享单入口的情况)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 编译路径 起始 (webpack.js)</span></span><br><span class=\"line\">compiler.run();</span><br><span class=\"line\"><span class=\"comment\">// 2. 触发 compiler的entryOption hook</span></span><br><span class=\"line\"><span class=\"comment\">// WebpackOptionsApply 中调用 EntryOptionPlugin().apply()之后设置的hook EntryOptionPlugin.js</span></span><br><span class=\"line\">compiler.hooks.entryOption.tap(<span class=\"string\">&quot;EntryOptionPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">context, entry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  EntryOptionPlugin.applyEntryOption(compiler, context, entry);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 3. 触发 compiler的 make hook EntryPlugin.js</span></span><br><span class=\"line\"><span class=\"comment\">// compiler.compile 内设置的hook</span></span><br><span class=\"line\">compiler.hooks.make.tapAsync(<span class=\"string\">&quot;EntryPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  compilation.addEntry(context, dep, options, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    callback(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 4. 通过(Compilation.js)addEntry =&gt; _addEntryItem =&gt; addModuleTree=&gt; handleModuleCreation =&gt; addModule =&gt; (NormalModule.js)build</span></span><br><span class=\"line\"><span class=\"comment\">// NormalModule.build 中调用 doBuild方法 然后将代码经过 runLoaders方法 进行转译</span></span><br><span class=\"line\">NormalModule.build = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.doBuild(args, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      result = <span class=\"built_in\">this</span>.parser.parse();</span><br><span class=\"line\">      handleBuildDone();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      handleParseError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">NormalModule.doBuild = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args, callback</span>) </span>&#123;</span><br><span class=\"line\">  runLoaders(args, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. 然后通过parser.parse方法将代码转成ast语法树， 然后接下来对所依赖的对象进行收集</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//6. 做Compilation 通过回调中调用 Compilation.seal方法根据依赖关系生成结果代码</span></span><br></pre></td></tr></table></figure>\n\n<p>-</p>\n<ol start=\"2\">\n<li>使用 Parser 分析项目依赖。</li>\n<li>使用 Template 生成结果代码。</li>\n</ol>\n<h2 id=\"通过构建-plugin-监听上述各个步骤\"><a href=\"#通过构建-plugin-监听上述各个步骤\" class=\"headerlink\" title=\"通过构建 plugin 监听上述各个步骤\"></a>通过构建 plugin 监听上述各个步骤</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WatchModulePlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;Webpack.Compiler&#125;</span> <span class=\"variable\">compiler</span></span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">compiler</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pluginName = <span class=\"string\">&quot;WatchModulePlugin&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hooks = [</span><br><span class=\"line\">      <span class=\"string\">&quot;environment&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;afterEnvironment&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;initialize&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;compilation&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;run&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;entryOption&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;normalModuleFactory&quot;</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compilationHooks = [</span><br><span class=\"line\">      <span class=\"string\">&quot;addEntry&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;seal&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;buildModule&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;finishModules&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;beforeModuleIds&quot;</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logHook</span>(<span class=\"params\">hook</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hooks-&quot;</span>, hook);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logCompilationHook</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\">      compilationHooks.forEach(<span class=\"function\">(<span class=\"params\">hook</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        compilation.hooks[hook].tap(pluginName, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hooks-compilation-&quot;</span> + hook);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hooks.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">hook</span>) </span>&#123;</span><br><span class=\"line\">      compiler.hooks[hook].tap(<span class=\"string\">&quot;WatchModulePlugin&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hook === <span class=\"string\">&quot;compilation&quot;</span>) &#123;</span><br><span class=\"line\">          logCompilationHook(compilation);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logHook(hook);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出</span></span><br><span class=\"line\"><span class=\"comment\">hooks- environment</span></span><br><span class=\"line\"><span class=\"comment\">hooks- afterEnvironment</span></span><br><span class=\"line\"><span class=\"comment\">hooks- entryOption</span></span><br><span class=\"line\"><span class=\"comment\">hooks- initialize</span></span><br><span class=\"line\"><span class=\"comment\">hooks- run</span></span><br><span class=\"line\"><span class=\"comment\">hooks- normalModuleFactory</span></span><br><span class=\"line\"><span class=\"comment\">hooks- compilation</span></span><br><span class=\"line\"><span class=\"comment\">hooks- make</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-addEntry</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-buildModule</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-buildModule</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-finishModules</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-seal</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h2><ol>\n<li>开始运行 Webpack。</li>\n</ol>\n<ul>\n<li>读取与合并参数，加载 plugin。</li>\n<li>实例化 Compiler(编译器)。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack 5 部分源码解读</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"function\">(<span class=\"params\">options, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> create = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 检查，读取与合并参数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!webpackOptionsSchemaCheck(options)) &#123;</span><br><span class=\"line\">      getValidateSchema()(webpackOptionsSchema, options);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> compiler;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> watch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> watchOptions;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(options)) &#123;</span><br><span class=\"line\">      compiler = createMultiCompiler(options, options);</span><br><span class=\"line\">      watch = options.some(<span class=\"function\">(<span class=\"params\">options</span>) =&gt;</span> options.watch);</span><br><span class=\"line\">      watchOptions = options.map(<span class=\"function\">(<span class=\"params\">options</span>) =&gt;</span> options.watchOptions || &#123;&#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> webpackOptions = options;</span><br><span class=\"line\">      <span class=\"comment\">// 创建 编译器 实例</span></span><br><span class=\"line\">      compiler = createCompiler(webpackOptions);</span><br><span class=\"line\">      watch = webpackOptions.watch;</span><br><span class=\"line\">      watchOptions = webpackOptions.watchOptions || &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; compiler, watch, watchOptions &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (callback) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; compiler, watch, watchOptions &#125; = create();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (watch) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始编译 并监听</span></span><br><span class=\"line\">        compiler.watch(watchOptions, callback);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开始编译</span></span><br><span class=\"line\">        compiler.run(<span class=\"function\">(<span class=\"params\">err, stats</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          compiler.close(<span class=\"function\">(<span class=\"params\">err2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            callback(err || err2, stats);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">      process.nextTick(<span class=\"function\">() =&gt;</span> callback(err));</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; compiler, watch &#125; = create();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (watch) &#123;</span><br><span class=\"line\">      util.deprecate(</span><br><span class=\"line\">        <span class=\"function\">() =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;A &#x27;callback&#x27; argument needs to be provided to the &#x27;webpack(options, callback)&#x27; function when the &#x27;watch&#x27; option is set. There is no way to handle the &#x27;watch&#x27; option without a callback.&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;DEP_WEBPACK_WATCH_WITHOUT_CALLBACK&quot;</span></span><br><span class=\"line\">      )();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建编译器</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> createCompiler = <span class=\"function\">(<span class=\"params\">rawOptions</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> options = getNormalizedWebpackOptions(rawOptions);</span><br><span class=\"line\">  applyWebpackOptionsBaseDefaults(options);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> compiler = <span class=\"keyword\">new</span> Compiler(options.context);</span><br><span class=\"line\">  compiler.options = options;</span><br><span class=\"line\">  <span class=\"comment\">// 对文件做了处理，重新封装node.js 对fs模块做了以一些处理，文件的输入，输出，缓存，监听等</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> NodeEnvironmentPlugin(&#123;</span><br><span class=\"line\">    <span class=\"attr\">infrastructureLogging</span>: options.infrastructureLogging,</span><br><span class=\"line\">  &#125;).apply(compiler);</span><br><span class=\"line\">  <span class=\"comment\">// 加载plugin, 将 compiler 实例 传给每个plugin</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(options.plugins)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> plugin <span class=\"keyword\">of</span> options.plugins) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> plugin === <span class=\"string\">&quot;function&quot;</span>) &#123;</span><br><span class=\"line\">        plugin.call(compiler, compiler);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        plugin.apply(compiler);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 应用参数 context devtools target mode ...</span></span><br><span class=\"line\">  applyWebpackOptionsDefaults(options);</span><br><span class=\"line\">  <span class=\"comment\">// 触发hook 在准备环境之前运行插件。</span></span><br><span class=\"line\">  compiler.hooks.environment.call();</span><br><span class=\"line\">  <span class=\"comment\">// 触发hook 执行插件环境设置完成。</span></span><br><span class=\"line\">  compiler.hooks.afterEnvironment.call();</span><br><span class=\"line\">  <span class=\"comment\">// 应用各类中间件</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> WebpackOptionsApply().process(options, compiler);</span><br><span class=\"line\">  <span class=\"comment\">// 触发hook 编译器对象被初始化</span></span><br><span class=\"line\">  compiler.hooks.initialize.call();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> compiler;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>compiler.run 开始编译(这里先分享单入口的情况)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 编译路径 起始 (webpack.js)</span></span><br><span class=\"line\">compiler.run();</span><br><span class=\"line\"><span class=\"comment\">// 2. 触发 compiler的entryOption hook</span></span><br><span class=\"line\"><span class=\"comment\">// WebpackOptionsApply 中调用 EntryOptionPlugin().apply()之后设置的hook EntryOptionPlugin.js</span></span><br><span class=\"line\">compiler.hooks.entryOption.tap(<span class=\"string\">&quot;EntryOptionPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">context, entry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  EntryOptionPlugin.applyEntryOption(compiler, context, entry);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 3. 触发 compiler的 make hook EntryPlugin.js</span></span><br><span class=\"line\"><span class=\"comment\">// compiler.compile 内设置的hook</span></span><br><span class=\"line\">compiler.hooks.make.tapAsync(<span class=\"string\">&quot;EntryPlugin&quot;</span>, <span class=\"function\">(<span class=\"params\">compilation, callback</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  compilation.addEntry(context, dep, options, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    callback(err);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 4. 通过(Compilation.js)addEntry =&gt; _addEntryItem =&gt; addModuleTree=&gt; handleModuleCreation =&gt; addModule =&gt; (NormalModule.js)build</span></span><br><span class=\"line\"><span class=\"comment\">// NormalModule.build 中调用 doBuild方法 然后将代码经过 runLoaders方法 进行转译</span></span><br><span class=\"line\">NormalModule.build = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.doBuild(args, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      result = <span class=\"built_in\">this</span>.parser.parse();</span><br><span class=\"line\">      handleBuildDone();</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      handleParseError(e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">NormalModule.doBuild = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">args, callback</span>) </span>&#123;</span><br><span class=\"line\">  runLoaders(args, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> callback();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5. 然后通过parser.parse方法将代码转成ast语法树， 然后接下来对所依赖的对象进行收集</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//6. 做Compilation 通过回调中调用 Compilation.seal方法根据依赖关系生成结果代码</span></span><br></pre></td></tr></table></figure>\n\n<p>-</p>\n<ol start=\"2\">\n<li>使用 Parser 分析项目依赖。</li>\n<li>使用 Template 生成结果代码。</li>\n</ol>\n<h2 id=\"通过构建-plugin-监听上述各个步骤\"><a href=\"#通过构建-plugin-监听上述各个步骤\" class=\"headerlink\" title=\"通过构建 plugin 监听上述各个步骤\"></a>通过构建 plugin 监听上述各个步骤</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WatchModulePlugin</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param <span class=\"type\">&#123;Webpack.Compiler&#125;</span> <span class=\"variable\">compiler</span></span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">compiler</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> pluginName = <span class=\"string\">&quot;WatchModulePlugin&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hooks = [</span><br><span class=\"line\">      <span class=\"string\">&quot;environment&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;afterEnvironment&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;initialize&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;compilation&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;make&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;run&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;entryOption&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;normalModuleFactory&quot;</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> compilationHooks = [</span><br><span class=\"line\">      <span class=\"string\">&quot;addEntry&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;seal&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;buildModule&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;finishModules&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;beforeModuleIds&quot;</span>,</span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logHook</span>(<span class=\"params\">hook</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hooks-&quot;</span>, hook);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">logCompilationHook</span>(<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\">      compilationHooks.forEach(<span class=\"function\">(<span class=\"params\">hook</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        compilation.hooks[hook].tap(pluginName, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hooks-compilation-&quot;</span> + hook);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hooks.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">hook</span>) </span>&#123;</span><br><span class=\"line\">      compiler.hooks[hook].tap(<span class=\"string\">&quot;WatchModulePlugin&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">compilation</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hook === <span class=\"string\">&quot;compilation&quot;</span>) &#123;</span><br><span class=\"line\">          logCompilationHook(compilation);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        logHook(hook);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 输出</span></span><br><span class=\"line\"><span class=\"comment\">hooks- environment</span></span><br><span class=\"line\"><span class=\"comment\">hooks- afterEnvironment</span></span><br><span class=\"line\"><span class=\"comment\">hooks- entryOption</span></span><br><span class=\"line\"><span class=\"comment\">hooks- initialize</span></span><br><span class=\"line\"><span class=\"comment\">hooks- run</span></span><br><span class=\"line\"><span class=\"comment\">hooks- normalModuleFactory</span></span><br><span class=\"line\"><span class=\"comment\">hooks- compilation</span></span><br><span class=\"line\"><span class=\"comment\">hooks- make</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-addEntry</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-buildModule</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-buildModule</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-finishModules</span></span><br><span class=\"line\"><span class=\"comment\">hooks-compilation-seal</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n"},{"title":"节流和防抖","_content":"\n## 定义\n\n- 防抖(debounce): 触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间。\n- 节流(throttle): 高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行效率。\n\n## 实现\n\n- 基础版\n\n```js\nfunction debounce(fn, timing) {\n  let timer;\n  return function () {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, timing);\n  };\n}\n\nfunction throttle(fn, timing) {\n  let isFnExcuted;\n  return function () {\n    if (isFnExcuted) return;\n    isFnExcuted = true;\n    fn();\n    setTimeout(() => {\n      isFnExcuted = false;\n    }, timing);\n  };\n}\n```\n\n- 保留原函数 this 指针\n\n```js\nfunction debounce(fn, timing) {\n  let timer;\n  return function (...args) {\n    const _this = this;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(_this, args);\n    }, timing);\n  };\n}\n\nfunction throttle(fn, timing) {\n  let isFnExcuted;\n  return function (...args) {\n    const _this = this;\n    if (isFnExcuted) return;\n    isFnExcuted = true;\n    fn.apply(_this, args);\n    setTimeout(() => {\n      isFnExcuted = false;\n    }, timing);\n  };\n}\n```\n\n- 异步函数\n\n```js\nfunction getTimeStamp() {\n  return Date.now();\n}\nconst controlledSleep = {\n  timer: null,\n  sleep: function (time) {\n    const _this = this;\n    return new Promise((resolve) => {\n      _this.timer = setTimeout(() => resolve(), time);\n    });\n  },\n  cancel() {\n    clearTimeout(this.timer);\n    this.timer = null;\n  },\n};\nfunction debounce(fn, timing) {\n  let timer;\n  return async function (...args) {\n    const _this = this;\n    clearTimeout(timer);\n    controlledSleep.cancel();\n    await controlledSleep.sleep(timing);\n    timer = controlledSleep.timer;\n    let startTime = getTimeStamp();\n    await fn.apply(_this, args);\n  };\n}\n```\n\n- 延时前后是否触发(leading, trailing), 设置最大等待时间 ，这里情况比较复杂，暂时不单独讨论， 后面有时间再做详细的实现\n","source":"_posts/节流和防抖.md","raw":"---\ntitle: 节流和防抖\ntags: lodash debounce\ncategories: javascript\n---\n\n## 定义\n\n- 防抖(debounce): 触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间。\n- 节流(throttle): 高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行效率。\n\n## 实现\n\n- 基础版\n\n```js\nfunction debounce(fn, timing) {\n  let timer;\n  return function () {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn();\n    }, timing);\n  };\n}\n\nfunction throttle(fn, timing) {\n  let isFnExcuted;\n  return function () {\n    if (isFnExcuted) return;\n    isFnExcuted = true;\n    fn();\n    setTimeout(() => {\n      isFnExcuted = false;\n    }, timing);\n  };\n}\n```\n\n- 保留原函数 this 指针\n\n```js\nfunction debounce(fn, timing) {\n  let timer;\n  return function (...args) {\n    const _this = this;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(_this, args);\n    }, timing);\n  };\n}\n\nfunction throttle(fn, timing) {\n  let isFnExcuted;\n  return function (...args) {\n    const _this = this;\n    if (isFnExcuted) return;\n    isFnExcuted = true;\n    fn.apply(_this, args);\n    setTimeout(() => {\n      isFnExcuted = false;\n    }, timing);\n  };\n}\n```\n\n- 异步函数\n\n```js\nfunction getTimeStamp() {\n  return Date.now();\n}\nconst controlledSleep = {\n  timer: null,\n  sleep: function (time) {\n    const _this = this;\n    return new Promise((resolve) => {\n      _this.timer = setTimeout(() => resolve(), time);\n    });\n  },\n  cancel() {\n    clearTimeout(this.timer);\n    this.timer = null;\n  },\n};\nfunction debounce(fn, timing) {\n  let timer;\n  return async function (...args) {\n    const _this = this;\n    clearTimeout(timer);\n    controlledSleep.cancel();\n    await controlledSleep.sleep(timing);\n    timer = controlledSleep.timer;\n    let startTime = getTimeStamp();\n    await fn.apply(_this, args);\n  };\n}\n```\n\n- 延时前后是否触发(leading, trailing), 设置最大等待时间 ，这里情况比较复杂，暂时不单独讨论， 后面有时间再做详细的实现\n","slug":"节流和防抖","published":1,"date":"2021-08-21T08:11:55.494Z","updated":"2021-08-21T08:11:55.495Z","_id":"cksle861v001wsq3q8nj71xtw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>防抖(debounce): 触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间。</li>\n<li>节流(throttle): 高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行效率。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ul>\n<li>基础版</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn();</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isFnExcuted;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFnExcuted) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    isFnExcuted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      isFnExcuted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保留原函数 this 指针</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(_this, args);</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isFnExcuted;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFnExcuted) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    isFnExcuted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    fn.apply(_this, args);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      isFnExcuted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>异步函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTimeStamp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> controlledSleep = &#123;</span><br><span class=\"line\">  <span class=\"attr\">timer</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">sleep</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      _this.timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> resolve(), time);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">cancel</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(<span class=\"built_in\">this</span>.timer);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    controlledSleep.cancel();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> controlledSleep.sleep(timing);</span><br><span class=\"line\">    timer = controlledSleep.timer;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime = getTimeStamp();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fn.apply(_this, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>延时前后是否触发(leading, trailing), 设置最大等待时间 ，这里情况比较复杂，暂时不单独讨论， 后面有时间再做详细的实现</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><ul>\n<li>防抖(debounce): 触发高频事件后 n 秒内函数只会执行一次，如果 n 秒内高频事件再次被触发，则重新计算时间。</li>\n<li>节流(throttle): 高频事件触发，但在 n 秒内只会执行一次，所以节流会稀释函数的执行效率。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ul>\n<li>基础版</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      fn();</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isFnExcuted;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFnExcuted) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    isFnExcuted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      isFnExcuted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>保留原函数 this 指针</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      fn.apply(_this, args);</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> isFnExcuted;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isFnExcuted) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    isFnExcuted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    fn.apply(_this, args);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      isFnExcuted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;, timing);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>异步函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTimeStamp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> controlledSleep = &#123;</span><br><span class=\"line\">  <span class=\"attr\">timer</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">sleep</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      _this.timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> resolve(), time);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">cancel</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(<span class=\"built_in\">this</span>.timer);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, timing</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    controlledSleep.cancel();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> controlledSleep.sleep(timing);</span><br><span class=\"line\">    timer = controlledSleep.timer;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> startTime = getTimeStamp();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fn.apply(_this, args);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>延时前后是否触发(leading, trailing), 设置最大等待时间 ，这里情况比较复杂，暂时不单独讨论， 后面有时间再做详细的实现</li>\n</ul>\n"},{"title":"input method editors (IMEs) 输入法输入文字问题","cover":"https://source.unsplash.com/random","_content":"\n使用输入法时(Input Method Editors/IME)\n在 safari 浏览器上与在 chrome/firefox 浏览器上有不同的表现\n导致 keydown 事件触发出问题\n\n# 问题及复现步骤\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"ZEeVyKP\" src=\"https://codepen.io/a417420427/embed/ZEeVyKP?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/a417420427/pen/ZEeVyKP'>ZEeVyKP</a> by a417420427\n  (<a href='https://codepen.io/a417420427'>@a417420427</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n分辩在不同浏览器上观察事件触发时间可以看出\n\n- 在 chrome/firefox 上用户完成非英文输入按下 Enter 键确定输入结果时，先触发了 keydown 事件，然后才触发 compositionend 事件(相隔 0-1ms，应该是一个微任务)\n- 在 safari 上进行同样的操作 会先触发了 compositionend 事件，然后才触发 keydown 事件(相隔 5ms 左右)\n\n# 解决方案\n\n- 监听与 keydown 事件相同容器的 compositionend 事件，记录下时间 compositionEndedAt\n- 在 keydown 事件触发时，查看 isComposing 属性以及在 safari 上判断 keydown 与 compositionEndedAt 的时间差\n\n```javascript\n  class CompositionManager {\n  private compositionEndedAt = -2e8\n\n  isComposing(event: KeyboardEvent): boolean {\n    /** isComposing 表示正在输入中 */\n    if (event.isComposing) return true\n    /** 只针对safari判断事件 */\n    if (getBrowserName() === 'Safari') {\n      const isComposing =\n        Math.abs(event.timeStamp - this.compositionEndedAt) < 500\n      this.compositionEndedAt = -2e8\n      return isComposing\n    }\n    return false\n  }\n\n  constructor(container: HTMLElement) {\n    container.addEventListener('compositionend', (e) => {\n      this.compositionEndedAt = e.timeStamp\n    })\n  }\n}\n\n```\n\n# 参考资料\n\n- https://www.w3.org/TR/uievents/#keys-IME\n- https://github.com/w3c/uievents/issues/202\n- https://github.com/ProseMirror/prosemirror-view/blob/b5420e17f2486e1633a2c06c0a6b25a60b276c5f/src/input.js#L389\n- https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\n","source":"_posts/Ime.md","raw":"---\ntitle: input method editors (IMEs) 输入法输入文字问题\ncover: https://source.unsplash.com/random\n---\n\n使用输入法时(Input Method Editors/IME)\n在 safari 浏览器上与在 chrome/firefox 浏览器上有不同的表现\n导致 keydown 事件触发出问题\n\n# 问题及复现步骤\n\n<iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"ZEeVyKP\" src=\"https://codepen.io/a417420427/embed/ZEeVyKP?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/a417420427/pen/ZEeVyKP'>ZEeVyKP</a> by a417420427\n  (<a href='https://codepen.io/a417420427'>@a417420427</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n分辩在不同浏览器上观察事件触发时间可以看出\n\n- 在 chrome/firefox 上用户完成非英文输入按下 Enter 键确定输入结果时，先触发了 keydown 事件，然后才触发 compositionend 事件(相隔 0-1ms，应该是一个微任务)\n- 在 safari 上进行同样的操作 会先触发了 compositionend 事件，然后才触发 keydown 事件(相隔 5ms 左右)\n\n# 解决方案\n\n- 监听与 keydown 事件相同容器的 compositionend 事件，记录下时间 compositionEndedAt\n- 在 keydown 事件触发时，查看 isComposing 属性以及在 safari 上判断 keydown 与 compositionEndedAt 的时间差\n\n```javascript\n  class CompositionManager {\n  private compositionEndedAt = -2e8\n\n  isComposing(event: KeyboardEvent): boolean {\n    /** isComposing 表示正在输入中 */\n    if (event.isComposing) return true\n    /** 只针对safari判断事件 */\n    if (getBrowserName() === 'Safari') {\n      const isComposing =\n        Math.abs(event.timeStamp - this.compositionEndedAt) < 500\n      this.compositionEndedAt = -2e8\n      return isComposing\n    }\n    return false\n  }\n\n  constructor(container: HTMLElement) {\n    container.addEventListener('compositionend', (e) => {\n      this.compositionEndedAt = e.timeStamp\n    })\n  }\n}\n\n```\n\n# 参考资料\n\n- https://www.w3.org/TR/uievents/#keys-IME\n- https://github.com/w3c/uievents/issues/202\n- https://github.com/ProseMirror/prosemirror-view/blob/b5420e17f2486e1633a2c06c0a6b25a60b276c5f/src/input.js#L389\n- https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\n","slug":"Ime","published":1,"date":"2021-08-21T08:17:27.626Z","updated":"2021-08-21T08:20:29.179Z","_id":"ckslido600020sq3qfg323ilp","comments":1,"layout":"post","photos":[],"link":"","content":"<p>使用输入法时(Input Method Editors/IME)<br>在 safari 浏览器上与在 chrome/firefox 浏览器上有不同的表现<br>导致 keydown 事件触发出问题</p>\n<h1 id=\"问题及复现步骤\"><a href=\"#问题及复现步骤\" class=\"headerlink\" title=\"问题及复现步骤\"></a>问题及复现步骤</h1><iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"ZEeVyKP\" src=\"https://codepen.io/a417420427/embed/ZEeVyKP?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/a417420427/pen/ZEeVyKP'>ZEeVyKP</a> by a417420427\n  (<a href='https://codepen.io/a417420427'>@a417420427</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>分辩在不同浏览器上观察事件触发时间可以看出</p>\n<ul>\n<li>在 chrome/firefox 上用户完成非英文输入按下 Enter 键确定输入结果时，先触发了 keydown 事件，然后才触发 compositionend 事件(相隔 0-1ms，应该是一个微任务)</li>\n<li>在 safari 上进行同样的操作 会先触发了 compositionend 事件，然后才触发 keydown 事件(相隔 5ms 左右)</li>\n</ul>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><ul>\n<li>监听与 keydown 事件相同容器的 compositionend 事件，记录下时间 compositionEndedAt</li>\n<li>在 keydown 事件触发时，查看 isComposing 属性以及在 safari 上判断 keydown 与 compositionEndedAt 的时间差</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositionManager</span> </span>&#123;</span><br><span class=\"line\">  private compositionEndedAt = -<span class=\"number\">2e8</span></span><br><span class=\"line\"></span><br><span class=\"line\">  isComposing(event: KeyboardEvent): boolean &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** isComposing 表示正在输入中 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.isComposing) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">/** 只针对safari判断事件 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getBrowserName() === <span class=\"string\">&#x27;Safari&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isComposing =</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.abs(event.timeStamp - <span class=\"built_in\">this</span>.compositionEndedAt) &lt; <span class=\"number\">500</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.compositionEndedAt = -<span class=\"number\">2e8</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> isComposing</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">container: HTMLElement</span>)</span> &#123;</span><br><span class=\"line\">    container.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.compositionEndedAt = e.timeStamp</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.w3.org/TR/uievents/#keys-IME\">https://www.w3.org/TR/uievents/#keys-IME</a></li>\n<li><a href=\"https://github.com/w3c/uievents/issues/202\">https://github.com/w3c/uievents/issues/202</a></li>\n<li><a href=\"https://github.com/ProseMirror/prosemirror-view/blob/b5420e17f2486e1633a2c06c0a6b25a60b276c5f/src/input.js#L389\">https://github.com/ProseMirror/prosemirror-view/blob/b5420e17f2486e1633a2c06c0a6b25a60b276c5f/src/input.js#L389</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>使用输入法时(Input Method Editors/IME)<br>在 safari 浏览器上与在 chrome/firefox 浏览器上有不同的表现<br>导致 keydown 事件触发出问题</p>\n<h1 id=\"问题及复现步骤\"><a href=\"#问题及复现步骤\" class=\"headerlink\" title=\"问题及复现步骤\"></a>问题及复现步骤</h1><iframe height=\"265\" style=\"width: 100%;\" scrolling=\"no\" title=\"ZEeVyKP\" src=\"https://codepen.io/a417420427/embed/ZEeVyKP?height=265&theme-id=light&default-tab=js,result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/a417420427/pen/ZEeVyKP'>ZEeVyKP</a> by a417420427\n  (<a href='https://codepen.io/a417420427'>@a417420427</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n\n<p>分辩在不同浏览器上观察事件触发时间可以看出</p>\n<ul>\n<li>在 chrome/firefox 上用户完成非英文输入按下 Enter 键确定输入结果时，先触发了 keydown 事件，然后才触发 compositionend 事件(相隔 0-1ms，应该是一个微任务)</li>\n<li>在 safari 上进行同样的操作 会先触发了 compositionend 事件，然后才触发 keydown 事件(相隔 5ms 左右)</li>\n</ul>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><ul>\n<li>监听与 keydown 事件相同容器的 compositionend 事件，记录下时间 compositionEndedAt</li>\n<li>在 keydown 事件触发时，查看 isComposing 属性以及在 safari 上判断 keydown 与 compositionEndedAt 的时间差</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CompositionManager</span> </span>&#123;</span><br><span class=\"line\">  private compositionEndedAt = -<span class=\"number\">2e8</span></span><br><span class=\"line\"></span><br><span class=\"line\">  isComposing(event: KeyboardEvent): boolean &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** isComposing 表示正在输入中 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event.isComposing) <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"comment\">/** 只针对safari判断事件 */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (getBrowserName() === <span class=\"string\">&#x27;Safari&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isComposing =</span><br><span class=\"line\">        <span class=\"built_in\">Math</span>.abs(event.timeStamp - <span class=\"built_in\">this</span>.compositionEndedAt) &lt; <span class=\"number\">500</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.compositionEndedAt = -<span class=\"number\">2e8</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> isComposing</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">container: HTMLElement</span>)</span> &#123;</span><br><span class=\"line\">    container.addEventListener(<span class=\"string\">&#x27;compositionend&#x27;</span>, <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.compositionEndedAt = e.timeStamp</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.w3.org/TR/uievents/#keys-IME\">https://www.w3.org/TR/uievents/#keys-IME</a></li>\n<li><a href=\"https://github.com/w3c/uievents/issues/202\">https://github.com/w3c/uievents/issues/202</a></li>\n<li><a href=\"https://github.com/ProseMirror/prosemirror-view/blob/b5420e17f2486e1633a2c06c0a6b25a60b276c5f/src/input.js#L389\">https://github.com/ProseMirror/prosemirror-view/blob/b5420e17f2486e1633a2c06c0a6b25a60b276c5f/src/input.js#L389</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing\">https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing</a></li>\n</ul>\n"},{"title":"JavaScript实现队列结构","subtitle":"队列的实现及延伸","_content":"\n## 队列简介\n\n队列是是一种受限的线性表，特点为先进先出（FIFO：first in first out）\n\n- 受限之处在于它只允许在表的前端（front）进行删除操作；\n- 在表的后端（rear）进行插入操作；\n\n## 队列实现\n\n1. 基础版本\n\n```js\nfunction Queue() {\n  this.items = [];\n}\n// 向队列尾部添加一个（或多个）新的项\nfunction enqueue(item) {\n  this.items = this.items.concat(item);\n}\n// 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素\nfunction dequeue() {\n  this.items.shift();\n}\n// 返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动\nfunction front() {\n  return this.items[0];\n}\n// 查看队列是否为空\nfunction isEmpty() {\n  return this.items.length === 0;\n}\n// 返回队列包含的元素个数\nfunction size() {\n  return this.items.length;\n}\nQueue.prototype.enqueue = enqueue;\nQueue.prototype.dequeue = dequeue;\nQueue.prototype.isEmpty = isEmpty;\nQueue.prototype.size = size;\nQueue.prototype.front = front;\n```\n\n2. 函数队列\n\n```js\n// 开始运行\n\nfunction isFunction(props) {\n  return Object.prototype.toString.call(props) === \"[object Function]\";\n}\nfunction isArray(props) {\n  return Object.prototype.toString.call(props) === \"[object Array]\";\n}\n\nfunction validateArgs(args) {\n  if (isArray(args)) {\n    return !args.find((arg) => !isFunction(arg));\n  }\n  return isFunction(args);\n}\n// 向队列尾部添加一个（或多个）新的项\nfunction enqueue(item) {\n  if (!validateArgs(item)) {\n    throw new Error(\"参数必须为函数或函数数组\");\n  }\n  this.items = this.items.concat(item);\n}\n\nfunction start() {\n  if (!this.isEmpty()) {\n    this.next();\n  }\n}\nfunction next() {\n  const fn = this.dequeue.apply(this);\n  if (fn) {\n    fn();\n    this.next();\n  }\n}\nQueue.prototype.start = start;\nQueue.prototype.next = next;\n```\n\n3. 异步函数队列\n\n```js\nfunction isAsyncFunction(props) {\n  return Object.prototype.toString.call(props) === \"[object AsyncFunction]\";\n}\n\nasync function next() {\n  const fn = this.dequeue.apply(this);\n  if (fn) {\n    await fn();\n    await this.next();\n  }\n}\n```\n\n4. 异步函数队列-可设置并行执行函数数量\n\n```js\nfunction Queue(options) {\n  this.items = [];\n  this.concurrency = (options && options.concurrency) || 1;\n}\n\nfunction start() {\n  if (!this.isEmpty()) {\n    for (let i = 0; i < this.concurrency; i++) {\n      this.next();\n    }\n  }\n}\n```\n\n4. 使用场景, 见[图片懒加载](/2021/08/21/lazyloadImage/)\n","source":"_posts/queue.md","raw":"---\ntitle: JavaScript实现队列结构\nsubtitle: 队列的实现及延伸\ntags: queue\ncategories: javascript\n---\n\n## 队列简介\n\n队列是是一种受限的线性表，特点为先进先出（FIFO：first in first out）\n\n- 受限之处在于它只允许在表的前端（front）进行删除操作；\n- 在表的后端（rear）进行插入操作；\n\n## 队列实现\n\n1. 基础版本\n\n```js\nfunction Queue() {\n  this.items = [];\n}\n// 向队列尾部添加一个（或多个）新的项\nfunction enqueue(item) {\n  this.items = this.items.concat(item);\n}\n// 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素\nfunction dequeue() {\n  this.items.shift();\n}\n// 返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动\nfunction front() {\n  return this.items[0];\n}\n// 查看队列是否为空\nfunction isEmpty() {\n  return this.items.length === 0;\n}\n// 返回队列包含的元素个数\nfunction size() {\n  return this.items.length;\n}\nQueue.prototype.enqueue = enqueue;\nQueue.prototype.dequeue = dequeue;\nQueue.prototype.isEmpty = isEmpty;\nQueue.prototype.size = size;\nQueue.prototype.front = front;\n```\n\n2. 函数队列\n\n```js\n// 开始运行\n\nfunction isFunction(props) {\n  return Object.prototype.toString.call(props) === \"[object Function]\";\n}\nfunction isArray(props) {\n  return Object.prototype.toString.call(props) === \"[object Array]\";\n}\n\nfunction validateArgs(args) {\n  if (isArray(args)) {\n    return !args.find((arg) => !isFunction(arg));\n  }\n  return isFunction(args);\n}\n// 向队列尾部添加一个（或多个）新的项\nfunction enqueue(item) {\n  if (!validateArgs(item)) {\n    throw new Error(\"参数必须为函数或函数数组\");\n  }\n  this.items = this.items.concat(item);\n}\n\nfunction start() {\n  if (!this.isEmpty()) {\n    this.next();\n  }\n}\nfunction next() {\n  const fn = this.dequeue.apply(this);\n  if (fn) {\n    fn();\n    this.next();\n  }\n}\nQueue.prototype.start = start;\nQueue.prototype.next = next;\n```\n\n3. 异步函数队列\n\n```js\nfunction isAsyncFunction(props) {\n  return Object.prototype.toString.call(props) === \"[object AsyncFunction]\";\n}\n\nasync function next() {\n  const fn = this.dequeue.apply(this);\n  if (fn) {\n    await fn();\n    await this.next();\n  }\n}\n```\n\n4. 异步函数队列-可设置并行执行函数数量\n\n```js\nfunction Queue(options) {\n  this.items = [];\n  this.concurrency = (options && options.concurrency) || 1;\n}\n\nfunction start() {\n  if (!this.isEmpty()) {\n    for (let i = 0; i < this.concurrency; i++) {\n      this.next();\n    }\n  }\n}\n```\n\n4. 使用场景, 见[图片懒加载](/2021/08/21/lazyloadImage/)\n","slug":"queue","published":1,"date":"2021-08-21T10:38:16.000Z","updated":"2021-08-21T11:50:12.867Z","_id":"ckslner0l0021sq3q8dcw8a06","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"队列简介\"><a href=\"#队列简介\" class=\"headerlink\" title=\"队列简介\"></a>队列简介</h2><p>队列是是一种受限的线性表，特点为先进先出（FIFO：first in first out）</p>\n<ul>\n<li>受限之处在于它只允许在表的前端（front）进行删除操作；</li>\n<li>在表的后端（rear）进行插入操作；</li>\n</ul>\n<h2 id=\"队列实现\"><a href=\"#队列实现\" class=\"headerlink\" title=\"队列实现\"></a>队列实现</h2><ol>\n<li>基础版本</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 向队列尾部添加一个（或多个）新的项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueue</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = <span class=\"built_in\">this</span>.items.concat(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dequeue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items.shift();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">front</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查看队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回队列包含的元素个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">size</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Queue.prototype.enqueue = enqueue;</span><br><span class=\"line\">Queue.prototype.dequeue = dequeue;</span><br><span class=\"line\">Queue.prototype.isEmpty = isEmpty;</span><br><span class=\"line\">Queue.prototype.size = size;</span><br><span class=\"line\">Queue.prototype.front = front;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>函数队列</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开始运行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Function]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateArgs</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(args)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !args.find(<span class=\"function\">(<span class=\"params\">arg</span>) =&gt;</span> !isFunction(arg));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isFunction(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 向队列尾部添加一个（或多个）新的项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueue</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!validateArgs(item)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;参数必须为函数或函数数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = <span class=\"built_in\">this</span>.items.concat(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>.dequeue.apply(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn) &#123;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Queue.prototype.start = start;</span><br><span class=\"line\">Queue.prototype.next = next;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>异步函数队列</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAsyncFunction</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object AsyncFunction]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>.dequeue.apply(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fn();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>异步函数队列-可设置并行执行函数数量</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.concurrency = (options &amp;&amp; options.concurrency) || <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.concurrency; i++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用场景, 见<a href=\"/2021/08/21/lazyloadImage/\">图片懒加载</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"队列简介\"><a href=\"#队列简介\" class=\"headerlink\" title=\"队列简介\"></a>队列简介</h2><p>队列是是一种受限的线性表，特点为先进先出（FIFO：first in first out）</p>\n<ul>\n<li>受限之处在于它只允许在表的前端（front）进行删除操作；</li>\n<li>在表的后端（rear）进行插入操作；</li>\n</ul>\n<h2 id=\"队列实现\"><a href=\"#队列实现\" class=\"headerlink\" title=\"队列实现\"></a>队列实现</h2><ol>\n<li>基础版本</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 向队列尾部添加一个（或多个）新的项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueue</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = <span class=\"built_in\">this</span>.items.concat(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 移除队列的第一（即排在队列最前面的）项，并返回被移除的元素</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dequeue</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items.shift();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回队列中的第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">front</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 查看队列是否为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmpty</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length === <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 返回队列包含的元素个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">size</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.items.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Queue.prototype.enqueue = enqueue;</span><br><span class=\"line\">Queue.prototype.dequeue = dequeue;</span><br><span class=\"line\">Queue.prototype.isEmpty = isEmpty;</span><br><span class=\"line\">Queue.prototype.size = size;</span><br><span class=\"line\">Queue.prototype.front = front;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>函数队列</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开始运行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFunction</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Function]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isArray</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object Array]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateArgs</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isArray(args)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !args.find(<span class=\"function\">(<span class=\"params\">arg</span>) =&gt;</span> !isFunction(arg));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> isFunction(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 向队列尾部添加一个（或多个）新的项</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">enqueue</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!validateArgs(item)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;参数必须为函数或函数数组&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = <span class=\"built_in\">this</span>.items.concat(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>.dequeue.apply(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn) &#123;</span><br><span class=\"line\">    fn();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Queue.prototype.start = start;</span><br><span class=\"line\">Queue.prototype.next = next;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>异步函数队列</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isAsyncFunction</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(props) === <span class=\"string\">&quot;[object AsyncFunction]&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = <span class=\"built_in\">this</span>.dequeue.apply(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fn) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> fn();</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>异步函数队列-可设置并行执行函数数量</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Queue</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.items = [];</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.concurrency = (options &amp;&amp; options.concurrency) || <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.isEmpty()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">this</span>.concurrency; i++) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>使用场景, 见<a href=\"/2021/08/21/lazyloadImage/\">图片懒加载</a></li>\n</ol>\n"},{"title":"使用队列进行图片并行懒加载","_content":"\n## 多张图片并行加载\n\n1. 需求： 之前碰到过这样的需求， 展示图片列表。 由于后端的请求有并行数量限制， 每次最多请求 5 张， 所有图片加载的时候邀请每次只能加载 5 张， 每次加载完一张之后才能继续加载下一张\n\n2. 解决方式 这边使用的队列方法在[这里](http://localhost:4000/2021/08/21/queue/)\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"\" src=\"https://codepen.io/a417420427/embed/KKqPgyG?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/a417420427/pen/KKqPgyG\">\n  </a> by a417420427 (<a href=\"https://codepen.io/a417420427\">@a417420427</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n```js\nimport Queue from \"https://cdn.skypack.dev/@a417420427/queue\";\n\nfunction render(ele) {\n  const queue = new Queue({ concurrency: 5 });\n  const links = getLinks();\n  links.forEach((link) => {\n    // 将图片加载的方法加入队列\n    // 加载完成resolve\n    queue.push(function () {\n      return new Promise((resolve) => {\n        const image = createImage(link);\n        image.onload = function () {\n          resolve();\n          console.log(\"load image end\");\n        };\n        image.onerror = function () {\n          resolve();\n          console.log(\"load image error\");\n        };\n        console.log(\"load image start\");\n        ele.appendChild(image);\n      });\n    });\n  });\n  queue.start();\n}\nconst ele = document.querySelector(\"#app\");\n\nfunction createImage(url) {\n  const image = new Image(40, 40);\n  image.src = url;\n  return image;\n}\n// 获取图片地址列表\nfunction getLinks() {\n  const urls = new Array(10)\n    .fill(\"\")\n    .map(\n      (_, index) =>\n        \"https://blogs.zxueping.com/img/images\" +\n        (index >= 9 ? index + 1 : \"0\" + (index + 1)) +\n        \".jpg\"\n    );\n  return urls;\n}\n\nrender(ele);\n```\n\n-\n","source":"_posts/lazyloadImage.md","raw":"---\ntitle: 使用队列进行图片并行懒加载\ntags: lazyload\ncategories: javascript\n---\n\n## 多张图片并行加载\n\n1. 需求： 之前碰到过这样的需求， 展示图片列表。 由于后端的请求有并行数量限制， 每次最多请求 5 张， 所有图片加载的时候邀请每次只能加载 5 张， 每次加载完一张之后才能继续加载下一张\n\n2. 解决方式 这边使用的队列方法在[这里](http://localhost:4000/2021/08/21/queue/)\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"\" src=\"https://codepen.io/a417420427/embed/KKqPgyG?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href=\"https://codepen.io/a417420427/pen/KKqPgyG\">\n  </a> by a417420427 (<a href=\"https://codepen.io/a417420427\">@a417420427</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.\n</iframe>\n\n```js\nimport Queue from \"https://cdn.skypack.dev/@a417420427/queue\";\n\nfunction render(ele) {\n  const queue = new Queue({ concurrency: 5 });\n  const links = getLinks();\n  links.forEach((link) => {\n    // 将图片加载的方法加入队列\n    // 加载完成resolve\n    queue.push(function () {\n      return new Promise((resolve) => {\n        const image = createImage(link);\n        image.onload = function () {\n          resolve();\n          console.log(\"load image end\");\n        };\n        image.onerror = function () {\n          resolve();\n          console.log(\"load image error\");\n        };\n        console.log(\"load image start\");\n        ele.appendChild(image);\n      });\n    });\n  });\n  queue.start();\n}\nconst ele = document.querySelector(\"#app\");\n\nfunction createImage(url) {\n  const image = new Image(40, 40);\n  image.src = url;\n  return image;\n}\n// 获取图片地址列表\nfunction getLinks() {\n  const urls = new Array(10)\n    .fill(\"\")\n    .map(\n      (_, index) =>\n        \"https://blogs.zxueping.com/img/images\" +\n        (index >= 9 ? index + 1 : \"0\" + (index + 1)) +\n        \".jpg\"\n    );\n  return urls;\n}\n\nrender(ele);\n```\n\n-\n","slug":"lazyloadImage","published":1,"date":"2021-08-21T11:47:55.319Z","updated":"2021-08-21T14:15:07.305Z","_id":"ckslpwc250000ub9kfrdbfejs","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"多张图片并行加载\"><a href=\"#多张图片并行加载\" class=\"headerlink\" title=\"多张图片并行加载\"></a>多张图片并行加载</h2><ol>\n<li><p>需求： 之前碰到过这样的需求， 展示图片列表。 由于后端的请求有并行数量限制， 每次最多请求 5 张， 所有图片加载的时候邀请每次只能加载 5 张， 每次加载完一张之后才能继续加载下一张</p>\n</li>\n<li><p>解决方式 这边使用的队列方法在<a href=\"http://localhost:4000/2021/08/21/queue/\">这里</a></p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"\" src=\"https://codepen.io/a417420427/embed/KKqPgyG?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\nSee the Pen <a href=\"https://codepen.io/a417420427/pen/KKqPgyG\">\n</a> by a417420427 (<a href=\"https://codepen.io/a417420427\">@a417420427</a>)\non <a href=\"https://codepen.io\">CodePen</a>.\n</iframe></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Queue <span class=\"keyword\">from</span> <span class=\"string\">&quot;https://cdn.skypack.dev/@a417420427/queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> Queue(&#123; <span class=\"attr\">concurrency</span>: <span class=\"number\">5</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> links = getLinks();</span><br><span class=\"line\">  links.forEach(<span class=\"function\">(<span class=\"params\">link</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将图片加载的方法加入队列</span></span><br><span class=\"line\">    <span class=\"comment\">// 加载完成resolve</span></span><br><span class=\"line\">    queue.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> image = createImage(link);</span><br><span class=\"line\">        image.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;load image end&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        image.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;load image error&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;load image start&quot;</span>);</span><br><span class=\"line\">        ele.appendChild(image);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  queue.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#app&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createImage</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image(<span class=\"number\">40</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">  image.src = url;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取图片地址列表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLinks</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> urls = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">    .fill(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    .map(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">_, index</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;https://blogs.zxueping.com/img/images&quot;</span> +</span><br><span class=\"line\">        (index &gt;= <span class=\"number\">9</span> ? index + <span class=\"number\">1</span> : <span class=\"string\">&quot;0&quot;</span> + (index + <span class=\"number\">1</span>)) +</span><br><span class=\"line\">        <span class=\"string\">&quot;.jpg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> urls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(ele);</span><br></pre></td></tr></table></figure>\n\n<p>-</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"多张图片并行加载\"><a href=\"#多张图片并行加载\" class=\"headerlink\" title=\"多张图片并行加载\"></a>多张图片并行加载</h2><ol>\n<li><p>需求： 之前碰到过这样的需求， 展示图片列表。 由于后端的请求有并行数量限制， 每次最多请求 5 张， 所有图片加载的时候邀请每次只能加载 5 张， 每次加载完一张之后才能继续加载下一张</p>\n</li>\n<li><p>解决方式 这边使用的队列方法在<a href=\"http://localhost:4000/2021/08/21/queue/\">这里</a></p>\n<iframe height=\"300\" style=\"width: 100%;\" scrolling=\"no\" title=\"\" src=\"https://codepen.io/a417420427/embed/KKqPgyG?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\nSee the Pen <a href=\"https://codepen.io/a417420427/pen/KKqPgyG\">\n</a> by a417420427 (<a href=\"https://codepen.io/a417420427\">@a417420427</a>)\non <a href=\"https://codepen.io\">CodePen</a>.\n</iframe></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Queue <span class=\"keyword\">from</span> <span class=\"string\">&quot;https://cdn.skypack.dev/@a417420427/queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\">ele</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = <span class=\"keyword\">new</span> Queue(&#123; <span class=\"attr\">concurrency</span>: <span class=\"number\">5</span> &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> links = getLinks();</span><br><span class=\"line\">  links.forEach(<span class=\"function\">(<span class=\"params\">link</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将图片加载的方法加入队列</span></span><br><span class=\"line\">    <span class=\"comment\">// 加载完成resolve</span></span><br><span class=\"line\">    queue.push(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> image = createImage(link);</span><br><span class=\"line\">        image.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;load image end&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        image.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;load image error&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;load image start&quot;</span>);</span><br><span class=\"line\">        ele.appendChild(image);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  queue.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ele = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#app&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createImage</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> Image(<span class=\"number\">40</span>, <span class=\"number\">40</span>);</span><br><span class=\"line\">  image.src = url;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 获取图片地址列表</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getLinks</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> urls = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">    .fill(<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">    .map(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">_, index</span>) =&gt;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;https://blogs.zxueping.com/img/images&quot;</span> +</span><br><span class=\"line\">        (index &gt;= <span class=\"number\">9</span> ? index + <span class=\"number\">1</span> : <span class=\"string\">&quot;0&quot;</span> + (index + <span class=\"number\">1</span>)) +</span><br><span class=\"line\">        <span class=\"string\">&quot;.jpg&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  <span class=\"keyword\">return</span> urls;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">render(ele);</span><br></pre></td></tr></table></figure>\n\n<p>-</p>\n"},{"title":"文件/文件夹拖拽上传实现","_content":"\n## 相关事件\n\n1. dragenter 拖拽进目标区域\n2. dragover 拖拽经过目标区域\n3. drop 拖拽结束\n\n## 实现\n\n1. 确定相关事件\n\n```js\nfunction dragFiles(el) {\n  const dragenter = function (e) {\n    // 阻止浏览器的默认事件， 不然拖拽结束后会直接在浏览器打开文件/文件夹\n    e.preventDefault();\n  };\n  const dragover = function (e) {\n    e.preventDefault();\n  };\n  const drop = function (e) {\n    e.preventDefault();\n  };\n\n  el.addEventListener(\"dragenter\", dragenter);\n  el.addEventListener(\"dragover\", dragover);\n  el.addEventListener(\"drop\", drop);\n}\n```\n\n2. 读取文件\n\n```js\nconst drop = async function (e) {\n  e.preventDefault();\n  const dropFiles = await readDropFiles();\n};\n\nasync function readDropFiles(e) {\n  // 保存读取到的文件 包括文件本身和文件路径\n  const dropFiles = [];\n  // 获取所有入口\n  const entries = savedEntries(e);\n\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    dropFiles = dropFiles.concat(await readEntry(entry));\n  }\n  return dropFiles;\n}\n\n// https://stackoverflow.com/questions/28487352/dragndrop-datatransfer-getdata-empty/28487486\n// 保存入口 由于 DataTransfer 只在 drop的时间段存在, 所以需要提前收集文件信息\nfunction savedEntries(e) {\n  //const entries: FileEntry[] = []\n  const items = e.dataTransfer && e.dataTransfer.items;\n  if (!items) {\n    return [];\n  }\n  return Array.from(items).map((item) => item.webkitGetAsEntry());\n}\n\n// 读取文件入口 提取文件\nasync function readFileEntrySync(entry) {\n  return new Promise((resolve) => {\n    entry.file((file) => {\n      resolve(file);\n    });\n  });\n}\n// 读取文件夹入口 单独提取入口\nasync function readDirEntrySync(entry) {\n  return new Promise((resolve) => {\n    const fileEntries = [];\n    const dirReader = entry.createReader();\n    dirReader.readEntries((entries) => {\n      entries.forEach((entry) => {\n        fileEntries.push(entry);\n      });\n      resolve(fileEntries);\n    });\n  });\n}\n\n// 读取入口, 判断入口是文件还是文件夹\nasync function readEntry(fileEntry) {\n  let files = [];\n  if (fileEntry.isFile) {\n    const file = await readFileEntrySync(fileEntry);\n    files.push({\n      file,\n      fullPath: fileEntry.fullPath,\n    });\n  } else if (fileEntry.isDirectory) {\n    const fileEntries = await readDirEntrySync(fileEntry);\n    for (let i = 0; i < fileEntries.length; i++) {\n      const entry = fileEntries[i];\n      files = files.concat(await readEntry(entry));\n    }\n  }\n  return files;\n}\n```\n\n3. 展示文件\n\n```js\nfunction renderFiles(el, dropFiles) {\n  const container = document.createElement(\"div\");\n  dropFiles.forEach((dropFile) => {\n    const fileEle = document.createElement(\"div\");\n    fileEle.innerHTML = `文件路径: ${dropFile.fullPath}/${dropFile.file.name}`;\n  });\n  el.appendChild(container);\n}\n\nrenderFiles(document.quertSelector(\".drag-info\"));\n```\n\n## [线上 demo](https://blog.zxueping.com/dist/index.html#/Sample)\n","source":"_posts/dragFile.md","raw":"---\ntitle: 文件/文件夹拖拽上传实现\ncategories: javascript\ntags: 拖拽上传 dragevent\n---\n\n## 相关事件\n\n1. dragenter 拖拽进目标区域\n2. dragover 拖拽经过目标区域\n3. drop 拖拽结束\n\n## 实现\n\n1. 确定相关事件\n\n```js\nfunction dragFiles(el) {\n  const dragenter = function (e) {\n    // 阻止浏览器的默认事件， 不然拖拽结束后会直接在浏览器打开文件/文件夹\n    e.preventDefault();\n  };\n  const dragover = function (e) {\n    e.preventDefault();\n  };\n  const drop = function (e) {\n    e.preventDefault();\n  };\n\n  el.addEventListener(\"dragenter\", dragenter);\n  el.addEventListener(\"dragover\", dragover);\n  el.addEventListener(\"drop\", drop);\n}\n```\n\n2. 读取文件\n\n```js\nconst drop = async function (e) {\n  e.preventDefault();\n  const dropFiles = await readDropFiles();\n};\n\nasync function readDropFiles(e) {\n  // 保存读取到的文件 包括文件本身和文件路径\n  const dropFiles = [];\n  // 获取所有入口\n  const entries = savedEntries(e);\n\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    dropFiles = dropFiles.concat(await readEntry(entry));\n  }\n  return dropFiles;\n}\n\n// https://stackoverflow.com/questions/28487352/dragndrop-datatransfer-getdata-empty/28487486\n// 保存入口 由于 DataTransfer 只在 drop的时间段存在, 所以需要提前收集文件信息\nfunction savedEntries(e) {\n  //const entries: FileEntry[] = []\n  const items = e.dataTransfer && e.dataTransfer.items;\n  if (!items) {\n    return [];\n  }\n  return Array.from(items).map((item) => item.webkitGetAsEntry());\n}\n\n// 读取文件入口 提取文件\nasync function readFileEntrySync(entry) {\n  return new Promise((resolve) => {\n    entry.file((file) => {\n      resolve(file);\n    });\n  });\n}\n// 读取文件夹入口 单独提取入口\nasync function readDirEntrySync(entry) {\n  return new Promise((resolve) => {\n    const fileEntries = [];\n    const dirReader = entry.createReader();\n    dirReader.readEntries((entries) => {\n      entries.forEach((entry) => {\n        fileEntries.push(entry);\n      });\n      resolve(fileEntries);\n    });\n  });\n}\n\n// 读取入口, 判断入口是文件还是文件夹\nasync function readEntry(fileEntry) {\n  let files = [];\n  if (fileEntry.isFile) {\n    const file = await readFileEntrySync(fileEntry);\n    files.push({\n      file,\n      fullPath: fileEntry.fullPath,\n    });\n  } else if (fileEntry.isDirectory) {\n    const fileEntries = await readDirEntrySync(fileEntry);\n    for (let i = 0; i < fileEntries.length; i++) {\n      const entry = fileEntries[i];\n      files = files.concat(await readEntry(entry));\n    }\n  }\n  return files;\n}\n```\n\n3. 展示文件\n\n```js\nfunction renderFiles(el, dropFiles) {\n  const container = document.createElement(\"div\");\n  dropFiles.forEach((dropFile) => {\n    const fileEle = document.createElement(\"div\");\n    fileEle.innerHTML = `文件路径: ${dropFile.fullPath}/${dropFile.file.name}`;\n  });\n  el.appendChild(container);\n}\n\nrenderFiles(document.quertSelector(\".drag-info\"));\n```\n\n## [线上 demo](https://blog.zxueping.com/dist/index.html#/Sample)\n","slug":"dragFile","published":1,"date":"2021-08-22T06:57:08.994Z","updated":"2021-08-22T11:15:51.115Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksn47hd80000ff9kddx7huu2","content":"<h2 id=\"相关事件\"><a href=\"#相关事件\" class=\"headerlink\" title=\"相关事件\"></a>相关事件</h2><ol>\n<li>dragenter 拖拽进目标区域</li>\n<li>dragover 拖拽经过目标区域</li>\n<li>drop 拖拽结束</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ol>\n<li>确定相关事件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragFiles</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragenter = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 阻止浏览器的默认事件， 不然拖拽结束后会直接在浏览器打开文件/文件夹</span></span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> drop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  el.addEventListener(<span class=\"string\">&quot;dragenter&quot;</span>, dragenter);</span><br><span class=\"line\">  el.addEventListener(<span class=\"string\">&quot;dragover&quot;</span>, dragover);</span><br><span class=\"line\">  el.addEventListener(<span class=\"string\">&quot;drop&quot;</span>, drop);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>读取文件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> drop = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dropFiles = <span class=\"keyword\">await</span> readDropFiles();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readDropFiles</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保存读取到的文件 包括文件本身和文件路径</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dropFiles = [];</span><br><span class=\"line\">  <span class=\"comment\">// 获取所有入口</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entries = savedEntries(e);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; entries.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = entries[i];</span><br><span class=\"line\">    dropFiles = dropFiles.concat(<span class=\"keyword\">await</span> readEntry(entry));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dropFiles;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://stackoverflow.com/questions/28487352/dragndrop-datatransfer-getdata-empty/28487486</span></span><br><span class=\"line\"><span class=\"comment\">// 保存入口 由于 DataTransfer 只在 drop的时间段存在, 所以需要提前收集文件信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">savedEntries</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//const entries: FileEntry[] = []</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> items = e.dataTransfer &amp;&amp; e.dataTransfer.items;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(items).map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.webkitGetAsEntry());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取文件入口 提取文件</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFileEntrySync</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    entry.file(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 读取文件夹入口 单独提取入口</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readDirEntrySync</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileEntries = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dirReader = entry.createReader();</span><br><span class=\"line\">    dirReader.readEntries(<span class=\"function\">(<span class=\"params\">entries</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      entries.forEach(<span class=\"function\">(<span class=\"params\">entry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fileEntries.push(entry);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      resolve(fileEntries);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取入口, 判断入口是文件还是文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readEntry</span>(<span class=\"params\">fileEntry</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> files = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fileEntry.isFile) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = <span class=\"keyword\">await</span> readFileEntrySync(fileEntry);</span><br><span class=\"line\">    files.push(&#123;</span><br><span class=\"line\">      file,</span><br><span class=\"line\">      <span class=\"attr\">fullPath</span>: fileEntry.fullPath,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fileEntry.isDirectory) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileEntries = <span class=\"keyword\">await</span> readDirEntrySync(fileEntry);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; fileEntries.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> entry = fileEntries[i];</span><br><span class=\"line\">      files = files.concat(<span class=\"keyword\">await</span> readEntry(entry));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> files;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>展示文件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderFiles</span>(<span class=\"params\">el, dropFiles</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  dropFiles.forEach(<span class=\"function\">(<span class=\"params\">dropFile</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileEle = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">    fileEle.innerHTML = <span class=\"string\">`文件路径: <span class=\"subst\">$&#123;dropFile.fullPath&#125;</span>/<span class=\"subst\">$&#123;dropFile.file.name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  el.appendChild(container);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">renderFiles(<span class=\"built_in\">document</span>.quertSelector(<span class=\"string\">&quot;.drag-info&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线上-demo\"><a href=\"#线上-demo\" class=\"headerlink\" title=\"线上 demo\"></a><a href=\"https://blog.zxueping.com/dist/index.html#/Sample\">线上 demo</a></h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"相关事件\"><a href=\"#相关事件\" class=\"headerlink\" title=\"相关事件\"></a>相关事件</h2><ol>\n<li>dragenter 拖拽进目标区域</li>\n<li>dragover 拖拽经过目标区域</li>\n<li>drop 拖拽结束</li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ol>\n<li>确定相关事件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragFiles</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragenter = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 阻止浏览器的默认事件， 不然拖拽结束后会直接在浏览器打开文件/文件夹</span></span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dragover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> drop = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e.preventDefault();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  el.addEventListener(<span class=\"string\">&quot;dragenter&quot;</span>, dragenter);</span><br><span class=\"line\">  el.addEventListener(<span class=\"string\">&quot;dragover&quot;</span>, dragover);</span><br><span class=\"line\">  el.addEventListener(<span class=\"string\">&quot;drop&quot;</span>, drop);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>读取文件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> drop = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dropFiles = <span class=\"keyword\">await</span> readDropFiles();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readDropFiles</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 保存读取到的文件 包括文件本身和文件路径</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> dropFiles = [];</span><br><span class=\"line\">  <span class=\"comment\">// 获取所有入口</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> entries = savedEntries(e);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; entries.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> entry = entries[i];</span><br><span class=\"line\">    dropFiles = dropFiles.concat(<span class=\"keyword\">await</span> readEntry(entry));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> dropFiles;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://stackoverflow.com/questions/28487352/dragndrop-datatransfer-getdata-empty/28487486</span></span><br><span class=\"line\"><span class=\"comment\">// 保存入口 由于 DataTransfer 只在 drop的时间段存在, 所以需要提前收集文件信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">savedEntries</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//const entries: FileEntry[] = []</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> items = e.dataTransfer &amp;&amp; e.dataTransfer.items;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(items).map(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.webkitGetAsEntry());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取文件入口 提取文件</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFileEntrySync</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    entry.file(<span class=\"function\">(<span class=\"params\">file</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      resolve(file);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 读取文件夹入口 单独提取入口</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readDirEntrySync</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileEntries = [];</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dirReader = entry.createReader();</span><br><span class=\"line\">    dirReader.readEntries(<span class=\"function\">(<span class=\"params\">entries</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      entries.forEach(<span class=\"function\">(<span class=\"params\">entry</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        fileEntries.push(entry);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      resolve(fileEntries);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取入口, 判断入口是文件还是文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readEntry</span>(<span class=\"params\">fileEntry</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> files = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fileEntry.isFile) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = <span class=\"keyword\">await</span> readFileEntrySync(fileEntry);</span><br><span class=\"line\">    files.push(&#123;</span><br><span class=\"line\">      file,</span><br><span class=\"line\">      <span class=\"attr\">fullPath</span>: fileEntry.fullPath,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (fileEntry.isDirectory) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileEntries = <span class=\"keyword\">await</span> readDirEntrySync(fileEntry);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; fileEntries.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> entry = fileEntries[i];</span><br><span class=\"line\">      files = files.concat(<span class=\"keyword\">await</span> readEntry(entry));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> files;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>展示文件</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderFiles</span>(<span class=\"params\">el, dropFiles</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  dropFiles.forEach(<span class=\"function\">(<span class=\"params\">dropFile</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileEle = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">    fileEle.innerHTML = <span class=\"string\">`文件路径: <span class=\"subst\">$&#123;dropFile.fullPath&#125;</span>/<span class=\"subst\">$&#123;dropFile.file.name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  el.appendChild(container);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">renderFiles(<span class=\"built_in\">document</span>.quertSelector(<span class=\"string\">&quot;.drag-info&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线上-demo\"><a href=\"#线上-demo\" class=\"headerlink\" title=\"线上 demo\"></a><a href=\"https://blog.zxueping.com/dist/index.html#/Sample\">线上 demo</a></h2>"},{"title":"函数柯里化","_content":"\n## 定义\n\n在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\n```js\nfunction sample(arg1, arg2, arg3) {\n  return arg1 + arg2 + arg3;\n}\n\nconst currySample = curry(sample);\n// 返回结果同 sample(arg1, arg2, arg3)\ncurrySample(arg1)(arg2)(arg3);\n```\n\n## 实现\n\n1. 基础版本 这个是比较常见的实现版本\n\n```js\nfunction curry() {\n  let args = [].slice.call(arguments, 1);\n  const fn = args.shift();\n  return function () {\n    const newArgs = args.concat([].slice.call(arguments));\n    return fn.apply(this, newArgs);\n  };\n}\n```\n\n2. 灵活传参版本\n\n```js\nfunction curry() {\n  let args = Array.from(arguments);\n  const fn = args.shift();\n  const length = fn.length;\n  if (canbeExcute()) {\n    return execute();\n  }\n\n  return curryFn;\n\n  function curryFn(...argsInner) {\n    args = args.concat(argsInner);\n    if (canbeExcute()) {\n      return execute();\n    }\n    return curryFn;\n  }\n  function execute() {\n    return fn.apply(this, args);\n  }\n  function canbeExcute() {\n    return args.length >= length;\n  }\n}\n```\n\n## 用途\n\n1. 参数复用， 避免重复传参\n\n```js\n// 需要在容器内添加元素时可以直接使用appendToContainer\nfunction append(container, el) {\n  container.appendChild(el);\n}\nconst appendToContainer = curry(append, container);\n```\n\n2. 提前返回，延时执行， 避免重复判断\n\n```js\n// 如果只有在邮箱出错的情况下才验证错误， 可以提前将邮箱验证前置。\nfunction validate(name, age, mail) {\n  if (!validateName(name)) {\n    // handle\n  }\n  if (validateAge(age)) {\n    // handle\n  }\n  if (validateMail(email)) {\n    return false;\n  }\n}\n\nfunction validatePriorityEmail(email, callback) {\n  // 将邮箱验证单独提出来\n  return validateMail(mail) && callback();\n}\n\nconst validateWithoutEmail = curry(validatePriorityEmail)(email);\n\nvalidateWithoutEmail(validate(name, age));\nvalidateWithoutEmail(validate(name, age));\n```\n\n## 其他\n\n这里涉及到部分偏函数的功能， 偏函数和柯里化的区别其实可以理解成部分和全部的区别\n柯里化是将一个 n 元函数转换成 n 个一元函数\n偏函数则是将一个 n 元函数转换成一个 n - x 元\n柯里化可以理解成自动版的偏函数，\n这里的灵活传参版更像是一个偏函数，这里就不做过多论述\n","source":"_posts/functionCurrying.md","raw":"---\ntitle: 函数柯里化\ntags: 函数 柯里化\ncategories: javascript\n---\n\n## 定义\n\n在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。\n\n```js\nfunction sample(arg1, arg2, arg3) {\n  return arg1 + arg2 + arg3;\n}\n\nconst currySample = curry(sample);\n// 返回结果同 sample(arg1, arg2, arg3)\ncurrySample(arg1)(arg2)(arg3);\n```\n\n## 实现\n\n1. 基础版本 这个是比较常见的实现版本\n\n```js\nfunction curry() {\n  let args = [].slice.call(arguments, 1);\n  const fn = args.shift();\n  return function () {\n    const newArgs = args.concat([].slice.call(arguments));\n    return fn.apply(this, newArgs);\n  };\n}\n```\n\n2. 灵活传参版本\n\n```js\nfunction curry() {\n  let args = Array.from(arguments);\n  const fn = args.shift();\n  const length = fn.length;\n  if (canbeExcute()) {\n    return execute();\n  }\n\n  return curryFn;\n\n  function curryFn(...argsInner) {\n    args = args.concat(argsInner);\n    if (canbeExcute()) {\n      return execute();\n    }\n    return curryFn;\n  }\n  function execute() {\n    return fn.apply(this, args);\n  }\n  function canbeExcute() {\n    return args.length >= length;\n  }\n}\n```\n\n## 用途\n\n1. 参数复用， 避免重复传参\n\n```js\n// 需要在容器内添加元素时可以直接使用appendToContainer\nfunction append(container, el) {\n  container.appendChild(el);\n}\nconst appendToContainer = curry(append, container);\n```\n\n2. 提前返回，延时执行， 避免重复判断\n\n```js\n// 如果只有在邮箱出错的情况下才验证错误， 可以提前将邮箱验证前置。\nfunction validate(name, age, mail) {\n  if (!validateName(name)) {\n    // handle\n  }\n  if (validateAge(age)) {\n    // handle\n  }\n  if (validateMail(email)) {\n    return false;\n  }\n}\n\nfunction validatePriorityEmail(email, callback) {\n  // 将邮箱验证单独提出来\n  return validateMail(mail) && callback();\n}\n\nconst validateWithoutEmail = curry(validatePriorityEmail)(email);\n\nvalidateWithoutEmail(validate(name, age));\nvalidateWithoutEmail(validate(name, age));\n```\n\n## 其他\n\n这里涉及到部分偏函数的功能， 偏函数和柯里化的区别其实可以理解成部分和全部的区别\n柯里化是将一个 n 元函数转换成 n 个一元函数\n偏函数则是将一个 n 元函数转换成一个 n - x 元\n柯里化可以理解成自动版的偏函数，\n这里的灵活传参版更像是一个偏函数，这里就不做过多论述\n","slug":"functionCurrying","published":1,"date":"2021-08-21T14:39:49.247Z","updated":"2021-08-22T06:52:11.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksn47hdi0001ff9k7eri2mkq","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sample</span>(<span class=\"params\">arg1, arg2, arg3</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg1 + arg2 + arg3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> currySample = curry(sample);</span><br><span class=\"line\"><span class=\"comment\">// 返回结果同 sample(arg1, arg2, arg3)</span></span><br><span class=\"line\">currySample(arg1)(arg2)(arg3);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ol>\n<li>基础版本 这个是比较常见的实现版本</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = args.shift();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newArgs = args.concat([].slice.call(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"built_in\">this</span>, newArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>灵活传参版本</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = args.shift();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = fn.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (canbeExcute()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> execute();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> curryFn;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryFn</span>(<span class=\"params\">...argsInner</span>) </span>&#123;</span><br><span class=\"line\">    args = args.concat(argsInner);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canbeExcute()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curryFn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"built_in\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canbeExcute</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.length &gt;= length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><ol>\n<li>参数复用， 避免重复传参</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要在容器内添加元素时可以直接使用appendToContainer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">container, el</span>) </span>&#123;</span><br><span class=\"line\">  container.appendChild(el);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> appendToContainer = curry(append, container);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>提前返回，延时执行， 避免重复判断</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果只有在邮箱出错的情况下才验证错误， 可以提前将邮箱验证前置。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">name, age, mail</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!validateName(name)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validateAge(age)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validateMail(email)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePriorityEmail</span>(<span class=\"params\">email, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将邮箱验证单独提出来</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> validateMail(mail) &amp;&amp; callback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validateWithoutEmail = curry(validatePriorityEmail)(email);</span><br><span class=\"line\"></span><br><span class=\"line\">validateWithoutEmail(validate(name, age));</span><br><span class=\"line\">validateWithoutEmail(validate(name, age));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>这里涉及到部分偏函数的功能， 偏函数和柯里化的区别其实可以理解成部分和全部的区别<br>柯里化是将一个 n 元函数转换成 n 个一元函数<br>偏函数则是将一个 n 元函数转换成一个 n - x 元<br>柯里化可以理解成自动版的偏函数，<br>这里的灵活传参版更像是一个偏函数，这里就不做过多论述</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sample</span>(<span class=\"params\">arg1, arg2, arg3</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg1 + arg2 + arg3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> currySample = curry(sample);</span><br><span class=\"line\"><span class=\"comment\">// 返回结果同 sample(arg1, arg2, arg3)</span></span><br><span class=\"line\">currySample(arg1)(arg2)(arg3);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><ol>\n<li>基础版本 这个是比较常见的实现版本</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = [].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = args.shift();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newArgs = args.concat([].slice.call(<span class=\"built_in\">arguments</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"built_in\">this</span>, newArgs);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>灵活传参版本</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curry</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fn = args.shift();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = fn.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (canbeExcute()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> execute();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> curryFn;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">curryFn</span>(<span class=\"params\">...argsInner</span>) </span>&#123;</span><br><span class=\"line\">    args = args.concat(argsInner);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (canbeExcute()) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> curryFn;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">execute</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"built_in\">this</span>, args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canbeExcute</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> args.length &gt;= length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><ol>\n<li>参数复用， 避免重复传参</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 需要在容器内添加元素时可以直接使用appendToContainer</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">append</span>(<span class=\"params\">container, el</span>) </span>&#123;</span><br><span class=\"line\">  container.appendChild(el);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> appendToContainer = curry(append, container);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>提前返回，延时执行， 避免重复判断</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果只有在邮箱出错的情况下才验证错误， 可以提前将邮箱验证前置。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validate</span>(<span class=\"params\">name, age, mail</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!validateName(name)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validateAge(age)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validateMail(email)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePriorityEmail</span>(<span class=\"params\">email, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 将邮箱验证单独提出来</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> validateMail(mail) &amp;&amp; callback();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> validateWithoutEmail = curry(validatePriorityEmail)(email);</span><br><span class=\"line\"></span><br><span class=\"line\">validateWithoutEmail(validate(name, age));</span><br><span class=\"line\">validateWithoutEmail(validate(name, age));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>这里涉及到部分偏函数的功能， 偏函数和柯里化的区别其实可以理解成部分和全部的区别<br>柯里化是将一个 n 元函数转换成 n 个一元函数<br>偏函数则是将一个 n 元函数转换成一个 n - x 元<br>柯里化可以理解成自动版的偏函数，<br>这里的灵活传参版更像是一个偏函数，这里就不做过多论述</p>\n"},{"title":"蒙特卡洛方法 Monte Carlo method","_content":"\n## 蒙特卡洛方法基本思想\n\n- 常蒙特卡罗方法可以粗略地分成两类：\n\n1. 所求解的问题本身具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程。\n2. 所求解问题可以转化为某种随机分布的特征数，比如随机事件出现的概率，或者随机变量的期望值。通过随机抽样的方法，以随机事件出现的频率估计其概率，或者以抽样的数字特征估算随机变量的数字特征，并将其作为问题的解。\n\n### 一个经典的用蒙特卡洛方法求 π 值\n\n- 基本思路\n\n1. 正方形内部有一个相切的圆，它们的面积之比是 π/4\n2. 正方形内部，随机产生 n 个点，计算它们与中心点的距离，并且判断是否落在圆的内部\n3. 若这些点均匀分布，则圆周率 pi=4 \\* num/n (num 表示落到圆内投点数，n 表示总的投点数）\n\n```js\n// 根据正方形\nfunction getPi(count) {\n  let num = 0;\n  for (let i = 0; i < count; i++) {\n    // 在一个边长为2的正方形内随机投放点\n    let x = randomLocation(-1, 1);\n    let y = randomLocation(-1, 1);\n    // x,y 到中心的距离小于1 则在圆内\n    if (Math.pow(x) + Math.pow(y) < 1) {\n      num++;\n    }\n  }\n  return (num * 4.0) / count;\n}\n// 范围内随机投放某个点\n// 所有投放的点概率相同\nfunction randomLocation(min, max) {\n  return min + Math.random() * (max - min);\n}\n```\n","source":"_posts/MonteCarlomethod.md","raw":"---\ntitle: 蒙特卡洛方法 Monte Carlo method\ncategories: 算法\n---\n\n## 蒙特卡洛方法基本思想\n\n- 常蒙特卡罗方法可以粗略地分成两类：\n\n1. 所求解的问题本身具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程。\n2. 所求解问题可以转化为某种随机分布的特征数，比如随机事件出现的概率，或者随机变量的期望值。通过随机抽样的方法，以随机事件出现的频率估计其概率，或者以抽样的数字特征估算随机变量的数字特征，并将其作为问题的解。\n\n### 一个经典的用蒙特卡洛方法求 π 值\n\n- 基本思路\n\n1. 正方形内部有一个相切的圆，它们的面积之比是 π/4\n2. 正方形内部，随机产生 n 个点，计算它们与中心点的距离，并且判断是否落在圆的内部\n3. 若这些点均匀分布，则圆周率 pi=4 \\* num/n (num 表示落到圆内投点数，n 表示总的投点数）\n\n```js\n// 根据正方形\nfunction getPi(count) {\n  let num = 0;\n  for (let i = 0; i < count; i++) {\n    // 在一个边长为2的正方形内随机投放点\n    let x = randomLocation(-1, 1);\n    let y = randomLocation(-1, 1);\n    // x,y 到中心的距离小于1 则在圆内\n    if (Math.pow(x) + Math.pow(y) < 1) {\n      num++;\n    }\n  }\n  return (num * 4.0) / count;\n}\n// 范围内随机投放某个点\n// 所有投放的点概率相同\nfunction randomLocation(min, max) {\n  return min + Math.random() * (max - min);\n}\n```\n","slug":"MonteCarlomethod","published":1,"date":"2021-08-23T05:34:56.688Z","updated":"2021-08-24T07:48:15.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1g0fb8g0000us9kb2nv3z45","content":"<h2 id=\"蒙特卡洛方法基本思想\"><a href=\"#蒙特卡洛方法基本思想\" class=\"headerlink\" title=\"蒙特卡洛方法基本思想\"></a>蒙特卡洛方法基本思想</h2><ul>\n<li>常蒙特卡罗方法可以粗略地分成两类：</li>\n</ul>\n<ol>\n<li>所求解的问题本身具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程。</li>\n<li>所求解问题可以转化为某种随机分布的特征数，比如随机事件出现的概率，或者随机变量的期望值。通过随机抽样的方法，以随机事件出现的频率估计其概率，或者以抽样的数字特征估算随机变量的数字特征，并将其作为问题的解。</li>\n</ol>\n<h3 id=\"一个经典的用蒙特卡洛方法求-π-值\"><a href=\"#一个经典的用蒙特卡洛方法求-π-值\" class=\"headerlink\" title=\"一个经典的用蒙特卡洛方法求 π 值\"></a>一个经典的用蒙特卡洛方法求 π 值</h3><ul>\n<li>基本思路</li>\n</ul>\n<ol>\n<li>正方形内部有一个相切的圆，它们的面积之比是 π/4</li>\n<li>正方形内部，随机产生 n 个点，计算它们与中心点的距离，并且判断是否落在圆的内部</li>\n<li>若这些点均匀分布，则圆周率 pi=4 * num/n (num 表示落到圆内投点数，n 表示总的投点数）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据正方形</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPi</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在一个边长为2的正方形内随机投放点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = randomLocation(-<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = randomLocation(-<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// x,y 到中心的距离小于1 则在圆内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.pow(x) + <span class=\"built_in\">Math</span>.pow(y) &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      num++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (num * <span class=\"number\">4.0</span>) / count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 范围内随机投放某个点</span></span><br><span class=\"line\"><span class=\"comment\">// 所有投放的点概率相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomLocation</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.random() * (max - min);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"蒙特卡洛方法基本思想\"><a href=\"#蒙特卡洛方法基本思想\" class=\"headerlink\" title=\"蒙特卡洛方法基本思想\"></a>蒙特卡洛方法基本思想</h2><ul>\n<li>常蒙特卡罗方法可以粗略地分成两类：</li>\n</ul>\n<ol>\n<li>所求解的问题本身具有内在的随机性，借助计算机的运算能力可以直接模拟这种随机的过程。</li>\n<li>所求解问题可以转化为某种随机分布的特征数，比如随机事件出现的概率，或者随机变量的期望值。通过随机抽样的方法，以随机事件出现的频率估计其概率，或者以抽样的数字特征估算随机变量的数字特征，并将其作为问题的解。</li>\n</ol>\n<h3 id=\"一个经典的用蒙特卡洛方法求-π-值\"><a href=\"#一个经典的用蒙特卡洛方法求-π-值\" class=\"headerlink\" title=\"一个经典的用蒙特卡洛方法求 π 值\"></a>一个经典的用蒙特卡洛方法求 π 值</h3><ul>\n<li>基本思路</li>\n</ul>\n<ol>\n<li>正方形内部有一个相切的圆，它们的面积之比是 π/4</li>\n<li>正方形内部，随机产生 n 个点，计算它们与中心点的距离，并且判断是否落在圆的内部</li>\n<li>若这些点均匀分布，则圆周率 pi=4 * num/n (num 表示落到圆内投点数，n 表示总的投点数）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据正方形</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getPi</span>(<span class=\"params\">count</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在一个边长为2的正方形内随机投放点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> x = randomLocation(-<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = randomLocation(-<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// x,y 到中心的距离小于1 则在圆内</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">Math</span>.pow(x) + <span class=\"built_in\">Math</span>.pow(y) &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      num++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (num * <span class=\"number\">4.0</span>) / count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 范围内随机投放某个点</span></span><br><span class=\"line\"><span class=\"comment\">// 所有投放的点概率相同</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">randomLocation</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min + <span class=\"built_in\">Math</span>.random() * (max - min);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"vue3中的proxy","_content":"\n之前看到 vue3 更新之后数据监听由 Object.defineProperty 改成了 Proxy, 这两者之前存在着哪些不同？\n\n1. 首先这两者都是通过劫持对象来监听对象变化\n\n```js\nconst data = { name: \"data\" };\n\nObject.defineProperty(data, \"name\", {\n  // 获取对象属性 name 的时候执行\n  get() {\n    return \"get:\" + data.name;\n  },\n  // 设置对象属性name 的时候执行\n  set(val) {\n    data.name = val;\n  },\n});\n\nconst proxyData = new Proxy(\n  {},\n  {\n    get(target, key) {\n      return \"get:\" + target[key];\n    },\n    set(target, key, val) {\n      target[key] = val;\n    },\n  }\n);\n```\n\n2. Object.defineProperty 存在几个缺陷\n\n- 并不能检测对象属性的添加和删除\n- 无法监控到数组下标的变化\n- 嵌套层级比较深的情况下，存在性能问题\n\n3. 利用 Proxy 实现简单的数据相应\n\n```js\nfunction changeAttribute(ele, key, props) {\n  if (key === \"children\") {\n    if (typeof props[key] === \"string\" || typeof props[key] === \"number\") {\n      ele.innerHTML = props[key];\n    } else {\n      ele.appendChild(props[key]);\n    }\n  } else {\n    ele.setAttribute(key, props[key]);\n  }\n}\n\nfunction createElement(type, props) {\n  const ele = document.createElement(type);\n  Object.keys(props).forEach((key) => {\n    changeAttribute(ele, key, props);\n  });\n  return ele;\n}\n\nfunction createProxyData(state) {\n  return new Proxy(state.data, {\n    get(target, key) {\n      return target[key];\n    },\n    set(target, key, val) {\n      target[key] = val;\n      if (state.el) {\n        changeAttribute(state.el, key, target);\n      }\n    },\n  });\n}\nconst Component = function () {\n  const state = {\n    el: null,\n    data: {\n      class: \"nameEle\",\n      children: 0,\n      style: \"position: fixed; top: 100px; left: 100px;\",\n    },\n  };\n  const proxyNameState = createProxyData(state);\n  state.el = createElement(\"div\", proxyNameState);\n  document.body.addEventListener(\"click\", () => {\n    proxyNameState.children = Number(proxyNameState.children) + 1;\n  });\n  document.body.addEventListener(\"dblclick\", () => {\n    proxyNameState.class += \" addedClass\";\n  });\n  return state.el;\n};\n\ndocument.body.appendChild(Component());\n```\n","source":"_posts/proxy.md","raw":"---\ntitle: vue3中的proxy\ncategories: javascript\n---\n\n之前看到 vue3 更新之后数据监听由 Object.defineProperty 改成了 Proxy, 这两者之前存在着哪些不同？\n\n1. 首先这两者都是通过劫持对象来监听对象变化\n\n```js\nconst data = { name: \"data\" };\n\nObject.defineProperty(data, \"name\", {\n  // 获取对象属性 name 的时候执行\n  get() {\n    return \"get:\" + data.name;\n  },\n  // 设置对象属性name 的时候执行\n  set(val) {\n    data.name = val;\n  },\n});\n\nconst proxyData = new Proxy(\n  {},\n  {\n    get(target, key) {\n      return \"get:\" + target[key];\n    },\n    set(target, key, val) {\n      target[key] = val;\n    },\n  }\n);\n```\n\n2. Object.defineProperty 存在几个缺陷\n\n- 并不能检测对象属性的添加和删除\n- 无法监控到数组下标的变化\n- 嵌套层级比较深的情况下，存在性能问题\n\n3. 利用 Proxy 实现简单的数据相应\n\n```js\nfunction changeAttribute(ele, key, props) {\n  if (key === \"children\") {\n    if (typeof props[key] === \"string\" || typeof props[key] === \"number\") {\n      ele.innerHTML = props[key];\n    } else {\n      ele.appendChild(props[key]);\n    }\n  } else {\n    ele.setAttribute(key, props[key]);\n  }\n}\n\nfunction createElement(type, props) {\n  const ele = document.createElement(type);\n  Object.keys(props).forEach((key) => {\n    changeAttribute(ele, key, props);\n  });\n  return ele;\n}\n\nfunction createProxyData(state) {\n  return new Proxy(state.data, {\n    get(target, key) {\n      return target[key];\n    },\n    set(target, key, val) {\n      target[key] = val;\n      if (state.el) {\n        changeAttribute(state.el, key, target);\n      }\n    },\n  });\n}\nconst Component = function () {\n  const state = {\n    el: null,\n    data: {\n      class: \"nameEle\",\n      children: 0,\n      style: \"position: fixed; top: 100px; left: 100px;\",\n    },\n  };\n  const proxyNameState = createProxyData(state);\n  state.el = createElement(\"div\", proxyNameState);\n  document.body.addEventListener(\"click\", () => {\n    proxyNameState.children = Number(proxyNameState.children) + 1;\n  });\n  document.body.addEventListener(\"dblclick\", () => {\n    proxyNameState.class += \" addedClass\";\n  });\n  return state.el;\n};\n\ndocument.body.appendChild(Component());\n```\n","slug":"proxy","published":1,"date":"2021-08-22T12:31:00.591Z","updated":"2021-08-24T06:58:09.818Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1g0fb8m0001us9k6azzefww","content":"<p>之前看到 vue3 更新之后数据监听由 Object.defineProperty 改成了 Proxy, 这两者之前存在着哪些不同？</p>\n<ol>\n<li>首先这两者都是通过劫持对象来监听对象变化</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;data&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取对象属性 name 的时候执行</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;get:&quot;</span> + data.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 设置对象属性name 的时候执行</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">    data.name = val;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyData = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, key</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;get:&quot;</span> + target[key];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, key, val</span>)</span> &#123;</span><br><span class=\"line\">      target[key] = val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Object.defineProperty 存在几个缺陷</li>\n</ol>\n<ul>\n<li>并不能检测对象属性的添加和删除</li>\n<li>无法监控到数组下标的变化</li>\n<li>嵌套层级比较深的情况下，存在性能问题</li>\n</ul>\n<ol start=\"3\">\n<li>利用 Proxy 实现简单的数据相应</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeAttribute</span>(<span class=\"params\">ele, key, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key === <span class=\"string\">&quot;children&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props[key] === <span class=\"string\">&quot;string&quot;</span> || <span class=\"keyword\">typeof</span> props[key] === <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      ele.innerHTML = props[key];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ele.appendChild(props[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ele.setAttribute(key, props[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElement</span>(<span class=\"params\">type, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ele = <span class=\"built_in\">document</span>.createElement(type);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(props).forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    changeAttribute(ele, key, props);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProxyData</span>(<span class=\"params\">state</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(state.data, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, key</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, key, val</span>)</span> &#123;</span><br><span class=\"line\">      target[key] = val;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (state.el) &#123;</span><br><span class=\"line\">        changeAttribute(state.el, key, target);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">class</span>: <span class=\"string\">&quot;nameEle&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">style</span>: <span class=\"string\">&quot;position: fixed; top: 100px; left: 100px;&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> proxyNameState = createProxyData(state);</span><br><span class=\"line\">  state.el = createElement(<span class=\"string\">&quot;div&quot;</span>, proxyNameState);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    proxyNameState.children = <span class=\"built_in\">Number</span>(proxyNameState.children) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">&quot;dblclick&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    proxyNameState.class += <span class=\"string\">&quot; addedClass&quot;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state.el;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(Component());</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>之前看到 vue3 更新之后数据监听由 Object.defineProperty 改成了 Proxy, 这两者之前存在着哪些不同？</p>\n<ol>\n<li>首先这两者都是通过劫持对象来监听对象变化</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;data&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取对象属性 name 的时候执行</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;get:&quot;</span> + data.name;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 设置对象属性name 的时候执行</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">    data.name = val;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyData = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(</span><br><span class=\"line\">  &#123;&#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, key</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;get:&quot;</span> + target[key];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, key, val</span>)</span> &#123;</span><br><span class=\"line\">      target[key] = val;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>Object.defineProperty 存在几个缺陷</li>\n</ol>\n<ul>\n<li>并不能检测对象属性的添加和删除</li>\n<li>无法监控到数组下标的变化</li>\n<li>嵌套层级比较深的情况下，存在性能问题</li>\n</ul>\n<ol start=\"3\">\n<li>利用 Proxy 实现简单的数据相应</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeAttribute</span>(<span class=\"params\">ele, key, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (key === <span class=\"string\">&quot;children&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> props[key] === <span class=\"string\">&quot;string&quot;</span> || <span class=\"keyword\">typeof</span> props[key] === <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      ele.innerHTML = props[key];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ele.appendChild(props[key]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ele.setAttribute(key, props[key]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createElement</span>(<span class=\"params\">type, props</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> ele = <span class=\"built_in\">document</span>.createElement(type);</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.keys(props).forEach(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    changeAttribute(ele, key, props);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ele;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createProxyData</span>(<span class=\"params\">state</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(state.data, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, key</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> target[key];</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, key, val</span>)</span> &#123;</span><br><span class=\"line\">      target[key] = val;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (state.el) &#123;</span><br><span class=\"line\">        changeAttribute(state.el, key, target);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> Component = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">    <span class=\"attr\">el</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">class</span>: <span class=\"string\">&quot;nameEle&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">style</span>: <span class=\"string\">&quot;position: fixed; top: 100px; left: 100px;&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> proxyNameState = createProxyData(state);</span><br><span class=\"line\">  state.el = createElement(<span class=\"string\">&quot;div&quot;</span>, proxyNameState);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    proxyNameState.children = <span class=\"built_in\">Number</span>(proxyNameState.children) + <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.addEventListener(<span class=\"string\">&quot;dblclick&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    proxyNameState.class += <span class=\"string\">&quot; addedClass&quot;</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> state.el;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(Component());</span><br></pre></td></tr></table></figure>\n"},{"title":"React组件化","_content":"\n## 组件化概念\n\n将一个复杂的页面分割成若干个独立的组件，每个组件包含自己的逻辑和样式，再将这些独立组件组合成完成一个复杂的页面，这样既减少了逻辑复杂度，又实现了代码的重用， 特点\n\n1. 可组合：一个组件可以和其它的组件一起使用，或者可以直接嵌套再另外一个组件内部\n\n2. 可重用：每个组件都是具有独立功能的，可以被使用在多个场景中\n\n3. 可维护：每个小的组件仅仅包含自身的逻辑，更加容易被理解和维护\n\n## 组件设计原则\n\n- 单一功能\n- 扁平化的数据结构\n- 更加纯粹的 State 变化\n- 低耦合\n- 集中/统一的状态管理\n\n## 维度\n\n- 业务逻辑\n- 页面 UI 交互\n\n## 容器组件和可视化组件\n\n- 可视化组件简单来说是我们用来渲染到页面上可以被看见的组件，它只负责根据父组件传来的 props 渲染视图\n- 容器组件，它总是作为可视化组件的父级组件出现，通常作用是给可视化组件准备数据，充当支架\n\n比如上面的 Form 可以理解成一个容器组件，下面的其他元素就是可视化组件, 同时如果 Form 作为其他组件的一个单独功能， 也可以理解成可视化组件， 整个 Form 根据父级状态去渲染。\n\n## react hooks\n\nreact hook 解决了以下几个问题，使组件化更规范\n\n- 在组件之间复用状态逻辑很难\n- 复杂组件变得难以理解（生命周期内有不相关的逻辑）\n- 类组件中 this 指向问题不容易理解\n\n## 示例 - 表格验证\n\n需求：\n\n1. 完成一个表格,表格内容包括用户名, 电话, 验证码, 账号类型，密码， 确认密码\n2. 错误时右侧给错误提示\n3. 提交表格时验证错误， 并将所有数据传递给后台\n\n```js\n// 原始版 - 有完整的功能\nconst Form = () => {\n  const [formState, useFormState] = useState({\n    phone: \"\",\n    password: \"\",\n    code: \"\",\n    confirmPassword: \"\",\n    account: \"\",\n    accountType: \"\",\n    accountTypes: [\"personal\", \"enterprise\"],\n  });\n\n  function validatePhone() {\n    // 验证格式\n    return true;\n  }\n  function validatePassword() {\n    return true;\n  }\n  function validateConfirmPassword() {\n    return true;\n  }\n  function validateCode() {\n    return true;\n  }\n  function validateAccount() {\n    return true;\n  }\n\n  const onConfirm = useCallback(() => {\n    if (!validatePhone()) {\n    }\n    if (!validatePassword()) {\n    }\n    if (!validateConfirmPassword()) {\n    }\n    if (!validateAccount()) {\n    }\n    if (!validateCode()) {\n    }\n    // 提交数据\n    // post(formState)\n  }, [formState]);\n  return (\n    <div className=\"form\">\n      <div className=\"form-item\">\n        <label>电话： </label>\n        <input\n          placeholder={\"请输入电话号码\"}\n          value={formState.phone}\n          type=\"text\"\n        />\n        <span>获取验证码</span>\n      </div>\n      <div className=\"form-item\">\n        <label>验证码： </label>\n        <input value={formState.code} type=\"text\" />\n      </div>\n      <div className=\"form-item\">\n        <label>账户类型：</label>\n        <select value={\"personal\"}>\n          {formState.accountTypes.map((type) => (\n            <option value={type}></option>\n          ))}\n        </select>\n      </div>\n      <div className=\"form-item\">\n        <label>密码：</label>\n        <input\n          placeholder={\"请输入密码\"}\n          value={formState.password}\n          type=\"password\"\n        />\n      </div>\n      <div className=\"form-item\">\n        <label>重复密码：</label>\n        <input\n          placeholder={\"请输入再次输入密码\"}\n          value={formState.confirmPassword}\n          type=\"password\"\n        />\n      </div>\n      <div onClick={onConfirm}>确认</div>\n    </div>\n  );\n};\n```\n\n```js\n// 改良版 组件拆分\nenum FormValidateType {\n  phone = 'phone',\n  password = 'password',\n  account = 'account',\n  code = 'code',\n  confirmPassword = 'confirmPassword',\n  accountType = 'accountType',\n}\n\ntype FormState = Record<FormValidateType, string>\n\nfunction validateForm(type: FormValidateType, state: FormState) {\n  switch (type) {\n    case FormValidateType.phone:\n      return validatePhone(state)\n    case FormValidateType.password:\n      return validatePassword(state)\n    case FormValidateType.confirmPassword:\n      return validateConfirmPassword(state)\n    case FormValidateType.code:\n      return validateCode(state)\n    case FormValidateType.account:\n      return validateAccount(state)\n    default:\n      return false\n  }\n  function validatePhone(state: FormState) {\n    // 验证格式\n    return true\n  }\n  function validatePassword(state: FormState) {\n    return true\n  }\n  function validateConfirmPassword(state: FormState) {\n    return true\n  }\n  function validateCode(state: FormState) {\n    return true\n  }\n  function validateAccount(state: FormState) {\n    return true\n  }\n}\n\nconst Form = () => {\n  const [formState, setFormState] = useState<Record<FormValidateType, string>>({\n    phone: '',\n    password: '',\n    code: '',\n    confirmPassword: '',\n    account: '',\n    accountType: '',\n  })\n  const accountTypes = ['personal', 'enterprise']\n  const onStateChange = useCallback((type: FormValidateType, value: string) => {\n    setFormState((state) => ({\n      ...state,\n      [type]: value,\n    }))\n  }, [])\n\n  const onBlur = useCallback(\n    (type: FormValidateType) => {\n      validateForm(type, formState)\n    },\n    [formState],\n  )\n\n  const onConfirm = useCallback(() => {\n    // validateForm\n    // 提交数据\n    // post(formState)\n  }, [formState])\n  return (\n    <div className=\"form\">\n      <div className=\"form-item\">\n        <label>电话： </label>\n        <input\n          placeholder={'请输入电话号码'}\n          value={formState.phone}\n          // 传递箭头函数是会有性能问题的， 这里暂时不展开了\n          onChange={(e) =>\n            onStateChange(FormValidateType.phone, e.target.value)\n          }\n          onBlur={(e) => onBlur(FormValidateType.phone)}\n          type=\"text\"\n        />\n        <span>获取验证码</span>\n      </div>\n      <div className=\"form-item\">\n        <label>验证码： </label>\n        <input\n          onChange={(e) => onStateChange(FormValidateType.code, e.target.value)}\n          onBlur={(e) => onBlur(FormValidateType.code)}\n          value={formState.code}\n          type=\"text\"\n        />\n      </div>\n      <div className=\"form-item\">\n        <label>账户类型：</label>\n        <select\n          onChange={(e) =>\n            onStateChange(FormValidateType.accountType, e.target.value)\n          }\n          onBlur={(e) => onBlur(FormValidateType.accountType)}\n          value={'personal'}\n        >\n          {accountTypes.map((type) => (\n            <option value={type}></option>\n          ))}\n        </select>\n      </div>\n      <div className=\"form-item\">\n        <label>密码：</label>\n        <input\n          onChange={(e) =>\n            onStateChange(FormValidateType.password, e.target.value)\n          }\n          onBlur={(e) => onBlur(FormValidateType.password)}\n          placeholder={'请输入密码'}\n          value={formState.password}\n          type=\"password\"\n        />\n      </div>\n      <div className=\"form-item\">\n        <label>重复密码：</label>\n        <input\n          onChange={(e) =>\n            onStateChange(FormValidateType.confirmPassword, e.target.value)\n          }\n          placeholder={'请输入再次输入密码'}\n          value={formState.confirmPassword}\n          type=\"password\"\n        />\n      </div>\n      <div onClick={onConfirm}>确认</div>\n    </div>\n  )\n}\n```\n\n## z\n","source":"_posts/reactComponent.md","raw":"---\ntitle: React组件化\ncategories: react javascript\ntags: react 组件化\n---\n\n## 组件化概念\n\n将一个复杂的页面分割成若干个独立的组件，每个组件包含自己的逻辑和样式，再将这些独立组件组合成完成一个复杂的页面，这样既减少了逻辑复杂度，又实现了代码的重用， 特点\n\n1. 可组合：一个组件可以和其它的组件一起使用，或者可以直接嵌套再另外一个组件内部\n\n2. 可重用：每个组件都是具有独立功能的，可以被使用在多个场景中\n\n3. 可维护：每个小的组件仅仅包含自身的逻辑，更加容易被理解和维护\n\n## 组件设计原则\n\n- 单一功能\n- 扁平化的数据结构\n- 更加纯粹的 State 变化\n- 低耦合\n- 集中/统一的状态管理\n\n## 维度\n\n- 业务逻辑\n- 页面 UI 交互\n\n## 容器组件和可视化组件\n\n- 可视化组件简单来说是我们用来渲染到页面上可以被看见的组件，它只负责根据父组件传来的 props 渲染视图\n- 容器组件，它总是作为可视化组件的父级组件出现，通常作用是给可视化组件准备数据，充当支架\n\n比如上面的 Form 可以理解成一个容器组件，下面的其他元素就是可视化组件, 同时如果 Form 作为其他组件的一个单独功能， 也可以理解成可视化组件， 整个 Form 根据父级状态去渲染。\n\n## react hooks\n\nreact hook 解决了以下几个问题，使组件化更规范\n\n- 在组件之间复用状态逻辑很难\n- 复杂组件变得难以理解（生命周期内有不相关的逻辑）\n- 类组件中 this 指向问题不容易理解\n\n## 示例 - 表格验证\n\n需求：\n\n1. 完成一个表格,表格内容包括用户名, 电话, 验证码, 账号类型，密码， 确认密码\n2. 错误时右侧给错误提示\n3. 提交表格时验证错误， 并将所有数据传递给后台\n\n```js\n// 原始版 - 有完整的功能\nconst Form = () => {\n  const [formState, useFormState] = useState({\n    phone: \"\",\n    password: \"\",\n    code: \"\",\n    confirmPassword: \"\",\n    account: \"\",\n    accountType: \"\",\n    accountTypes: [\"personal\", \"enterprise\"],\n  });\n\n  function validatePhone() {\n    // 验证格式\n    return true;\n  }\n  function validatePassword() {\n    return true;\n  }\n  function validateConfirmPassword() {\n    return true;\n  }\n  function validateCode() {\n    return true;\n  }\n  function validateAccount() {\n    return true;\n  }\n\n  const onConfirm = useCallback(() => {\n    if (!validatePhone()) {\n    }\n    if (!validatePassword()) {\n    }\n    if (!validateConfirmPassword()) {\n    }\n    if (!validateAccount()) {\n    }\n    if (!validateCode()) {\n    }\n    // 提交数据\n    // post(formState)\n  }, [formState]);\n  return (\n    <div className=\"form\">\n      <div className=\"form-item\">\n        <label>电话： </label>\n        <input\n          placeholder={\"请输入电话号码\"}\n          value={formState.phone}\n          type=\"text\"\n        />\n        <span>获取验证码</span>\n      </div>\n      <div className=\"form-item\">\n        <label>验证码： </label>\n        <input value={formState.code} type=\"text\" />\n      </div>\n      <div className=\"form-item\">\n        <label>账户类型：</label>\n        <select value={\"personal\"}>\n          {formState.accountTypes.map((type) => (\n            <option value={type}></option>\n          ))}\n        </select>\n      </div>\n      <div className=\"form-item\">\n        <label>密码：</label>\n        <input\n          placeholder={\"请输入密码\"}\n          value={formState.password}\n          type=\"password\"\n        />\n      </div>\n      <div className=\"form-item\">\n        <label>重复密码：</label>\n        <input\n          placeholder={\"请输入再次输入密码\"}\n          value={formState.confirmPassword}\n          type=\"password\"\n        />\n      </div>\n      <div onClick={onConfirm}>确认</div>\n    </div>\n  );\n};\n```\n\n```js\n// 改良版 组件拆分\nenum FormValidateType {\n  phone = 'phone',\n  password = 'password',\n  account = 'account',\n  code = 'code',\n  confirmPassword = 'confirmPassword',\n  accountType = 'accountType',\n}\n\ntype FormState = Record<FormValidateType, string>\n\nfunction validateForm(type: FormValidateType, state: FormState) {\n  switch (type) {\n    case FormValidateType.phone:\n      return validatePhone(state)\n    case FormValidateType.password:\n      return validatePassword(state)\n    case FormValidateType.confirmPassword:\n      return validateConfirmPassword(state)\n    case FormValidateType.code:\n      return validateCode(state)\n    case FormValidateType.account:\n      return validateAccount(state)\n    default:\n      return false\n  }\n  function validatePhone(state: FormState) {\n    // 验证格式\n    return true\n  }\n  function validatePassword(state: FormState) {\n    return true\n  }\n  function validateConfirmPassword(state: FormState) {\n    return true\n  }\n  function validateCode(state: FormState) {\n    return true\n  }\n  function validateAccount(state: FormState) {\n    return true\n  }\n}\n\nconst Form = () => {\n  const [formState, setFormState] = useState<Record<FormValidateType, string>>({\n    phone: '',\n    password: '',\n    code: '',\n    confirmPassword: '',\n    account: '',\n    accountType: '',\n  })\n  const accountTypes = ['personal', 'enterprise']\n  const onStateChange = useCallback((type: FormValidateType, value: string) => {\n    setFormState((state) => ({\n      ...state,\n      [type]: value,\n    }))\n  }, [])\n\n  const onBlur = useCallback(\n    (type: FormValidateType) => {\n      validateForm(type, formState)\n    },\n    [formState],\n  )\n\n  const onConfirm = useCallback(() => {\n    // validateForm\n    // 提交数据\n    // post(formState)\n  }, [formState])\n  return (\n    <div className=\"form\">\n      <div className=\"form-item\">\n        <label>电话： </label>\n        <input\n          placeholder={'请输入电话号码'}\n          value={formState.phone}\n          // 传递箭头函数是会有性能问题的， 这里暂时不展开了\n          onChange={(e) =>\n            onStateChange(FormValidateType.phone, e.target.value)\n          }\n          onBlur={(e) => onBlur(FormValidateType.phone)}\n          type=\"text\"\n        />\n        <span>获取验证码</span>\n      </div>\n      <div className=\"form-item\">\n        <label>验证码： </label>\n        <input\n          onChange={(e) => onStateChange(FormValidateType.code, e.target.value)}\n          onBlur={(e) => onBlur(FormValidateType.code)}\n          value={formState.code}\n          type=\"text\"\n        />\n      </div>\n      <div className=\"form-item\">\n        <label>账户类型：</label>\n        <select\n          onChange={(e) =>\n            onStateChange(FormValidateType.accountType, e.target.value)\n          }\n          onBlur={(e) => onBlur(FormValidateType.accountType)}\n          value={'personal'}\n        >\n          {accountTypes.map((type) => (\n            <option value={type}></option>\n          ))}\n        </select>\n      </div>\n      <div className=\"form-item\">\n        <label>密码：</label>\n        <input\n          onChange={(e) =>\n            onStateChange(FormValidateType.password, e.target.value)\n          }\n          onBlur={(e) => onBlur(FormValidateType.password)}\n          placeholder={'请输入密码'}\n          value={formState.password}\n          type=\"password\"\n        />\n      </div>\n      <div className=\"form-item\">\n        <label>重复密码：</label>\n        <input\n          onChange={(e) =>\n            onStateChange(FormValidateType.confirmPassword, e.target.value)\n          }\n          placeholder={'请输入再次输入密码'}\n          value={formState.confirmPassword}\n          type=\"password\"\n        />\n      </div>\n      <div onClick={onConfirm}>确认</div>\n    </div>\n  )\n}\n```\n\n## z\n","slug":"reactComponent","published":1,"date":"2021-08-24T07:48:37.597Z","updated":"2021-08-24T09:16:36.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1g0fb8s0003us9kgd6fhmpa","content":"<h2 id=\"组件化概念\"><a href=\"#组件化概念\" class=\"headerlink\" title=\"组件化概念\"></a>组件化概念</h2><p>将一个复杂的页面分割成若干个独立的组件，每个组件包含自己的逻辑和样式，再将这些独立组件组合成完成一个复杂的页面，这样既减少了逻辑复杂度，又实现了代码的重用， 特点</p>\n<ol>\n<li><p>可组合：一个组件可以和其它的组件一起使用，或者可以直接嵌套再另外一个组件内部</p>\n</li>\n<li><p>可重用：每个组件都是具有独立功能的，可以被使用在多个场景中</p>\n</li>\n<li><p>可维护：每个小的组件仅仅包含自身的逻辑，更加容易被理解和维护</p>\n</li>\n</ol>\n<h2 id=\"组件设计原则\"><a href=\"#组件设计原则\" class=\"headerlink\" title=\"组件设计原则\"></a>组件设计原则</h2><ul>\n<li>单一功能</li>\n<li>扁平化的数据结构</li>\n<li>更加纯粹的 State 变化</li>\n<li>低耦合</li>\n<li>集中/统一的状态管理</li>\n</ul>\n<h2 id=\"维度\"><a href=\"#维度\" class=\"headerlink\" title=\"维度\"></a>维度</h2><ul>\n<li>业务逻辑</li>\n<li>页面 UI 交互</li>\n</ul>\n<h2 id=\"容器组件和可视化组件\"><a href=\"#容器组件和可视化组件\" class=\"headerlink\" title=\"容器组件和可视化组件\"></a>容器组件和可视化组件</h2><ul>\n<li>可视化组件简单来说是我们用来渲染到页面上可以被看见的组件，它只负责根据父组件传来的 props 渲染视图</li>\n<li>容器组件，它总是作为可视化组件的父级组件出现，通常作用是给可视化组件准备数据，充当支架</li>\n</ul>\n<p>比如上面的 Form 可以理解成一个容器组件，下面的其他元素就是可视化组件, 同时如果 Form 作为其他组件的一个单独功能， 也可以理解成可视化组件， 整个 Form 根据父级状态去渲染。</p>\n<h2 id=\"react-hooks\"><a href=\"#react-hooks\" class=\"headerlink\" title=\"react hooks\"></a>react hooks</h2><p>react hook 解决了以下几个问题，使组件化更规范</p>\n<ul>\n<li>在组件之间复用状态逻辑很难</li>\n<li>复杂组件变得难以理解（生命周期内有不相关的逻辑）</li>\n<li>类组件中 this 指向问题不容易理解</li>\n</ul>\n<h2 id=\"示例-表格验证\"><a href=\"#示例-表格验证\" class=\"headerlink\" title=\"示例 - 表格验证\"></a>示例 - 表格验证</h2><p>需求：</p>\n<ol>\n<li>完成一个表格,表格内容包括用户名, 电话, 验证码, 账号类型，密码， 确认密码</li>\n<li>错误时右侧给错误提示</li>\n<li>提交表格时验证错误， 并将所有数据传递给后台</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始版 - 有完整的功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Form = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [formState, useFormState] = useState(&#123;</span><br><span class=\"line\">    <span class=\"attr\">phone</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">confirmPassword</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">account</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">accountType</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">accountTypes</span>: [<span class=\"string\">&quot;personal&quot;</span>, <span class=\"string\">&quot;enterprise&quot;</span>],</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePhone</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePassword</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateConfirmPassword</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onConfirm = useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validatePhone()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validatePassword()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateConfirmPassword()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateAccount()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateCode()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 提交数据</span></span><br><span class=\"line\">    <span class=\"comment\">// post(formState)</span></span><br><span class=\"line\">  &#125;, [formState]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>电话： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&quot;请输入电话号码&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.phone&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>获取验证码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>验证码： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.code&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>账户类型：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;</span>&quot;<span class=\"attr\">personal</span>&quot;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          &#123;formState.accountTypes.map((type) =&gt; (</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;type&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          ))&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&quot;请输入密码&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.password&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&quot;请输入再次输入密码&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.confirmPassword&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onConfirm&#125;</span>&gt;</span>确认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改良版 组件拆分</span></span><br><span class=\"line\">enum FormValidateType &#123;</span><br><span class=\"line\">  phone = <span class=\"string\">&#x27;phone&#x27;</span>,</span><br><span class=\"line\">  password = <span class=\"string\">&#x27;password&#x27;</span>,</span><br><span class=\"line\">  account = <span class=\"string\">&#x27;account&#x27;</span>,</span><br><span class=\"line\">  code = <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  confirmPassword = <span class=\"string\">&#x27;confirmPassword&#x27;</span>,</span><br><span class=\"line\">  accountType = <span class=\"string\">&#x27;accountType&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type FormState = Record&lt;FormValidateType, string&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateForm</span>(<span class=\"params\">type: FormValidateType, state: FormState</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.phone:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validatePhone(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.password:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validatePassword(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.confirmPassword:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validateConfirmPassword(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.code:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validateCode(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.account:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validateAccount(state)</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePhone</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePassword</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateConfirmPassword</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateCode</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateAccount</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Form = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [formState, setFormState] = useState&lt;Record&lt;FormValidateType, string&gt;&gt;(&#123;</span><br><span class=\"line\">    <span class=\"attr\">phone</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">confirmPassword</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">account</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">accountType</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> accountTypes = [<span class=\"string\">&#x27;personal&#x27;</span>, <span class=\"string\">&#x27;enterprise&#x27;</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onStateChange = useCallback(<span class=\"function\">(<span class=\"params\">type: FormValidateType, value: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setFormState(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      ...state,</span><br><span class=\"line\">      [type]: value,</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onBlur = useCallback(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">type: FormValidateType</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      validateForm(type, formState)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [formState],</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onConfirm = useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// validateForm</span></span><br><span class=\"line\">    <span class=\"comment\">// 提交数据</span></span><br><span class=\"line\">    <span class=\"comment\">// post(formState)</span></span><br><span class=\"line\">  &#125;, [formState])</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>电话： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&#x27;请输入电话号码&#x27;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.phone&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          // 传递箭头函数是会有性能问题的， 这里暂时不展开了</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.phone, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.phone)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;text&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>获取验证码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>验证码： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> onStateChange(FormValidateType.code, e.target.value)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.code)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;formState.code&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;text&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>账户类型：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">select</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.accountType, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.accountType)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;&#x27;personal&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"xml\">          &#123;accountTypes.map((type) =&gt; (</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;type&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          ))&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.password, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.password)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          placeholder=&#123;&#x27;请输入密码&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;formState.password&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;password&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.confirmPassword, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          placeholder=&#123;&#x27;请输入再次输入密码&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;formState.confirmPassword&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;password&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onConfirm&#125;</span>&gt;</span>确认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a>z</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"组件化概念\"><a href=\"#组件化概念\" class=\"headerlink\" title=\"组件化概念\"></a>组件化概念</h2><p>将一个复杂的页面分割成若干个独立的组件，每个组件包含自己的逻辑和样式，再将这些独立组件组合成完成一个复杂的页面，这样既减少了逻辑复杂度，又实现了代码的重用， 特点</p>\n<ol>\n<li><p>可组合：一个组件可以和其它的组件一起使用，或者可以直接嵌套再另外一个组件内部</p>\n</li>\n<li><p>可重用：每个组件都是具有独立功能的，可以被使用在多个场景中</p>\n</li>\n<li><p>可维护：每个小的组件仅仅包含自身的逻辑，更加容易被理解和维护</p>\n</li>\n</ol>\n<h2 id=\"组件设计原则\"><a href=\"#组件设计原则\" class=\"headerlink\" title=\"组件设计原则\"></a>组件设计原则</h2><ul>\n<li>单一功能</li>\n<li>扁平化的数据结构</li>\n<li>更加纯粹的 State 变化</li>\n<li>低耦合</li>\n<li>集中/统一的状态管理</li>\n</ul>\n<h2 id=\"维度\"><a href=\"#维度\" class=\"headerlink\" title=\"维度\"></a>维度</h2><ul>\n<li>业务逻辑</li>\n<li>页面 UI 交互</li>\n</ul>\n<h2 id=\"容器组件和可视化组件\"><a href=\"#容器组件和可视化组件\" class=\"headerlink\" title=\"容器组件和可视化组件\"></a>容器组件和可视化组件</h2><ul>\n<li>可视化组件简单来说是我们用来渲染到页面上可以被看见的组件，它只负责根据父组件传来的 props 渲染视图</li>\n<li>容器组件，它总是作为可视化组件的父级组件出现，通常作用是给可视化组件准备数据，充当支架</li>\n</ul>\n<p>比如上面的 Form 可以理解成一个容器组件，下面的其他元素就是可视化组件, 同时如果 Form 作为其他组件的一个单独功能， 也可以理解成可视化组件， 整个 Form 根据父级状态去渲染。</p>\n<h2 id=\"react-hooks\"><a href=\"#react-hooks\" class=\"headerlink\" title=\"react hooks\"></a>react hooks</h2><p>react hook 解决了以下几个问题，使组件化更规范</p>\n<ul>\n<li>在组件之间复用状态逻辑很难</li>\n<li>复杂组件变得难以理解（生命周期内有不相关的逻辑）</li>\n<li>类组件中 this 指向问题不容易理解</li>\n</ul>\n<h2 id=\"示例-表格验证\"><a href=\"#示例-表格验证\" class=\"headerlink\" title=\"示例 - 表格验证\"></a>示例 - 表格验证</h2><p>需求：</p>\n<ol>\n<li>完成一个表格,表格内容包括用户名, 电话, 验证码, 账号类型，密码， 确认密码</li>\n<li>错误时右侧给错误提示</li>\n<li>提交表格时验证错误， 并将所有数据传递给后台</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始版 - 有完整的功能</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Form = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [formState, useFormState] = useState(&#123;</span><br><span class=\"line\">    <span class=\"attr\">phone</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">confirmPassword</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">account</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">accountType</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">accountTypes</span>: [<span class=\"string\">&quot;personal&quot;</span>, <span class=\"string\">&quot;enterprise&quot;</span>],</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePhone</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePassword</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateConfirmPassword</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateCode</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateAccount</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onConfirm = useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validatePhone()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validatePassword()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateConfirmPassword()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateAccount()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!validateCode()) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 提交数据</span></span><br><span class=\"line\">    <span class=\"comment\">// post(formState)</span></span><br><span class=\"line\">  &#125;, [formState]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>电话： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&quot;请输入电话号码&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.phone&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>获取验证码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>验证码： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.code&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>账户类型：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;</span>&quot;<span class=\"attr\">personal</span>&quot;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          &#123;formState.accountTypes.map((type) =&gt; (</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;type&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          ))&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&quot;请输入密码&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.password&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&quot;请输入再次输入密码&quot;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.confirmPassword&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">type</span>=<span class=\"string\">&quot;password&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">        /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onConfirm&#125;</span>&gt;</span>确认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改良版 组件拆分</span></span><br><span class=\"line\">enum FormValidateType &#123;</span><br><span class=\"line\">  phone = <span class=\"string\">&#x27;phone&#x27;</span>,</span><br><span class=\"line\">  password = <span class=\"string\">&#x27;password&#x27;</span>,</span><br><span class=\"line\">  account = <span class=\"string\">&#x27;account&#x27;</span>,</span><br><span class=\"line\">  code = <span class=\"string\">&#x27;code&#x27;</span>,</span><br><span class=\"line\">  confirmPassword = <span class=\"string\">&#x27;confirmPassword&#x27;</span>,</span><br><span class=\"line\">  accountType = <span class=\"string\">&#x27;accountType&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type FormState = Record&lt;FormValidateType, string&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateForm</span>(<span class=\"params\">type: FormValidateType, state: FormState</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.phone:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validatePhone(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.password:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validatePassword(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.confirmPassword:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validateConfirmPassword(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.code:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validateCode(state)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> FormValidateType.account:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> validateAccount(state)</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePhone</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 验证格式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validatePassword</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateConfirmPassword</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateCode</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validateAccount</span>(<span class=\"params\">state: FormState</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Form = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [formState, setFormState] = useState&lt;Record&lt;FormValidateType, string&gt;&gt;(&#123;</span><br><span class=\"line\">    <span class=\"attr\">phone</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">confirmPassword</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">account</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">accountType</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> accountTypes = [<span class=\"string\">&#x27;personal&#x27;</span>, <span class=\"string\">&#x27;enterprise&#x27;</span>]</span><br><span class=\"line\">  <span class=\"keyword\">const</span> onStateChange = useCallback(<span class=\"function\">(<span class=\"params\">type: FormValidateType, value: string</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setFormState(<span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> (&#123;</span><br><span class=\"line\">      ...state,</span><br><span class=\"line\">      [type]: value,</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onBlur = useCallback(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">type: FormValidateType</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      validateForm(type, formState)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    [formState],</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> onConfirm = useCallback(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// validateForm</span></span><br><span class=\"line\">    <span class=\"comment\">// 提交数据</span></span><br><span class=\"line\">    <span class=\"comment\">// post(formState)</span></span><br><span class=\"line\">  &#125;, [formState])</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>电话： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;</span>&#x27;请输入电话号码&#x27;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;formState.phone&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          // 传递箭头函数是会有性能问题的， 这里暂时不展开了</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.phone, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.phone)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;text&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>获取验证码<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>验证码： <span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span> onStateChange(FormValidateType.code, e.target.value)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.code)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;formState.code&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;text&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>账户类型：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">select</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.accountType, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.accountType)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;&#x27;personal&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"xml\">          &#123;accountTypes.map((type) =&gt; (</span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;type&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          ))&#125;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.password, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          onBlur=&#123;(e) =&gt; onBlur(FormValidateType.password)&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          placeholder=&#123;&#x27;请输入密码&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;formState.password&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;password&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>重复密码：<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"xml\">          <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;(e)</span> =&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            onStateChange(FormValidateType.confirmPassword, e.target.value)</span></span><br><span class=\"line\"><span class=\"xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"xml\">          placeholder=&#123;&#x27;请输入再次输入密码&#x27;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          value=&#123;formState.confirmPassword&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          type=&quot;password&quot;</span></span><br><span class=\"line\"><span class=\"xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;onConfirm&#125;</span>&gt;</span>确认<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"z\"><a href=\"#z\" class=\"headerlink\" title=\"z\"></a>z</h2>"},{"title":"Vue slot","_content":"\n### 普通插槽 默认名称为 default\n\n```html\n<!-- SlotChild -->\n<slot>\n  替换前内容1\n</slot>\n\n<slot-child>\n  替换后内容\n</slot-child>\n```\n\n### 具名插槽 Named Slots\n\n```html\n<slot name=\"content\">\n  替换前内容2\n</slot>\n<slot-child>\n  这里不会显示\n  <div slot=\"content\">\n    替换方法1\n  </div>\n  <template v-slot:content>\n    替换方法2\n  </template>\n  <template #header>替换方法3</template>\n  3种写法都可以 写了多个只会展示最后一个\n</slot-child>\n```\n\n### 具名+作用域插槽 Named Scoped Slots\n\n```html\n<slot name=\"content\" :variable1=\"{ name: 'variable1' }\" varible2=\"varible2\"></slot>\n<slot-child>\n  这里不会显示\n  <template v-slot:content=\"content\">\n    {{ content }}\n  </template>\n  content = { variable1: {name: 'variable1'}, variable2: 'variable2' }\n</slot-child>\n```\n\n### tips\n\n1. slot 不要添加事件， 因为 slot 会在被替换内容渲染时被移除掉\n\n2. 替换 slot 内容的元素必须在组件的第一层\n\n```html\n<slot-child>\n  <div slot=\"sample\">这里的替换会生效</div>\n  <div>\n    <div slot=\"sample\">这里的替换不会生效</div>\n  </div>\n</slot-child>\n```\n3. 需要传递变量时建议使用template包裹\n  - 不容易造成歧义\n  - 避免可能的属性冲突\n\n### 参考资料\n\n1. https://vuejs.org/guide/components/slots.html#scoped-slots 官方文档\n2. https://github.com/vuejs/vue/issues/4332#issuecomment-263444492 slot方法传递问题\n3. https://stackoverflow.com/questions/43370275/vue-named-slots-do-not-work-when-wrapped slot内容元素\n4. https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md 官方更新记录\n5. https://github.com/vuejs/vue/issues/7740#issuecomment-371309357 相关issue\n","source":"_posts/slot.md","raw":"\n---\ntitle: Vue slot\ncategories: Vue javascript\ntags: Vue slot\n---\n\n### 普通插槽 默认名称为 default\n\n```html\n<!-- SlotChild -->\n<slot>\n  替换前内容1\n</slot>\n\n<slot-child>\n  替换后内容\n</slot-child>\n```\n\n### 具名插槽 Named Slots\n\n```html\n<slot name=\"content\">\n  替换前内容2\n</slot>\n<slot-child>\n  这里不会显示\n  <div slot=\"content\">\n    替换方法1\n  </div>\n  <template v-slot:content>\n    替换方法2\n  </template>\n  <template #header>替换方法3</template>\n  3种写法都可以 写了多个只会展示最后一个\n</slot-child>\n```\n\n### 具名+作用域插槽 Named Scoped Slots\n\n```html\n<slot name=\"content\" :variable1=\"{ name: 'variable1' }\" varible2=\"varible2\"></slot>\n<slot-child>\n  这里不会显示\n  <template v-slot:content=\"content\">\n    {{ content }}\n  </template>\n  content = { variable1: {name: 'variable1'}, variable2: 'variable2' }\n</slot-child>\n```\n\n### tips\n\n1. slot 不要添加事件， 因为 slot 会在被替换内容渲染时被移除掉\n\n2. 替换 slot 内容的元素必须在组件的第一层\n\n```html\n<slot-child>\n  <div slot=\"sample\">这里的替换会生效</div>\n  <div>\n    <div slot=\"sample\">这里的替换不会生效</div>\n  </div>\n</slot-child>\n```\n3. 需要传递变量时建议使用template包裹\n  - 不容易造成歧义\n  - 避免可能的属性冲突\n\n### 参考资料\n\n1. https://vuejs.org/guide/components/slots.html#scoped-slots 官方文档\n2. https://github.com/vuejs/vue/issues/4332#issuecomment-263444492 slot方法传递问题\n3. https://stackoverflow.com/questions/43370275/vue-named-slots-do-not-work-when-wrapped slot内容元素\n4. https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md 官方更新记录\n5. https://github.com/vuejs/vue/issues/7740#issuecomment-371309357 相关issue\n","slug":"slot","published":1,"date":"2022-04-01T06:59:09.953Z","updated":"2022-04-01T07:00:06.643Z","_id":"cl1g2s9c600003b9kecst46ei","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"普通插槽-默认名称为-default\"><a href=\"#普通插槽-默认名称为-default\" class=\"headerlink\" title=\"普通插槽 默认名称为 default\"></a>普通插槽 默认名称为 default</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- SlotChild --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  替换前内容1</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  替换后内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名插槽-Named-Slots\"><a href=\"#具名插槽-Named-Slots\" class=\"headerlink\" title=\"具名插槽 Named Slots\"></a>具名插槽 Named Slots</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  替换前内容2</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  这里不会显示</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    替换方法1</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:content</span>&gt;</span></span><br><span class=\"line\">    替换方法2</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span>替换方法3<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  3种写法都可以 写了多个只会展示最后一个</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名-作用域插槽-Named-Scoped-Slots\"><a href=\"#具名-作用域插槽-Named-Scoped-Slots\" class=\"headerlink\" title=\"具名+作用域插槽 Named Scoped Slots\"></a>具名+作用域插槽 Named Scoped Slots</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">:variable1</span>=<span class=\"string\">&quot;&#123; name: &#x27;variable1&#x27; &#125;&quot;</span> <span class=\"attr\">varible2</span>=<span class=\"string\">&quot;varible2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  这里不会显示</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:content</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; content &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  content = &#123; variable1: &#123;name: &#x27;variable1&#x27;&#125;, variable2: &#x27;variable2&#x27; &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><ol>\n<li><p>slot 不要添加事件， 因为 slot 会在被替换内容渲染时被移除掉</p>\n</li>\n<li><p>替换 slot 内容的元素必须在组件的第一层</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;sample&quot;</span>&gt;</span>这里的替换会生效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;sample&quot;</span>&gt;</span>这里的替换不会生效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>需要传递变量时建议使用template包裹</li>\n</ol>\n<ul>\n<li>不容易造成歧义</li>\n<li>避免可能的属性冲突</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"https://vuejs.org/guide/components/slots.html#scoped-slots\">https://vuejs.org/guide/components/slots.html#scoped-slots</a> 官方文档</li>\n<li><a href=\"https://github.com/vuejs/vue/issues/4332#issuecomment-263444492\">https://github.com/vuejs/vue/issues/4332#issuecomment-263444492</a> slot方法传递问题</li>\n<li><a href=\"https://stackoverflow.com/questions/43370275/vue-named-slots-do-not-work-when-wrapped\">https://stackoverflow.com/questions/43370275/vue-named-slots-do-not-work-when-wrapped</a> slot内容元素</li>\n<li><a href=\"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md\">https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md</a> 官方更新记录</li>\n<li><a href=\"https://github.com/vuejs/vue/issues/7740#issuecomment-371309357\">https://github.com/vuejs/vue/issues/7740#issuecomment-371309357</a> 相关issue</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"普通插槽-默认名称为-default\"><a href=\"#普通插槽-默认名称为-default\" class=\"headerlink\" title=\"普通插槽 默认名称为 default\"></a>普通插槽 默认名称为 default</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- SlotChild --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  替换前内容1</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  替换后内容</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名插槽-Named-Slots\"><a href=\"#具名插槽-Named-Slots\" class=\"headerlink\" title=\"具名插槽 Named Slots\"></a>具名插槽 Named Slots</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">  替换前内容2</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  这里不会显示</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    替换方法1</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:content</span>&gt;</span></span><br><span class=\"line\">    替换方法2</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span>替换方法3<span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  3种写法都可以 写了多个只会展示最后一个</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"具名-作用域插槽-Named-Scoped-Slots\"><a href=\"#具名-作用域插槽-Named-Scoped-Slots\" class=\"headerlink\" title=\"具名+作用域插槽 Named Scoped Slots\"></a>具名+作用域插槽 Named Scoped Slots</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;content&quot;</span> <span class=\"attr\">:variable1</span>=<span class=\"string\">&quot;&#123; name: &#x27;variable1&#x27; &#125;&quot;</span> <span class=\"attr\">varible2</span>=<span class=\"string\">&quot;varible2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  这里不会显示</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:content</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; content &#125;&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  content = &#123; variable1: &#123;name: &#x27;variable1&#x27;&#125;, variable2: &#x27;variable2&#x27; &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h3><ol>\n<li><p>slot 不要添加事件， 因为 slot 会在被替换内容渲染时被移除掉</p>\n</li>\n<li><p>替换 slot 内容的元素必须在组件的第一层</p>\n</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">slot-child</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;sample&quot;</span>&gt;</span>这里的替换会生效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;sample&quot;</span>&gt;</span>这里的替换不会生效<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">slot-child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>需要传递变量时建议使用template包裹</li>\n</ol>\n<ul>\n<li>不容易造成歧义</li>\n<li>避免可能的属性冲突</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"https://vuejs.org/guide/components/slots.html#scoped-slots\">https://vuejs.org/guide/components/slots.html#scoped-slots</a> 官方文档</li>\n<li><a href=\"https://github.com/vuejs/vue/issues/4332#issuecomment-263444492\">https://github.com/vuejs/vue/issues/4332#issuecomment-263444492</a> slot方法传递问题</li>\n<li><a href=\"https://stackoverflow.com/questions/43370275/vue-named-slots-do-not-work-when-wrapped\">https://stackoverflow.com/questions/43370275/vue-named-slots-do-not-work-when-wrapped</a> slot内容元素</li>\n<li><a href=\"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md\">https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md</a> 官方更新记录</li>\n<li><a href=\"https://github.com/vuejs/vue/issues/7740#issuecomment-371309357\">https://github.com/vuejs/vue/issues/7740#issuecomment-371309357</a> 相关issue</li>\n</ol>\n"},{"_content":"","source":"_posts/文件下载.md","raw":"","slug":"文件下载","published":1,"date":"2022-04-28T08:51:01.850Z","updated":"2022-04-28T08:51:01.850Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cl38avqmm0000ojmbftha95er","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"代码简洁之道","_content":"\n","source":"_posts/代码简洁之道（一）.md","raw":"---\ntitle: 代码简洁之道\ntags: javascript\ncategories: code\n---\n\n","slug":"代码简洁之道（一）","published":1,"date":"2022-04-24T02:27:40.974Z","updated":"2022-04-24T06:16:48.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl38avqmx0001ojmbf7u3c04r","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Localstorage 和 SessionStorage","_content":"\n## 定义\n\n### Localstorage\n\n1. 只读的 localStorage 属性允许你访问一个 Document 源（origin）的对象 Storage, 存储的数据将保存在浏览器会话中\n\n   - localStorage 是基于 Storage\n   - localStorage 受同源策略影响(a=>a 保留, a=>b 消失)\n   - 同源页面 a,b, a 打开 b, a 更改 localStorage 后， b 跟着变化\n   - 关闭对应浏览器标签或窗口，不会清除对应的 localStorage\n\n2. 定义\n\n- window.localStorage\n\n### Sessionstorage\n\n1. sessionStorage 属性允许你访问一个，对应当前源的 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。\n\n- sessionStorage 是基于 Storage\n- sessionStorage 受同源策略影响(a=>a 保留, a=>b 消失)\n- 同源页面 a,b, a 打开 b, a 更改 sessionStorage 后， b 不会跟着变化\n- 关闭对应浏览器标签或窗口，会清除对应的 sessionStorage\n\n### Storage 对象\n\n1. 定义\n\n```c++\n[Exposed=Window]\ninterface Storage {\n  readonly attribute unsigned long length;\n  DOMString? key(unsigned long index);\n  getter DOMString? getItem(DOMString key);\n  setter undefined setItem(DOMString key, DOMString value);\n  deleter undefined removeItem(DOMString key);\n  undefined clear();\n};\n```\n  - map \n    a. A storage proxy map is equivalent to a map, except that all operations are instead performed on its backing map.\n    b. map是一个映射， 所有操作都在它支持的映射上执行\n  - type  'local' or 'session'\n\n2. 广播storage实现步骤 To broadcast(同源下浏览器通讯) a Storage object storage, given a key, oldValue, and newValue, run these steps:\n\n- Let url be storage's relevant global object's associated Document's URL.  关联全局DOM的URL  document.URL\n\n- 令 remoteStorages 为所有储存对象,排除以下\n- Let remoteStorages be all Storage objects including storage whose:\n \n  - 排除掉type为local 和 session\n  - type is storage's type (local 或者 session)\n  - 排除同源storage\n  - relevant settings object's origin is same origin with storage's relevant settings object's origin.\n  - 相关设置对象的浏览会话为存储相关设置对象的浏览会话(session与local的区别)\n  - and, if type is \"session\", whose relevant settings object's browsing session is storage's relevant settings object's browsing session.\n\n- 循环 remoteStorages 中的每一个 remoteStorage\n- For each remoteStorage of remoteStorages: \n  - 在全局DOM任务队列中增加一个全局任务， 任务内容为在 remoteStorage 的全局对象上 触发一个 storage 事件\n  - queue a global task on the DOM manipulation task source given remoteStorage's relevant global object to fire an event named storage at remoteStorage's relevant global object, \n  - using StorageEvent, with key initialized to key, oldValue initialized to oldValue, newValue initialized to newValue, url initialized to url, and storageArea initialized to remoteStorage.\n\n\n3. storage赋值过程  setItem(key, value)\n  - 定义 orderValue null\n  - 定义 reorder(排序器) 为true\n  - 如果 map[key] 存在\n   * orderValue设置为map[key]\n   * 如果orderValue 为传入的value return \n   * Set reorder to false\n  - 如果值无法被保存(数据过大或其他错误) throw a \"QuotaExceededError\" DOMException exception\n  - 设置 map[key] 为 value\n  - 如果recorder为true 对 storage进行排序\n  - Broadcast this with key, oldValue, and value. \n\n### 参考资料\n\n1. https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\n2. https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage\n3. https://html.spec.whatwg.org/multipage/webstorage.html#storage-2\n","source":"_posts/Localstorage和SessionStorage.md","raw":"---\ntitle: Localstorage 和 SessionStorage\ntags: javascript\ncategories: broswer\n---\n\n## 定义\n\n### Localstorage\n\n1. 只读的 localStorage 属性允许你访问一个 Document 源（origin）的对象 Storage, 存储的数据将保存在浏览器会话中\n\n   - localStorage 是基于 Storage\n   - localStorage 受同源策略影响(a=>a 保留, a=>b 消失)\n   - 同源页面 a,b, a 打开 b, a 更改 localStorage 后， b 跟着变化\n   - 关闭对应浏览器标签或窗口，不会清除对应的 localStorage\n\n2. 定义\n\n- window.localStorage\n\n### Sessionstorage\n\n1. sessionStorage 属性允许你访问一个，对应当前源的 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。\n\n- sessionStorage 是基于 Storage\n- sessionStorage 受同源策略影响(a=>a 保留, a=>b 消失)\n- 同源页面 a,b, a 打开 b, a 更改 sessionStorage 后， b 不会跟着变化\n- 关闭对应浏览器标签或窗口，会清除对应的 sessionStorage\n\n### Storage 对象\n\n1. 定义\n\n```c++\n[Exposed=Window]\ninterface Storage {\n  readonly attribute unsigned long length;\n  DOMString? key(unsigned long index);\n  getter DOMString? getItem(DOMString key);\n  setter undefined setItem(DOMString key, DOMString value);\n  deleter undefined removeItem(DOMString key);\n  undefined clear();\n};\n```\n  - map \n    a. A storage proxy map is equivalent to a map, except that all operations are instead performed on its backing map.\n    b. map是一个映射， 所有操作都在它支持的映射上执行\n  - type  'local' or 'session'\n\n2. 广播storage实现步骤 To broadcast(同源下浏览器通讯) a Storage object storage, given a key, oldValue, and newValue, run these steps:\n\n- Let url be storage's relevant global object's associated Document's URL.  关联全局DOM的URL  document.URL\n\n- 令 remoteStorages 为所有储存对象,排除以下\n- Let remoteStorages be all Storage objects including storage whose:\n \n  - 排除掉type为local 和 session\n  - type is storage's type (local 或者 session)\n  - 排除同源storage\n  - relevant settings object's origin is same origin with storage's relevant settings object's origin.\n  - 相关设置对象的浏览会话为存储相关设置对象的浏览会话(session与local的区别)\n  - and, if type is \"session\", whose relevant settings object's browsing session is storage's relevant settings object's browsing session.\n\n- 循环 remoteStorages 中的每一个 remoteStorage\n- For each remoteStorage of remoteStorages: \n  - 在全局DOM任务队列中增加一个全局任务， 任务内容为在 remoteStorage 的全局对象上 触发一个 storage 事件\n  - queue a global task on the DOM manipulation task source given remoteStorage's relevant global object to fire an event named storage at remoteStorage's relevant global object, \n  - using StorageEvent, with key initialized to key, oldValue initialized to oldValue, newValue initialized to newValue, url initialized to url, and storageArea initialized to remoteStorage.\n\n\n3. storage赋值过程  setItem(key, value)\n  - 定义 orderValue null\n  - 定义 reorder(排序器) 为true\n  - 如果 map[key] 存在\n   * orderValue设置为map[key]\n   * 如果orderValue 为传入的value return \n   * Set reorder to false\n  - 如果值无法被保存(数据过大或其他错误) throw a \"QuotaExceededError\" DOMException exception\n  - 设置 map[key] 为 value\n  - 如果recorder为true 对 storage进行排序\n  - Broadcast this with key, oldValue, and value. \n\n### 参考资料\n\n1. https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\n2. https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage\n3. https://html.spec.whatwg.org/multipage/webstorage.html#storage-2\n","slug":"Localstorage和SessionStorage","published":1,"date":"2022-05-16T06:16:06.773Z","updated":"2022-06-02T00:40:12.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl3wakism000059kv5wg50vzr","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><h3 id=\"Localstorage\"><a href=\"#Localstorage\" class=\"headerlink\" title=\"Localstorage\"></a>Localstorage</h3><ol>\n<li><p>只读的 localStorage 属性允许你访问一个 Document 源（origin）的对象 Storage, 存储的数据将保存在浏览器会话中</p>\n<ul>\n<li>localStorage 是基于 Storage</li>\n<li>localStorage 受同源策略影响(a=&gt;a 保留, a=&gt;b 消失)</li>\n<li>同源页面 a,b, a 打开 b, a 更改 localStorage 后， b 跟着变化</li>\n<li>关闭对应浏览器标签或窗口，不会清除对应的 localStorage</li>\n</ul>\n</li>\n<li><p>定义</p>\n</li>\n</ol>\n<ul>\n<li>window.localStorage</li>\n</ul>\n<h3 id=\"Sessionstorage\"><a href=\"#Sessionstorage\" class=\"headerlink\" title=\"Sessionstorage\"></a>Sessionstorage</h3><ol>\n<li>sessionStorage 属性允许你访问一个，对应当前源的 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。</li>\n</ol>\n<ul>\n<li>sessionStorage 是基于 Storage</li>\n<li>sessionStorage 受同源策略影响(a=&gt;a 保留, a=&gt;b 消失)</li>\n<li>同源页面 a,b, a 打开 b, a 更改 sessionStorage 后， b 不会跟着变化</li>\n<li>关闭对应浏览器标签或窗口，会清除对应的 sessionStorage</li>\n</ul>\n<h3 id=\"Storage-对象\"><a href=\"#Storage-对象\" class=\"headerlink\" title=\"Storage 对象\"></a>Storage 对象</h3><ol>\n<li>定义</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Exposed=Window]</span><br><span class=\"line\">interface Storage &#123;</span><br><span class=\"line\">  readonly attribute <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> length;</span><br><span class=\"line\">  DOMString? <span class=\"built_in\">key</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> index);</span><br><span class=\"line\">  getter DOMString? <span class=\"built_in\">getItem</span>(DOMString key);</span><br><span class=\"line\">  <span class=\"function\">setter undefined <span class=\"title\">setItem</span><span class=\"params\">(DOMString key, DOMString value)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">deleter undefined <span class=\"title\">removeItem</span><span class=\"params\">(DOMString key)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">undefined <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map<br>a. A storage proxy map is equivalent to a map, except that all operations are instead performed on its backing map.<br>b. map是一个映射， 所有操作都在它支持的映射上执行</li>\n<li>type  ‘local’ or ‘session’</li>\n</ul>\n<ol start=\"2\">\n<li>广播storage实现步骤 To broadcast(同源下浏览器通讯) a Storage object storage, given a key, oldValue, and newValue, run these steps:</li>\n</ol>\n<ul>\n<li><p>Let url be storage’s relevant global object’s associated Document’s URL.  关联全局DOM的URL  document.URL</p>\n</li>\n<li><p>令 remoteStorages 为所有储存对象,排除以下</p>\n</li>\n<li><p>Let remoteStorages be all Storage objects including storage whose:</p>\n<ul>\n<li>排除掉type为local 和 session</li>\n<li>type is storage’s type (local 或者 session)</li>\n<li>排除同源storage</li>\n<li>relevant settings object’s origin is same origin with storage’s relevant settings object’s origin.</li>\n<li>相关设置对象的浏览会话为存储相关设置对象的浏览会话(session与local的区别)</li>\n<li>and, if type is “session”, whose relevant settings object’s browsing session is storage’s relevant settings object’s browsing session.</li>\n</ul>\n</li>\n<li><p>循环 remoteStorages 中的每一个 remoteStorage</p>\n</li>\n<li><p>For each remoteStorage of remoteStorages: </p>\n<ul>\n<li>在全局DOM任务队列中增加一个全局任务， 任务内容为在 remoteStorage 的全局对象上 触发一个 storage 事件</li>\n<li>queue a global task on the DOM manipulation task source given remoteStorage’s relevant global object to fire an event named storage at remoteStorage’s relevant global object, </li>\n<li>using StorageEvent, with key initialized to key, oldValue initialized to oldValue, newValue initialized to newValue, url initialized to url, and storageArea initialized to remoteStorage.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>storage赋值过程  setItem(key, value)</li>\n</ol>\n<ul>\n<li>定义 orderValue null</li>\n<li>定义 reorder(排序器) 为true</li>\n<li>如果 map[key] 存在</li>\n</ul>\n<ul>\n<li>orderValue设置为map[key]</li>\n<li>如果orderValue 为传入的value return </li>\n<li>Set reorder to false</li>\n</ul>\n<ul>\n<li>如果值无法被保存(数据过大或其他错误) throw a “QuotaExceededError” DOMException exception</li>\n<li>设置 map[key] 为 value</li>\n<li>如果recorder为true 对 storage进行排序</li>\n<li>Broadcast this with key, oldValue, and value. </li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage\">https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#storage-2\">https://html.spec.whatwg.org/multipage/webstorage.html#storage-2</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><h3 id=\"Localstorage\"><a href=\"#Localstorage\" class=\"headerlink\" title=\"Localstorage\"></a>Localstorage</h3><ol>\n<li><p>只读的 localStorage 属性允许你访问一个 Document 源（origin）的对象 Storage, 存储的数据将保存在浏览器会话中</p>\n<ul>\n<li>localStorage 是基于 Storage</li>\n<li>localStorage 受同源策略影响(a=&gt;a 保留, a=&gt;b 消失)</li>\n<li>同源页面 a,b, a 打开 b, a 更改 localStorage 后， b 跟着变化</li>\n<li>关闭对应浏览器标签或窗口，不会清除对应的 localStorage</li>\n</ul>\n</li>\n<li><p>定义</p>\n</li>\n</ol>\n<ul>\n<li>window.localStorage</li>\n</ul>\n<h3 id=\"Sessionstorage\"><a href=\"#Sessionstorage\" class=\"headerlink\" title=\"Sessionstorage\"></a>Sessionstorage</h3><ol>\n<li>sessionStorage 属性允许你访问一个，对应当前源的 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。</li>\n</ol>\n<ul>\n<li>sessionStorage 是基于 Storage</li>\n<li>sessionStorage 受同源策略影响(a=&gt;a 保留, a=&gt;b 消失)</li>\n<li>同源页面 a,b, a 打开 b, a 更改 sessionStorage 后， b 不会跟着变化</li>\n<li>关闭对应浏览器标签或窗口，会清除对应的 sessionStorage</li>\n</ul>\n<h3 id=\"Storage-对象\"><a href=\"#Storage-对象\" class=\"headerlink\" title=\"Storage 对象\"></a>Storage 对象</h3><ol>\n<li>定义</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Exposed=Window]</span><br><span class=\"line\">interface Storage &#123;</span><br><span class=\"line\">  readonly attribute <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> length;</span><br><span class=\"line\">  DOMString? <span class=\"built_in\">key</span>(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> index);</span><br><span class=\"line\">  getter DOMString? <span class=\"built_in\">getItem</span>(DOMString key);</span><br><span class=\"line\">  <span class=\"function\">setter undefined <span class=\"title\">setItem</span><span class=\"params\">(DOMString key, DOMString value)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">deleter undefined <span class=\"title\">removeItem</span><span class=\"params\">(DOMString key)</span></span>;</span><br><span class=\"line\">  <span class=\"function\">undefined <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>map<br>a. A storage proxy map is equivalent to a map, except that all operations are instead performed on its backing map.<br>b. map是一个映射， 所有操作都在它支持的映射上执行</li>\n<li>type  ‘local’ or ‘session’</li>\n</ul>\n<ol start=\"2\">\n<li>广播storage实现步骤 To broadcast(同源下浏览器通讯) a Storage object storage, given a key, oldValue, and newValue, run these steps:</li>\n</ol>\n<ul>\n<li><p>Let url be storage’s relevant global object’s associated Document’s URL.  关联全局DOM的URL  document.URL</p>\n</li>\n<li><p>令 remoteStorages 为所有储存对象,排除以下</p>\n</li>\n<li><p>Let remoteStorages be all Storage objects including storage whose:</p>\n<ul>\n<li>排除掉type为local 和 session</li>\n<li>type is storage’s type (local 或者 session)</li>\n<li>排除同源storage</li>\n<li>relevant settings object’s origin is same origin with storage’s relevant settings object’s origin.</li>\n<li>相关设置对象的浏览会话为存储相关设置对象的浏览会话(session与local的区别)</li>\n<li>and, if type is “session”, whose relevant settings object’s browsing session is storage’s relevant settings object’s browsing session.</li>\n</ul>\n</li>\n<li><p>循环 remoteStorages 中的每一个 remoteStorage</p>\n</li>\n<li><p>For each remoteStorage of remoteStorages: </p>\n<ul>\n<li>在全局DOM任务队列中增加一个全局任务， 任务内容为在 remoteStorage 的全局对象上 触发一个 storage 事件</li>\n<li>queue a global task on the DOM manipulation task source given remoteStorage’s relevant global object to fire an event named storage at remoteStorage’s relevant global object, </li>\n<li>using StorageEvent, with key initialized to key, oldValue initialized to oldValue, newValue initialized to newValue, url initialized to url, and storageArea initialized to remoteStorage.</li>\n</ul>\n</li>\n</ul>\n<ol start=\"3\">\n<li>storage赋值过程  setItem(key, value)</li>\n</ol>\n<ul>\n<li>定义 orderValue null</li>\n<li>定义 reorder(排序器) 为true</li>\n<li>如果 map[key] 存在</li>\n</ul>\n<ul>\n<li>orderValue设置为map[key]</li>\n<li>如果orderValue 为传入的value return </li>\n<li>Set reorder to false</li>\n</ul>\n<ul>\n<li>如果值无法被保存(数据过大或其他错误) throw a “QuotaExceededError” DOMException exception</li>\n<li>设置 map[key] 为 value</li>\n<li>如果recorder为true 对 storage进行排序</li>\n<li>Broadcast this with key, oldValue, and value. </li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage\">https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage</a></li>\n<li><a href=\"https://html.spec.whatwg.org/multipage/webstorage.html#storage-2\">https://html.spec.whatwg.org/multipage/webstorage.html#storage-2</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckslbu2cv000zsq3qhzlv2iyy","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"ckslbu2cz0016sq3q0xd0ac47"},{"post_id":"ckslbu2cx0011sq3qfnypgh29","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"ckslbu2d10019sq3q79tx9uhr"},{"post_id":"ckslbu2cy0013sq3qfyot5my6","category_id":"cksladlbs0002sq3q7g5penan","_id":"ckslbu2d1001csq3qhnshhd35"},{"post_id":"ckslbu2cz0015sq3qb2jmc4kp","category_id":"ckslafrf9000asq3qc6d6b7tk","_id":"ckslbu2d2001fsq3q9wiqd0un"},{"post_id":"ckslbu2d00018sq3qa5e16j7v","category_id":"ckslafrf9000asq3qc6d6b7tk","_id":"ckslbu2d3001isq3qg6y817p4"},{"post_id":"ckslbu2d1001bsq3qb8bvfv6u","category_id":"ckslai6ge000jsq3q1gus6vdp","_id":"ckslbu2d4001lsq3qdivi3d68"},{"post_id":"ckslbu2d2001esq3q7hdo9w4d","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"ckslbu2d7001osq3qa2bx9gma"},{"post_id":"ckslbu2d3001hsq3qbz3hgfde","category_id":"ckslarjdi000qsq3qbc9vc9fs","_id":"ckslbu2d7001qsq3q5uwm9rm4"},{"post_id":"ckslbu2d3001ksq3q1jxsf4ja","category_id":"ckslarjdi000qsq3qbc9vc9fs","_id":"ckslbu2d7001ssq3q56e22j55"},{"post_id":"ckslbu2d6001nsq3qfmtodkps","category_id":"ckslarjdi000qsq3qbc9vc9fs","_id":"ckslbu2d7001tsq3q6r6a3998"},{"post_id":"cksle861v001wsq3q8nj71xtw","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"cksleaflh001ysq3qgd01b6pq"},{"post_id":"ckslpwc250000ub9kfrdbfejs","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"ckslpz81h0002ub9kcwbvdpdp"},{"post_id":"ckslner0l0021sq3q8dcw8a06","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"ckslpz9t00004ub9kgph810ao"},{"post_id":"cksn47hd80000ff9kddx7huu2","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"cksn47hdq0003ff9kftma5sss"},{"post_id":"cksn47hdi0001ff9k7eri2mkq","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"cksn47hdq0004ff9k4rjpcfio"},{"post_id":"cl1g0fb8m0001us9k6azzefww","category_id":"cksla4fpe0000p13qfc0x7hdk","_id":"cl1g0fb8u0005us9kcqpe4f74"},{"post_id":"cl1g0fb8g0000us9kb2nv3z45","category_id":"cl1g0fb8n0002us9k9ji419wx","_id":"cl1g0fb8v0007us9k96jq9xff"},{"post_id":"cl1g0fb8s0003us9kgd6fhmpa","category_id":"cl1g0fb8u0006us9k9g4u2k4h","_id":"cl1g0fb8v0009us9k0zfoajmv"},{"post_id":"cl1g2s9c600003b9kecst46ei","category_id":"cl1g2t8wu00006c9k6ygh2fj9","_id":"cl1g2t8x100036c9k9ei4hzle"},{"post_id":"cl38avqmx0001ojmbf7u3c04r","category_id":"cl38avqmz0002ojmb67vzbedl","_id":"cl38avqn70005ojmbfci7g4rc"},{"post_id":"cl3wakism000059kv5wg50vzr","category_id":"ckslai6ge000jsq3q1gus6vdp","_id":"cl3wakist000259kv0d7mcwah"}],"PostTag":[{"post_id":"ckslbu2cv000zsq3qhzlv2iyy","tag_id":"cksla4fpl0001p13q62d2dha0","_id":"ckslbu2cy0012sq3q5hzd0gp0"},{"post_id":"ckslbu2cx0011sq3qfnypgh29","tag_id":"cksla4xjd0004p13qbl598q0g","_id":"ckslbu2cz0014sq3qe4dubqmu"},{"post_id":"ckslbu2cy0013sq3qfyot5my6","tag_id":"cksla4xjd0004p13qbl598q0g","_id":"ckslbu2d00017sq3q4rnj38ll"},{"post_id":"ckslbu2cz0015sq3qb2jmc4kp","tag_id":"ckslafrf9000bsq3qc4rg90k5","_id":"ckslbu2d1001asq3qfqgg5dja"},{"post_id":"ckslbu2d00018sq3qa5e16j7v","tag_id":"ckslah70k000esq3q0i4w4c74","_id":"ckslbu2d2001dsq3q7doldpmt"},{"post_id":"ckslbu2d1001bsq3qb8bvfv6u","tag_id":"ckslai6ge000ksq3qfxp5323z","_id":"ckslbu2d2001gsq3q86wy0itj"},{"post_id":"ckslbu2d2001esq3q7hdo9w4d","tag_id":"ckslaeghv0005sq3q9p2o3x6n","_id":"ckslbu2d3001jsq3q8kmwembi"},{"post_id":"ckslbu2d3001hsq3qbz3hgfde","tag_id":"ckslarjdi000rsq3qf2xc4jt5","_id":"ckslbu2d6001msq3q10s0904m"},{"post_id":"ckslbu2d3001ksq3q1jxsf4ja","tag_id":"ckslarjdi000rsq3qf2xc4jt5","_id":"ckslbu2d7001psq3q8xmu2udf"},{"post_id":"ckslbu2d6001nsq3qfmtodkps","tag_id":"ckslarjdi000rsq3qf2xc4jt5","_id":"ckslbu2d7001rsq3qb6aadcr7"},{"post_id":"cksle861v001wsq3q8nj71xtw","tag_id":"cksleaflh001xsq3q037369kq","_id":"cksleafli001zsq3qf3391kv6"},{"post_id":"ckslner0l0021sq3q8dcw8a06","tag_id":"ckslnfrac0022sq3q91zh3ovi","_id":"ckslnfrad0023sq3q7ues5ehh"},{"post_id":"ckslpwc250000ub9kfrdbfejs","tag_id":"ckslpz81f0001ub9k2s1cfnli","_id":"ckslpz81h0003ub9k9aic0u6o"},{"post_id":"cksn47hd80000ff9kddx7huu2","tag_id":"cksn47hdk0002ff9k4r5m86ov","_id":"cksn47hdr0006ff9kdws7ecdl"},{"post_id":"cksn47hdi0001ff9k7eri2mkq","tag_id":"cksn47hdq0005ff9k52ou6crn","_id":"cksn47hdr0007ff9k72d98w0i"},{"post_id":"cl1g0fb8s0003us9kgd6fhmpa","tag_id":"cl1g0fb8u0004us9k1pjifuxs","_id":"cl1g0fb8v0008us9k2rtg0y15"},{"post_id":"cl1g2s9c600003b9kecst46ei","tag_id":"cl1g2t8x000016c9kh4ljfrgj","_id":"cl1g2t8x100026c9khboo0qsa"},{"post_id":"cl38avqmx0001ojmbf7u3c04r","tag_id":"cl38avqn50003ojmb57d5c4se","_id":"cl38avqn60004ojmben7z4yli"},{"post_id":"cl3wakism000059kv5wg50vzr","tag_id":"cl38avqn50003ojmb57d5c4se","_id":"cl3wakiss000159kv5hi4a6oa"}],"Tag":[{"name":"拷贝","_id":"cksla4fpl0001p13q62d2dha0"},{"name":"事件循环","_id":"cksla4xjd0004p13qbl598q0g"},{"name":"this指针","_id":"ckslaeghv0005sq3q9p2o3x6n"},{"name":"自动部署 Actions","_id":"ckslafrf9000bsq3qc4rg90k5"},{"name":"评论系统","_id":"ckslah70k000esq3q0i4w4c74"},{"name":"url","_id":"ckslai6ge000ksq3qfxp5323z"},{"name":"webpack","_id":"ckslarjdi000rsq3qf2xc4jt5"},{"name":"lodash debounce","_id":"cksleaflh001xsq3q037369kq"},{"name":"queue","_id":"ckslnfrac0022sq3q91zh3ovi"},{"name":"lazyload","_id":"ckslpz81f0001ub9k2s1cfnli"},{"name":"拖拽上传 dragevent","_id":"cksn47hdk0002ff9k4r5m86ov"},{"name":"函数 柯里化","_id":"cksn47hdq0005ff9k52ou6crn"},{"name":"react 组件化","_id":"cl1g0fb8u0004us9k1pjifuxs"},{"name":"Vue slot","_id":"cl1g2t8x000016c9kh4ljfrgj"},{"name":"javascript","_id":"cl38avqn50003ojmb57d5c4se"}]}}